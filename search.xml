<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About Me</title>
    <url>/posts/f0b34752/</url>
    <content><![CDATA[<blockquote>
<p>A student, live in Ji’nan, China.</p>
</blockquote>
<span id="more"></span>
<h4 id="姓名：ZYZhang">姓名：ZYZhang</h4>
<h4 id="性别：男">性别：男</h4>
<h4 id="Github：ZYZhang">Github：<a href="https://github.com/zyzhang827">ZYZhang</a></h4>
<h4 id="Gitee：ZYZhang">Gitee：<a href="https://gitee.com/zyzhang98">ZYZhang</a></h4>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>博客搭建(2)---主题配置遗留问题</title>
    <url>/posts/2ceebbb0/</url>
    <content><![CDATA[<h2 id="分类、标签、关于我">分类、标签、关于我</h2>
<p>如果是跟着第一节的搭建教程完全搭建下来的话，最后，你会发现虽然整体的博客框架有了，但是或多或少还存在着一些小 Bug，比如，点击侧边栏的<code>分类、标签、关于我</code>这些会报错，显示无法 Get。</p>
<h3 id="解决方法">解决方法</h3>
<p>其实出现这些问题也不算是 Bug，<code>Ayer</code>主题的作者已经在说明文档中给出了。</p>
<ul>
<li>
<p>首先在博客根目录右键<code>Git Bash Here</code>，键入以下命令。</p>
<span id="more"></span>
</li>
</ul>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></div>
<p>然后将以下文本复制到<code>D:/MyBlog/source/categories/index.md</code>文件中。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">layout: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></div>
<p>保存退出。这样就解决了侧边栏<code>分类</code>的问题。</p>
<ul>
<li><code>标签</code>的问题解决方法与上边的相似。</li>
</ul>
<p>博客根目录下右键<code>Git Bash Here</code>，键入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></div>
<p>然后将以下文本复制到<code>D:/MyBlog/source/tags/index.md</code>文件中。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"><span class="section">layout: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></div>
<p><code>标签</code>的问题也解决了。</p>
<ul>
<li><code>关于我</code>标签的问题</li>
</ul>
<p>首先打开<code>主题配置文件</code>(注意不是根目录配置文件)，第10行代码修改为<code>关于我: /about</code></p>
<p>然后博客根目录下右键<code>Git Bash Here</code>，键入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></div>
<p>然后打开<code>D:/MyBlog/source/about/index.md</code>文件，以下列模板来书写文件即可。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &lt;自定义 关于我 界面打开的标题&gt;</span><br><span class="line">type: about</span><br><span class="line"><span class="section">layout: about</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">&lt;输入自己的个人简介或者其他想输入的信息&gt;</span><br></pre></td></tr></table></figure></div>
<p>其中<code>&lt;&gt;</code>部分全部为自己自定义内容，可任意修改，除此之外的部分，连一个空格都不要动，防止可能出现的问题。</p>
<p>我的博客<code>about</code>界面设置如下图所示，仅供参考。</p>
<p><img src="https://s2.loli.net/2022/03/27/ipfLkVCcGNhOxDQ.png" alt=""></p>
<h2 id="emoji表情添加">emoji表情添加</h2>
<p>博客写作只是单调的文字总是显得不那么有活力，所以插入一些类似😀😶😐😹😻👌👊👧👦👨‍❤️‍👨🐶🐭🐻🐰🙉🍏🍑🍒⚽🏀🚗🚗🚕❤️会显得文章不是那么单调。</p>
<p>Hexo 默认使用的是<a href="https://github.com/hexojs/hexo-renderer-marked">Hexo-renderer-marked</a>渲染器，它不支持插件扩展，也不支持 emoji解析，所以我们选用<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>渲染器。下面我们将原本默认的渲染器更换为 markdown-it 渲染器，使用这个渲染引擎就可以支持 emoji 表情了。</p>
<p>首先进入博客根目录，右键运行<code>Git Bash Here</code>，输入命令如下。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载默认的 marked 渲染器</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line"><span class="comment"># 安装 markdown-it 渲染器</span></span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line"><span class="comment"># 安装 markdown-it-emoji 插件</span></span><br><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure></div>
<p>完成以上安装后，我们进行配置，打开<code>根目录配置文件</code>，在最后添加以下内容。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: <span class="literal">true</span></span><br><span class="line">    xhtmlOut: <span class="literal">false</span></span><br><span class="line">    breaks: <span class="literal">true</span></span><br><span class="line">    linkify: <span class="literal">true</span></span><br><span class="line">    typographer: <span class="literal">true</span></span><br><span class="line">    quotes: <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-emoji  <span class="comment">## add emoji</span></span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span></span><br><span class="line">    permalink: <span class="literal">false</span>  </span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    <span class="comment"># The symbol used to make the permalink</span></span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure></div>
<p>保存退出。上面的内容主要就是<code>hexo-renderer-markdown-it</code>的一些选项配置，详细的每一项的配置可以查阅其<a href="https://github.com/hexojs/hexo-renderer-markdown-it"> Github 项目主页</a>。</p>
<p>然后，在<a href="https://www.emojicopy.com/"> emoji 列表</a>中找到自己需要的表情，复制粘贴到<code>Typora</code>或者其他<code>Markdown</code>语法编辑器中即可。</p>
<h2 id="评论添加">评论添加</h2>
<p>博客最后的评论框存在 Bug，是由于<code>Ayer</code>主题默认使用了<code>Leancloud + Valine</code>接口的无后端评论系统，但是里边需要填入自己的<code>app_id</code>和<code>app_key</code>，所以我们需要先创建 <a href="https://console.leancloud.cn/apps">LeanCloud 应用</a>，创建应用后在应用设置里边的应用凭证找到<code>AppID</code>和<code>AppKey</code>，然后打开<code>主题配置文件</code>，找到第209~210行，将自己的<code>app_id</code>和<code>app_key</code>填入即可，另外<code>avatar</code>标签的参数可以更换，查看 <a href="https://valine.js.org/avatar.html">Valine 头像配置</a>更换参数来实现评论头像的更换。</p>
<h2 id="自动打开新创建文件">自动打开新创建文件</h2>
<p>每次我们在博客根目录使用右键<code>Git Bash Here</code>打开命令窗口输入<code>hexo new &quot;file&quot;</code>新建博客文件时，总是要自己手动去打开<code>D:\MyBlog\source\_posts</code>文件夹的新建<code>.md</code>文件来编辑文章内容，这样显得很麻烦，所以添加一个 js 脚本来实现每次创建新的博客文件时使用自己指定的编辑器自动打开文件，方便我们直接进行编辑。</p>
<p>首先我们需要在博客根目录下创建一个文件夹<code>scripts</code>用来存放脚本的目录，在<code>scripts</code>中新建一个<code>openNewFile.js</code>文件，将以下内容复制进此<code>.js</code>文件中。</p>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意将”“部分内容更换为自己的编辑器路径 */</span></span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	exec(<span class="string">&#x27;start  &quot;‪D:/Software/Typora/Typora/Typora.exe&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></div>
<p>保存退出，这样每次在<code>hexo new &quot;file&quot;</code>命令运行后，<code>.js</code>脚本会监听到命令的运行，然后自动执行打开文件的任务。</p>
<h2 id="背景特效添加">背景特效添加</h2>
<p><code>Ayer</code>主题已经自带了鼠标点击特效和动态线条背景，现在我添加飘雪的背景。</p>
<p>首先在<code>D:\MyBlog\themes\ayer\source\js\</code>文件夹内放入一个<code>snow.js</code>文件，将以下内容输入此<code>.js</code>文件中。</p>
<!--注意此处文件路径根据你的主题选择，一般将ayer替换为你的主题名即为正确路径，下边涉及路径同理。-->
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*雪花*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $.fn.snow = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;</span><br><span class="line">                <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;z-index&#x27;</span>: <span class="string">&#x27;9999&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span></span><br><span class="line">            &#125;).html(<span class="string">&#x27;❄&#x27;</span>),</span><br><span class="line">            documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">            documentWidth = $(<span class="built_in">document</span>).width(),</span><br><span class="line">            defaults = &#123;</span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">newOn</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">flakeColor</span>: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">            &#125;,</span><br><span class="line">            options = $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">        <span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">                startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">                sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">                endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">                endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">                durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">            $flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">                <span class="attr">left</span>: startPositionLeft,</span><br><span class="line">                <span class="attr">opacity</span>: startOpacity,</span><br><span class="line">                <span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">                <span class="attr">color</span>: options.flakeColor</span><br><span class="line">            &#125;).animate(&#123;</span><br><span class="line">                <span class="attr">top</span>: endPositionTop,</span><br><span class="line">                <span class="attr">left</span>: endPositionLeft,</span><br><span class="line">                <span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">            &#125;, durationFall, <span class="string">&#x27;linear&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).remove()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.fn.snow(&#123;</span><br><span class="line">        <span class="attr">minSize</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">        <span class="attr">maxSize</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">        <span class="attr">newOn</span>: <span class="number">300</span> <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p>然后打开<code>D:\MyBlog\themes\ayer\layout\layout.ejs</code>文件，将以下代码输入。</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line">&lt;% if (theme.snow)&#123; %&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></div>
<p>最后打开<code>主题配置文件</code>，在最后添加<code>snow: true</code>即可。</p>
<p>重新运行<code>hexo g &amp;&amp; hexo s</code>，打开浏览器预览一下效果。</p>
<h2 id="其他">其他</h2>
<p>除此之外，网络上还有许多的美化教程，比如阅读全文添加边框，背景飘带，添加 live2d 看板娘，添加网站运行时间，动态诗词，各种网页小挂件，音乐插件等，大家自行研究。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>ayer</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(3)---Github部署</title>
    <url>/posts/b74c03aa/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>有了前边的一系列配置，我们已经可以在本地端口访问到我们自己的博客主页了，但是想要发布到互联网上，让其他人可以访问，还需要对它进行部署。</p>
<p>因为我们的个人博客仅仅需要的功能比较简单，无非是一些文章记录，所以部署在提供静态网页托管服务的网站上，这样就省去了购买云服务器，购买域名、ip 等这些繁杂的步骤，更重要的是免费。</p>
<p>提供静态网页托管服务的平台有很多，<code>Github</code>最为方便出名，但是由于其服务器不在国内，国内可能出现速度慢的情况，所以还有备用选择<code>Gitee</code>。<span id="more"></span></p>
<h2 id="Github-Pages部署">Github Pages部署</h2>
<h3 id="注册Github账号">注册Github账号</h3>
<p>这个，直接去 <a href="https://github.com/">Github</a> 进行注册就行了，注意用户名非常重要，建议取个好记有意义的名字。</p>
<h3 id="创建Github-Pages仓库">创建Github Pages仓库</h3>
<p>点击右上角的 Sign in 登陆自己的账号，然后左上角有一个<code>New</code>的选项，点击进行新建仓库。其中</p>
<ul>
<li>
<p>Owner 部分自动填充好了,不需要改动</p>
</li>
<li>
<p>Repository name 部分填写<code>你的用户名.github.io</code></p>
</li>
<li>
<p>Description 部分填写自己仓库的描述，无其他要求，也可选择不填</p>
</li>
<li>
<p>Public ☑️</p>
</li>
<li>
<p>Initialize this repository with 部分勾选<code>Add a README file</code></p>
</li>
</ul>
<p>然后点击<code>Create repository</code>创建仓库。</p>
<p>接着我们开始测试能否访问 Github Pages 服务，点击<code>Add file - Create new file</code>创建一个新的静态网页。</p>
<p>输入文件名<code>first.html</code>，然后在 Edit new file 输入<code>&lt;h1&gt;Hello My Blog!&lt;/h1&gt;</code>，然后直接点击下方绿色按钮<code>Commit new file</code>提交文件到仓库。</p>
<p><img src="https://s2.loli.net/2022/03/27/ioYcW5tQbnZkEeS.png" alt=""></p>
<p>然后在浏览器中输入网址<code>https://你的用户名.github.io</code>，看到刚才我们创建的网页的内容，说明 Github Pages 服务正常。</p>
<h2 id="Github-Pages发布">Github Pages发布</h2>
<p>我们在测试的时候直接在仓库目录下创建了一个<code>first.html</code>，就可以通过自己固定的网址来看到我们创建的网页内容，那么我们只要将我们本地写的博客文章生成静态的 html 网页，然后提交到刚才的仓库中，就可以在网址中看到我们博客的内容了。完成这样的一整个流程，我们需要几条简单的命令。</p>
<h3 id="配置Git参数">配置Git参数</h3>
<h4 id="配置身份识别">配置身份识别</h4>
<p>在博客根目录下右键打开<code>Git Bash Here</code>，键入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># username 和 username@XXX.com 是你注册 Github 的用户名和邮箱(之后的代码中涉及到不再提示)</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@XXX.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="生成SSH-Keys">生成SSH Keys</h4>
<p>生成 SSH keys 主要是用于 Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 Github 上，本机就可以提交代码到自己的 Github 库了，这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并进行重新添加。</p>
<p>同样，博客根目录下右键打开<code>Git Bash Here</code>，输入以下命令，一直按<code>Enter</code>即可。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@XXX.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>运行结束后，如下图所示，其中红色方框圈出部分即为生成公钥文件的位置。</p>
<p><img src="https://s2.loli.net/2022/03/27/kY4psGzEXfeMWOR.png" alt=""></p>
<p>然后，继续输入以下命令，查看公钥文件的具体内容，是一个以<code>ssh-rsa</code>开头，以<code>username@XXX.com</code>结尾的字符串。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat 后边的内容就是上边红色方框圈出的部分，根据自己的填写</span></span><br><span class="line">cat /c/Users/dell/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>
<p>然后将这一长串字符串，从开头到结尾全部复制。</p>
<h4 id="配置公钥">配置公钥</h4>
<p>打开自己的 Github 主页，点击自己的头像，选择<code>Setting--SSH and GPG keys</code>，选择右边绿色的<code>New SSH key</code>，<code>Title</code>部分任意填写，<code>Key</code>部分粘贴你刚才复制的一长串字符串，然后点击<code>Add SSH key</code>。</p>
<p>接着打开博客根目录右键<code>Git Bash Here</code>，输入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接复制使用，无需修改</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<p>第一次连接 SSH 可能会出现<code>Are you sure you want to continue connecting?</code>，直接输入<code>yes</code>，然后回车即可。窗口出现<code>Hi 用户名!You've successfully...</code>说明配置公钥成功。</p>
<h3 id="安装Hexo发布插件">安装Hexo发布插件</h3>
<p>博客根目录下右键打开<code>Git Bash Here</code>，输入以下命令，安装<code>hexo-deployer-git</code>，这个插件的主要作用就是将本地生成好的静态网页提交到 Github Pages 仓库中。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></div>
<h3 id="发布">发布</h3>
<p>发布之前，先打开<code>根目录配置文件</code>，将以下内容添加到文件最后，有 deploy 标签的改参数即可，没有的自行添加。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># XXX 表示前边 Github 的用户名</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:XXX/XXX.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></div>
<p>经过一系列的操作，终于可以发布文章到网页上了，右键<code>Git Bash Here</code>，输入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></div>
<p>运行结束后，打开浏览器输入网址<code>https://用户名.github.io</code>，就可以看到之前本地部署的博客文章了。</p>
<p>此时，终于可以让别人访问我们自己的博客了。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Materials Studio安装教程</title>
    <url>/posts/1c974571/</url>
    <content><![CDATA[<h1>Materials Studio安装教程</h1>
<h2 id="软件安装包">软件安装包</h2>
<p><a href="https://www.123pan.com/s/XHVA-IEQ5d">123云盘下载</a></p>
<p>提取码<code>z827</code></p>
<h2 id="修改-lic文件">修改.lic文件</h2>
<ol>
<li>
<p>电脑桌面使用快捷键<code>Win+R</code>打开运行，输入<code>cmd</code>，回车。然后在命令行窗口输入<code>hostname</code>回车，出现计算机名，将其复制备用。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.22000.376]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\dell&gt;hostname</span><br><span class="line">DESKTOP-XXXXXXX</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>找到<code>MS.zip</code>压缩包内的<code>msi2018.lic</code>文件，右键选择”写字板“打开，将第一行中的<code>DESKTOP-HVJ2DIM</code>替换为你刚才复制的自己的计算机名，保存后关闭文件。</p>
</li>
</ol>
<span id="more"></span>
<h2 id="安装MS软件">安装MS软件</h2>
<p>将<code>MS.zip</code>压缩包内的<code>MaterialsStudio2018.rar</code>解压，然后进入解压后的<code>MaterialsStudio2018</code>文件夹，找到<code>setup.exe</code>文件，双击进行安装，安装位置选择默认即可，无需进行改动，直到安装结束显示Finsh，关闭即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220106142453557.png" alt=""><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220106142527139.png" alt=""></p>
<h2 id="lic文件复制">.lic文件复制</h2>
<p>64位的 Windows 操作系统，将之前修改过的<code>msi2018.lic</code>文件复制到以下爱三个文件夹中.</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\BIOVIA\LicensePack\Licenses</span><br><span class="line">C:\Program Files (x86)\BIOVIA\LicensePack\share\data</span><br><span class="line">C:\Program Files (x86)\BIOVIA\LicensePack\win32\bin</span><br></pre></td></tr></table></figure></div>
<h2 id="安装注册信息">安装注册信息</h2>
<p>使用快捷键<code>Win+Q</code>打开系统搜索框，输入<code>License Administrator 2018</code>，然后选中右键”以管理员身份运行“。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220106143734050.png" alt=""></p>
<p>打开左侧的<code>Install License</code>，点击右侧的<code>Browser</code>，找到<code>C:\Program Files (x86)\BIOVIA\LicensePack\Licenses</code>里的<code>msi2018.lic</code>文件，单击打开，然后点击<code>License Administrtor 2018</code>中下方的<code>Install</code>，出现<code>Checkout succeeded...</code>证明安装成功，可以使用<code>MS2018</code>软件了。</p>
<h2 id="打开软件">打开软件</h2>
<p>Windows开始菜单找到<code>Materials Studio 2018</code>打开软件即可。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Molecular Dynamics</category>
        <category>Materials Studio</category>
      </categories>
      <tags>
        <tag>MD</tag>
        <tag>Materials Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(1)--基础知识</title>
    <url>/posts/f566bf84/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本教程基于<a href="https://www.bilibili.com/video/BV1et411b73Z?">B站视频教程</a></p>
</blockquote>
</blockquote>
<p>学习期间，因为自己电脑安装有 Visual Studio Code，故直接在 VSCode 中配置了 C++ 环境，所以作者使用软件与视频软件不同，还是推荐 Microsoft Visual Studio，望周知。</p>
<h2 id="第一个C-程序">第一个C++程序</h2>
<p>编写一个 C++ 程序一共分为4个步骤：</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h3 id="1-创建项目">1.创建项目</h3>
<p>视频中使用 Microsoft Visual Studio 软件创建新的空项目。</p>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220107205256212.png" alt=""></p>
<h3 id="2-创建文件">2.创建文件</h3>
<p>源文件右键添加新项</p>
<h3 id="3-编写代码">3.编写代码</h3>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello C++&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-运行代码">4.运行代码</h3>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220107210648110.png" alt=""></p>
<h2 id="注释">注释</h2>
<p>作用：在代码中添加一些说明和解释，方便自己或者其他程序员和阅读代码。</p>
<p>两种格式：</p>
<ol>
<li>单行注释：<code>// 注释 </code>
<ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，对该代码进行说明。</li>
</ul>
</li>
<li>多行注释：<code>/* 注释 */</code>
<ul>
<li>通常放在一段代码的上方，对该代码进行整体说明。</li>
</ul>
</li>
</ol>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">main 是一个程序的入口</span></span><br><span class="line"><span class="comment">每个程序都必须有这么一个函数，并且只有一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 屏幕中输出 hello world</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="变量和常量">变量和常量</h2>
<h3 id="1-变量">1.变量</h3>
<p>作用：给一段指定的内存空间起名，方便操作这段内存。</p>
<p>语法：<code>数据类型 变量名 = 初始值;</code></p>
<p>示例：</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 变量的定义</span></span><br><span class="line">    <span class="comment">// 语法：数据类型 变量名 = 初始值</span></span><br><span class="line">    <span class="comment">// 输出部分 带引号的就是直接打印部分，不带引号的就是变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    cout  &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-常量">2.常量</h3>
<p>作用：用于记录程序中不可更改的数据。</p>
<p>C++定义常量的两种方式：</p>
<ul>
<li><code>#define</code>宏常量：<code>#define 常量名 常量值</code>
<ul>
<li>通常在文件上方定义，表示一个常量</li>
</ul>
</li>
<li><code>const</code>修饰的变量：<code>const 数据类型 常量名 = 常量值</code>
<ul>
<li>通常在变量定义前加关键字 const，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Day 7</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Day = 14; // 报错，Day是常量，一旦修改就会报错</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一周里共有&quot;</span> &lt;&lt; Day &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一年里共有&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;个月&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// month = 12; // 报错，常量不可被修改</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="关键字">关键字</h2>
<p>作用：关键字是 C++ 中预先保留的单词（标识符）</p>
<p>在定义变量或者常量时候，不要用关键字，因为这些关键字已经被系统使用了，再去定义会报错。</p>
<table>
<thead>
<tr>
<th style="text-align:center">asm</th>
<th>auto</th>
<th>bool</th>
<th>break</th>
<th>case</th>
<th>catch</th>
<th style="text-align:center">char</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">class</td>
<td>const</td>
<td>const_cast</td>
<td>continue</td>
<td>default</td>
<td>delete</td>
<td style="text-align:center">do</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td>dynamic_cast</td>
<td>else</td>
<td>enum</td>
<td>explicit</td>
<td>export</td>
<td style="text-align:center">extern</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td>float</td>
<td>for</td>
<td>friend</td>
<td>goto</td>
<td>if</td>
<td style="text-align:center">inline</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td>long</td>
<td>mutable</td>
<td>namespace</td>
<td>new</td>
<td>operator</td>
<td style="text-align:center">private</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td>public</td>
<td>register</td>
<td>reinterpret_cast</td>
<td>short</td>
<td>signed</td>
<td style="text-align:center">sizeof</td>
</tr>
<tr>
<td style="text-align:center">static</td>
<td>static_cast</td>
<td>struct</td>
<td>switch</td>
<td>template</td>
<td>this</td>
<td style="text-align:center">throw</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td>try</td>
<td>typeid</td>
<td>typename</td>
<td>union</td>
<td>unsigned</td>
<td style="text-align:center">using</td>
</tr>
<tr>
<td style="text-align:center">virtual</td>
<td>void</td>
<td>volatile</td>
<td>wchar_t</td>
<td>while</td>
<td>return</td>
<td style="text-align:center">typeof</td>
</tr>
</tbody>
</table>
<h2 id="标识符命名规则">标识符命名规则</h2>
<p>作用：C++ 规定给标识符（常量、变量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能是字母、下划线、数字组成</li>
<li>第一个字符必须为字母或者下划线</li>
<li>标识符中字母区分大小写</li>
<li>(建议)给标识符取名时，争取做到见名知意，方便自己和他人的阅读</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 标识符由字母、数字、下划线构成</span></span><br><span class="line">    <span class="keyword">int</span> abc = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> _abc = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> _123abc =<span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 标识符第一个字符只能是字母或下划线</span></span><br><span class="line">    <span class="comment">// int 123abc = 40; 错误写法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识符区分大小写</span></span><br><span class="line">    <span class="keyword">int</span> aaa = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; aaa &lt;&lt; endl;    <span class="comment">// 必须是aaa，大写的AAA不行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 见名知意</span></span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>装系统神器--Ventoy</title>
    <url>/posts/274e9706/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<p>Ventoy 是国人自己开发的 ISO 启动引导程序软件，其主要的功能就是可以通过 Ventoy 存储系统的 ISO 镜像文件，然后对电脑进行系统重装。</p>
<span id="more"></span>
<h2 id="优势">优势</h2>
<p>选择 Ventoy 的原因有很多：</p>
<ul>
<li>首先，由于是国人自己开发的，所以界面为中文，简单方便；</li>
<li>支持包括 Windows、WinPE、Ubuntu、Deepin 等多种系统的安装；</li>
<li>无差别支持 Legacy BIOS 和 UEFI 两种模式；</li>
<li>支持 MBR 和 GPT 分区格式；</li>
<li>镜像文件可以与其他文件共存，即装机 U 盘仍然可以作为普通 U 盘使用；</li>
</ul>
<h2 id="使用教程">使用教程</h2>
<p>去<a href="https://www.ventoy.net/en/download.html">Ventoy官网</a>下载<code>Windows</code>版本的 Ventoy 安装包，解压缩之后得到一个<code>Ventoy2Disk.exe</code>文件，然后插入一个干净的 U 盘，打开<code>Ventoy2Disk.exe</code>，主界面选择自己刚才插入的 U 盘的盘符，然后点击<code>Install</code>即可。</p>
<p>安装完成后，进入 U 盘，然后直接将自己下载好的系统镜像文件放入其中即可，推荐下载系统镜像文件网址<a href="https://next.itellyou.cn/">itellyou</a>.</p>
<h2 id="重装系统教程">重装系统教程</h2>
<p>将制作好的 Ventoy 启动盘插入电脑，然后重启计算机，按热键进入 BIOS Setup 模式，将其中的 SecureBoot 关闭；</p>
<p>然后重新启动计算机，按热键进入 BIOS 界面，在 UEFI OPTIONS 中选择自己的 U 盘进行启动，启动后，选择自己想要安装的系统的镜像文件，一路回车即可。</p>
<p>上述中所涉及到的热键，各型号的电脑互有差异，一般在重启界面会有提示按键，再不清楚的可以自行按照自己的电脑型号进行百度。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>乱七八糟</category>
      </categories>
      <tags>
        <tag>ventoy</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(2)--数据类型</title>
    <url>/posts/69e69c5/</url>
    <content><![CDATA[<p>C++ 规定在创建一个变量或者常量的时候，必须要指定出相应的数据类型，否则无法给变量分配内存。</p>
<h2 id="整型">整型</h2>
<p>作用：整型变量表示的是<code>整数类型</code>的数据。</p>
<p>C++ 中能够表示整型的类型有以下几种方式，区别在于所占的内存空间不同：</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th>占用空间</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">short（短整型）</td>
<td>2 字节</td>
<td style="text-align:center">(-2^15 ~ 2^15 -1)</td>
</tr>
<tr>
<td style="text-align:center">int（整型）</td>
<td>4 字节</td>
<td style="text-align:center">(-2^31 ~ 2^31 -1)</td>
</tr>
<tr>
<td style="text-align:center">long（长整型）</td>
<td>Windows/Linux(32位) 4 字节、Linux(64位) 8 字节</td>
<td style="text-align:center">(-2^31 ~ 2^31 -1)</td>
</tr>
<tr>
<td style="text-align:center">long long（长长整型）</td>
<td>8 字节</td>
<td style="text-align:center">(-2^63 ~ 2^63 -1)</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 短整型(-32768 ~ 32767)</span></span><br><span class="line">    <span class="keyword">short</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 整型</span></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 长整型</span></span><br><span class="line">    <span class="keyword">long</span> num3 = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 长长整型</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num4 = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num3 = &quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num4 = &quot;</span> &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="sizeof关键字">sizeof关键字</h2>
<p>作用：利用<code>sizeof</code>关键字统计数据类型所占内存的大小</p>
<p>语法：<code>sizeof(数据类型 / 变量)</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 整型： short(2) int(4) long(4) long long(8)</span></span><br><span class="line">    <span class="comment">// 可以利用sizeof求出数据类型占用内存的大小</span></span><br><span class="line">    <span class="comment">// 语法： sizeof(数据类型 / 变量)    </span></span><br><span class="line">    <span class="keyword">short</span> num1 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">short</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;short占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(num1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> num3 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num4 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long long占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long long占用的内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整型大小比较</span></span><br><span class="line">    <span class="comment">// short &lt; int &lt;= long &lt;= long long</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="实型（浮点型）">实型（浮点型）</h2>
<p>作用：用于表示小数</p>
<p>分为两种：</p>
<ul>
<li>单精度<code>float</code></li>
<li>双精度<code>double</code></li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
<th>有效数字范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4 字节</td>
<td>7 位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8 字节</td>
<td>15 ~ 16位有效数字</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">float</span> f1 = <span class="number">3.14f</span>;         <span class="comment">// (一般默认是双精度)</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">double</span> d1 = <span class="number">3.1415926</span>;    <span class="comment">// (默认小数有效数字 6 位)</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;d1 = &quot;</span> &lt;&lt; d1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 统计 float 和 double 占用内存空间大小 4 和 8</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;float 占用内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;double 占用内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 科学计数法表示小数</span></span><br><span class="line">   <span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10^2</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">float</span> f3 = <span class="number">3e-2</span>; <span class="comment">//3 * 0.1^2</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="字符型">字符型</h2>
<p>作用：字符型变量用于显示单个字符</p>
<p>语法：<code>char ch = 'a';</code></p>
<p>注意：</p>
<ul>
<li>在显示字符型变量时，用单引号将字符括起来，不要用双引号</li>
<li>单引号内只能有一个字符，不可以是字符串</li>
</ul>
<p>C 和 C++ 中字符型变量只占用一个字节。</p>
<p>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元中。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;char字符型变量所占内存：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; endl;    <span class="comment">// a -&gt; 97  ;  A -&gt; 65</span></span><br><span class="line">    <span class="comment">// ch = &quot;abcde&quot;; 错误，不可以用双引号</span></span><br><span class="line">    <span class="comment">// ch = &#x27;abcde&#x27;; 错误，单引号内只能有一个字符</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="转义字符">转义字符</h2>
<p>作用：用于表示一些不能显示出来的 ASCII 字符。</p>
<p>现阶段我们常用的转移字符有：<code>\n  \\  \t</code></p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
<th>ASCII 码值(十进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS)，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF)，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR)，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT)，跳到下一个TAB位置</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\\</td>
<td>代表一个反斜线字符&quot;\\&quot;</td>
<td>092</td>
</tr>
<tr>
<td>\’</td>
<td>代表一个单引号字符</td>
<td>039</td>
</tr>
<tr>
<td>\&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 转义字符</span></span><br><span class="line">    <span class="comment">// 换行符 \n</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反斜杠 \</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 水平制表符 \t(主要就是对齐的效果，整齐的输出后边的内容)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;aaa\thello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;aaaa\thello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;aaaaa\thello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="字符串型">字符串型</h2>
<p>作用：用于表示一串字符。</p>
<p>两种风格：</p>
<ul>
<li>C 风格字符串：<code>char 变量名[] = &quot;字符串值&quot;</code></li>
<li>C++ 风格字符串：<code>string 变量名 = &quot;字符串值&quot;</code></li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span> <span class="comment">// 新版本不需要此头文件仍然可以正常运行</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// C 风格的字符串</span></span><br><span class="line">    <span class="comment">// 注意 1. char str1[]</span></span><br><span class="line">    <span class="comment">// 注意 2. 等号后面用双引号，包含起来字符串</span></span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C++ 风格字符串</span></span><br><span class="line">    string str2 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="布尔类型bool">布尔类型bool</h2>
<p>作用：布尔数据类型代表真或假的值。</p>
<p>bool 类型只有两个值：</p>
<ul>
<li>true – 真(本质是1)</li>
<li>false – 假(本质是0)</li>
</ul>
<p>bool 数据类型占1个字节大小。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建 bool 数据类型</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 本质上 1代表真 0代表假</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 查看 bool 类型所占的内存空间</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(flag) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="数据的输入">数据的输入</h2>
<p>作用：用于从键盘获取数据。</p>
<p>关键字：<code>cin</code></p>
<p>语法：<code>cin &gt;&gt; 变量</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.整型</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给整型变量a赋值:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;整型变量a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 浮点型</span></span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">3.14</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给浮点型变量f赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; f;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;浮点型变量f = &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.字符</span></span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给字符变量ch赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型变量ch = &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.字符串型</span></span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给字符串str赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串型变量str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 布尔类型</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给布尔类型flag赋值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; flag;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;布尔类型flag = &quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(3)--运算符</title>
    <url>/posts/6b34cefc/</url>
    <content><![CDATA[<h2 id="运算符">运算符</h2>
<p>作用：用于执行代码的运算</p>
<p>主要讲解的是以下几类运算符：</p>
<table>
<thead>
<tr>
<th>运算符类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="算术运算符">算术运算符</h3>
<p>作用：处理四则运算</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5*</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a = 2; b = ++a;</td>
<td>a = 3; b = 3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a = 2; b = a++;</td>
<td>a = 3; b = 2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a = 2; b = --a;</td>
<td>a = 1; b = 1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a = 2; b = a–;</td>
<td>a = 1; b = 2;</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 加减乘除</span></span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 / b1 &lt;&lt; endl;        <span class="comment">// 结果为3，因为被除数和除数全是 int，将小数部分全部舍去</span></span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; a2 / b2 &lt;&lt; endl;        <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl;      // 异常报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个小数相除会出现什么情况？</span></span><br><span class="line">    <span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">double</span> d2 = <span class="number">0.22</span>;</span><br><span class="line">    cout &lt;&lt; d1 / d2 &lt;&lt; endl;        <span class="comment">// 结果可以为小数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 取模运算</span></span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; a1 % b1 &lt;&lt; endl;    <span class="comment">// 本质就是取余数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; a2 % b2 &lt;&lt; endl;    <span class="comment">// 结果为 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl;  // 报错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;  //两个小数不可以做取模运算</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 前置递增</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    ++a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 后置递增</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    b++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 前置和后置的区别</span></span><br><span class="line">    <span class="comment">// 前置递增 先让变量+1 然后进行表达式运算</span></span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a2 = &quot;</span> &lt;&lt; a2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b2 = &quot;</span> &lt;&lt; b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置递增 先进行表达式运算 然后让变量+1</span></span><br><span class="line">    <span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a3 = &quot;</span> &lt;&lt; a3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b3 = &quot;</span> &lt;&lt; b3 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="赋值运算符">赋值运算符</h3>
<p>作用：用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a = 2; b = 3;</td>
<td>a = 2; b = 3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a = 0; a += 2;</td>
<td>a = 2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a = 5; a -= 3;</td>
<td>a = 2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a = 2; a *= 2;</td>
<td>a = 4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a = 4; a /= 2;</td>
<td>a = 2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a = 3; a % 2;</td>
<td>a = 1;</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 赋值运算符</span></span><br><span class="line">    <span class="comment">// =</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// +=</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    a += <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -=</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    a -= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// *=</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    a *= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /=</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    a /= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// %=</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    a %= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="比较运算符">比较运算符</h3>
<p>作用：用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 比较运算符</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// ==</span></span><br><span class="line">    cout &lt;&lt; (a == b) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// !=</span></span><br><span class="line">    cout &lt;&lt; (a != b) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// &gt;</span></span><br><span class="line">    cout &lt;&lt; (a &gt; b) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// &lt;</span></span><br><span class="line">    cout &lt;&lt; (a &lt; b) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// &lt;=</span></span><br><span class="line">    cout &lt;&lt; (a &lt;= b) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// &gt;=</span></span><br><span class="line">    cout &lt;&lt; (a &gt;= b) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="逻辑运算符">逻辑运算符</h3>
<p>作用：用于根据表达式的值返回真值或假值</p>
<p>逻辑运算有以下符号：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果 a 假，则 !a 为真；如果 a 为真，则 !a 为假</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果 a 和 b 都为真，则结果为真，否则为假</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果 a 和 b 中有一个为真，则结果为真；二者都为假时，结果为假</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑 非    C++ 中除了 0 都为真</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; !a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; !!a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑 与</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    b = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑 或</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; (c || d) &lt;&lt; endl;</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    d = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; (c || d) &lt;&lt; endl;</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    d = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; (c || d) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(4)--流程结构</title>
    <url>/posts/d2053402/</url>
    <content><![CDATA[<h2 id="程序流程结构">程序流程结构</h2>
<p>C/C++ 支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<span id="more"></span>
<h3 id="选择结构">选择结构</h3>
<h4 id="if语句">if语句</h4>
<p>作用：执行满足条件的语句</p>
<p>if 语句的三种形式</p>
<ul>
<li>单行格式 if 语句</li>
<li>多行语句 if 语句</li>
<li>多条件的 if 语句</li>
</ul>
<ol>
<li>
<p>单行格式 if 语句：<code>if(条件)&#123;条件满足执行的语句&#125;</code></p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">cond1=&gt;condition: 判断条件</span><br><span class="line">o1=&gt;inputoutput: 执行语句</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond1(false)-&gt;e</span><br><span class="line">cond1(true)-&gt;o1-&gt;e</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 单行 if 语句</span></span><br><span class="line">    <span class="comment">// 用户输入分数，如果分数大于600，视为考上一本大学，在屏幕上输出</span></span><br><span class="line">    <span class="comment">// 1) 用户输入分数</span></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2) 打印用户输入的分数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;您输入的分数为：&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3) 判断分数是否大于600，如果大于，则输出数据</span></span><br><span class="line">    <span class="keyword">if</span>(score &gt; <span class="number">600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意事项 if条件语句之后不需要加 分号，否则后边的执行语句与前边条件语句分离</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>多行格式 if 语句：<code>if(语句)&#123;条件满足执行的语句&#125;else&#123;条件不满足执行的语句&#125;</code></p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">cond1=&gt;condition: 判断条件</span><br><span class="line">o1=&gt;inputoutput: 执行语句1</span><br><span class="line">o2=&gt;inputoutput: 执行语句2</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond1(false)-&gt;o2-&gt;e</span><br><span class="line">cond1(true)-&gt;o1-&gt;e</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 多行 if 语句</span></span><br><span class="line">    <span class="comment">// 输入分数，大于600则考上一本大学，小于600则未考上一本大学</span></span><br><span class="line">    <span class="comment">// 1 输入分数</span></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入考试的分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2 提示输入的分数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;您输入的分数为：&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 多条件判断</span></span><br><span class="line">    <span class="keyword">if</span>(score &gt; <span class="number">600</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;很遗憾，您未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>多条件的 if 语句：<code>if(条件1)&#123;条件1满足执行的语句&#125;else if(条件2)&#123;条件2满足执行的语句&#125;...else&#123;都不满足执行的语句&#125;</code></p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">cond1=&gt;condition: 判断条件1</span><br><span class="line">cond2=&gt;condition: 判断条件2</span><br><span class="line">cond3=&gt;condition: ......</span><br><span class="line">cond4=&gt;condition: 判断条件n</span><br><span class="line">o1=&gt;inputoutput: 执行语句1</span><br><span class="line">o2=&gt;inputoutput: 执行语句2</span><br><span class="line">o3=&gt;inputoutput: ......</span><br><span class="line">o4=&gt;inputoutput: 执行语句n</span><br><span class="line">o5=&gt;inoutoutput: 执行语句n+1</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond4(false)-&gt;o5-&gt;e</span><br><span class="line">cond1(false)-&gt;cond2(false)-&gt;cond3(false)</span><br><span class="line">cond1(true)-&gt;o1-&gt;e</span><br><span class="line">cond2(true)-&gt;o2-&gt;e</span><br><span class="line">cond3(true)-&gt;o3-&gt;e</span><br><span class="line">cond4(true)-&gt;o4-&gt;e</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 多条件 if 语句</span></span><br><span class="line">    <span class="comment">// &gt;600 一本  &gt;500 二本  &gt;400 三本</span></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请您输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;您输入的分数是：&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">600</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">500</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;抱歉，您没考上大学，再接再厉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>嵌套 if 语句：在 if 语句中，可以嵌套使用 if 语句，达到更加精确的条件判断。</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考分数，根据分数做出如下判断</li>
<li>分数如果大于600视为考上一本，大于500视为考上二本，大于400视为考上三本，其余视为未考上本科</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入人大，大于600分，考入天大。</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(score &gt; <span class="number">600</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(score &gt; <span class="number">700</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您能考入北京大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">650</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您能考入人大&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您能考入天大&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">500</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">400</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;恭喜您考入三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;抱歉，您未考上本科，再接再厉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>案例分析：三只小猪称体重，找出最重的小猪</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 三只小猪称体重，判断哪只最重</span></span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入小猪 A 的体重&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; num1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入小猪 B 的体重&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; num2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入小猪 C 的体重&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; num3;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小猪 A 的体重为：&quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小猪 B 的体重为：&quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小猪 C 的体重为：&quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A B 比较</span></span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num1 &gt; num3)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;小猪 A 最重&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;小猪 C 最重&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num2 &gt; num3)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;小猪 B 最重&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;小猪 C 最重&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="三目运算符">三目运算符</h4>
<p>作用：通过三目运算符实现简单的判断</p>
<p>语法：<code>表达式1 ? 表达式2 : 表达式3</code></p>
<p>解释：</p>
<ul>
<li>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</li>
<li>如果表达式1的值为假，执行表达式3，并返回表达式3的结果；</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建三个变量 a b c</span></span><br><span class="line">    <span class="comment">// 将 a 和 b 作比较，将变量大的值赋给变量 c</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = (a &gt; b ? a : b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C++ 中三目运算符返回的是变量，可以继续赋值</span></span><br><span class="line">    (a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="switch语句">switch语句</h4>
<p>作用：执行多条件分支语句</p>
<p>语法：</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">1</span> : 执行语句;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">2</span> : 执行语句;<span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span> : 执行语句;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// switch 语句   给电影打分</span></span><br><span class="line">    <span class="comment">// 10 ~ 9 经典  8 ~ 7 非常好  6 ~ 5 一般    5 以下  烂片</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 提示用户给电影评分</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给电影进行打分：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 2. 用户开始进行打分</span></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;您打的分数为：&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 3. 根据用户输入的分数来提示用户最后的结果</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(score)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为是经典电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 退出当前分支</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为是经典电影&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为电影非常好&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为电影非常好&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为电影一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为电影一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您认为电影是个烂片&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if 和 switch 语句的区别：</span></span><br><span class="line"><span class="comment">    switch 在判断的时候，只能是整型或者字符型，不能是一个区间范围</span></span><br><span class="line"><span class="comment">    但是 switch 执行效率高，结构清晰    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="循环结构">循环结构</h3>
<h4 id="while循环语句">while循环语句</h4>
<p>作用：满足循环结构，执行循环结构</p>
<p>语法：<code>while(循环条件)&#123;循环语句&#125;</code></p>
<p>解释：只要循环条件的结果为真，就执行循环语句</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">cond1=&gt;condition: 循环条件</span><br><span class="line">o1=&gt;inputoutput: 执行语句</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;o1-&gt;cond1</span><br><span class="line">cond1(no)-&gt;e</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// while 循环</span></span><br><span class="line">    <span class="comment">// 在屏幕中打印 0~9 这10个数</span></span><br><span class="line">    <span class="comment">// 循环条件注意必须提供跳出循环的出库，否则出现死循环</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例分析：猜数字。系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或者过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 系统生成随机数</span><br><span class="line">cond1=&gt;condition: 玩家猜测</span><br><span class="line">o1=&gt;inputoutput: 提示猜测过大或者过小</span><br><span class="line">o2=&gt;inputoutput: 恭喜玩家胜利</span><br><span class="line">e=&gt;end: 游戏结束</span><br><span class="line">st-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;o2-&gt;e</span><br><span class="line">cond1(no)-&gt;o1-&gt;cond1</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// time系统时间的头文件包含</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 添加随机数种子 作用:利用当前系统时间来生成随机数，防止每次随机数都一样42</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 系统生成随机数</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">rand</span>()%<span class="number">100</span>+<span class="number">1</span>;          <span class="comment">// rand()%100  生成 0~99 随机数</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 玩家进行猜测</span></span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 判断玩家的猜测</span></span><br><span class="line">        <span class="keyword">if</span> (val &gt; num)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;猜测过大&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; num)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;猜测过小&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;恭喜您猜对了&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 退出当前循环，也就是猜对了即游戏结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 猜对  退出游戏</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 猜错  提示猜的结果 过大或者过小 重新返回第2步</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="do…while循环语句">do…while循环语句</h4>
<p>作用：满足循环条件，执行循环语句</p>
<p>语法：<code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p>注意：与<code>while</code>的区别在于<code>do...while</code>会先执行一次循环语句，再判断循环条件</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">o1=&gt;inputoutput: 执行语句</span><br><span class="line">cond1=&gt;condition: 循环条件</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;o1-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;o1</span><br><span class="line">cond1(no)-&gt;e</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// do...while 语句</span></span><br><span class="line">    <span class="comment">// 在屏幕中输出 0 到 9 这十个数字</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        num++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例：水仙花数。一个三位数，每个位上的数字的3次方之和为等于三位数本身。利用<code>do...while</code>语句，求出所有三位数中的水仙花数。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.打印所有的三位数</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 2.从所有三位数中找到水仙花数</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;  <span class="comment">// 个位</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;  <span class="comment">// 十位</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;  <span class="comment">// 百位</span></span><br><span class="line">        a = num % <span class="number">10</span>;</span><br><span class="line">        b = num / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        c = num / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (a*a*a + b*b*b + c*c*c == num)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num &lt; <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="for循环语句">for循环语句</h4>
<p>作用：满足循环条件，执行循环语句</p>
<p>语法：<code>for(起始表达式;条件表达式;末尾循环体) &#123;循环语句;&#125;</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例：敲桌子。从1开始到数字100，如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输出1-100数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 找出符合的数字</span></span><br><span class="line">        <span class="comment">// 7的倍数、个位有7、十位有7</span></span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">7</span> == <span class="number">0</span> || i%<span class="number">10</span> == <span class="number">7</span> || i/<span class="number">10</span> == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;敲桌子&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="嵌套循环">嵌套循环</h4>
<p>作用：在循环体中再嵌套一层循环，解决一些实际问题</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 嵌套循环实现星图</span></span><br><span class="line">    <span class="comment">// 打印星图</span></span><br><span class="line">    <span class="comment">// 外层执行一次，内层执行一周</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// c列数 * 行数     列数 &lt;= 行数</span></span><br><span class="line">    <span class="comment">// 乘法口诀表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; j &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; j*i &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="跳转语句">跳转语句</h3>
<h4 id="break语句">break语句</h4>
<p>作用：用于跳出选择结构或者循环结构</p>
<p>break 使用的时机：</p>
<ul>
<li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// break 的使用时机</span></span><br><span class="line">    <span class="comment">// 1. 出现在 switch 语句中</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1.普通&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2.中等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3.困难&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> select = <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line">    cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (select)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 出现在循环语句中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 需求 i=5 时跳出循环不再打印</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 出现在嵌套循环语句中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="continue语句">continue语句</h4>
<p>作用：在循环语句中，跳出本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="goto语句">goto语句</h4>
<p>作用：可以无条件跳转语句</p>
<p>语法：<code>goto 标记;</code></p>
<p>解释：如果标记的名称存在，执行到<code>goto</code>语句时，会跳转到标记的位置</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">goto</span> FLAG;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    FLAG:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(5)--数组</title>
    <url>/posts/ccc0d47e/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p>
<p>特点：</p>
<ul>
<li>数组中的每个数据元素都是<strong>相同的数据类型</strong></li>
<li>数组是由<strong>连续的内存位置</strong>组成的</li>
</ul>
<span id="more"></span>
<h2 id="一维数组">一维数组</h2>
<h3 id="定义方式">定义方式</h3>
<p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型 数组名[ 数组长度 ];</code></li>
<li><code>数据类型 数组名[ 数组长度 ] = &#123; 值1, 值2... &#125;;</code></li>
<li><code>数据类型 数组名[ ] = &#123; 值1, 值2... &#125;;</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220111163328884.png" alt=""></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 第一种定义方式</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="number">40</span>;</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">// 访问数组元素</span></span><br><span class="line">    cout &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">3</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">4</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种定义方式</span></span><br><span class="line">    <span class="comment">// 如果初始化数据时，没有全部填写，会用来 0 来填补数据</span></span><br><span class="line">    <span class="keyword">int</span> arr2[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    cout &lt;&lt; arr2[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 利用循环输出数组中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr2[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三种定义方式</span></span><br><span class="line">    <span class="comment">// 定义数组的时候，必须有初识长度</span></span><br><span class="line">    <span class="keyword">int</span> arr3[] = &#123;<span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr3[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="数组名">数组名</h3>
<p>一维数组名称的用途：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220111165153400.png" alt=""></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数组名</span></span><br><span class="line">    <span class="comment">// 用途 1</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;整个数组占用内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 结果 40，每个int占4个字节，一共十个</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;每个元素占用内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组中元素个数为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用途 2</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组的首地址为：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组的首地址为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组中第一个元素的地址：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(&amp;arr[<span class="number">0</span>]) &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组中第二个元素的地址：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(&amp;arr[<span class="number">1</span>]) &lt;&lt; endl; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组名是一个常量，不可以用来赋值的操作</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例：五只小猪称体重。在一个数组中记录了五只小猪的体重，找出并打印最重的小猪体重。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建五只小猪的体重</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">300</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">250</span>&#125;;</span><br><span class="line">    <span class="comment">// 2.从数组中找出最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果访问的数组中的元素比我认定的最大值要大，那么更新最大值</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.打印最大值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最重的小猪体重为：&quot;</span> &lt;&lt; max &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例：数组元素逆置。声明一个含有5个元素的数组，并且将元素逆置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220111171338568.png" alt=""></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 实现数组元素的逆置</span></span><br><span class="line">    <span class="comment">// 1. 创建数组</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组逆置前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 实现逆置</span></span><br><span class="line">    <span class="comment">// 2.1 记录起始下标的位置</span></span><br><span class="line">    <span class="comment">// 2.2 记录结束下标的位置</span></span><br><span class="line">    <span class="comment">// 2.3 起始下标和结束下标的元素互换</span></span><br><span class="line">    <span class="comment">// 2.4 起始位置++  结束位置--</span></span><br><span class="line">    <span class="comment">// 2.5 循环执行2.1操作，直到起始位置 &gt;= 结束位置</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 实现元素互换</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">        <span class="comment">// 下标更新</span></span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 打印逆置后的数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组元素逆置后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="冒泡排序">冒泡排序</h3>
<p>**作用：**最常用的排序算法，对数组内的元素进行排序</p>
<ol>
<li>比较相邻的元素，如果第一个比第二个大，就交换他们两个；</li>
<li>对每一个相邻的元素做同样的操作，执行完毕后，找到第一个最大值；</li>
<li>重复以上步骤，每次比较次数 -1，直到不需要比较为止。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220111182547837.png" alt=""></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 冒泡排序实现升序降序</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">9</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始冒泡排序   总共排序的轮数为 元素个数-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span><span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 内层循环对比   次数= 元素个数-当前轮数-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i <span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果第一个数字比第二个数字大，交换两个数字</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序后的结果</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后的结果：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="二维数组">二维数组</h2>
<h2 id=""></h2>
<p>二维数组就是在一维数组之上，多加一个维度。</p>
<h3 id="定义方式-v2">定义方式</h3>
<p>二维数组一般有四种定义方式：</p>
<ol>
<li><code>数据类型 数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型 数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1, 数据2&#125;, &#123;数据3, 数据4&#125;&#125;；</code>(推荐使用，提高代码的可读性)</li>
<li><code>数据类型 数组名[ 行数 ][ 列数 ] = &#123; 数据1, 数据2, 数据3, 数据4&#125;;</code></li>
<li><code>数据类型 数组名[ ][ 列数 ] = &#123; 数据1, 数据2, 数据3, 数据4&#125;;</code></li>
</ol>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 二维数组定义方式</span></span><br><span class="line">    <span class="comment">// 1. </span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[0][0] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[0][1] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[0][2] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[1][0] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[1][1] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; arr[1][2] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// 外层循环打印行数，内层循环打印列数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; arr[i][j] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr2[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr3[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr4[i][j] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="二维数组数组名">二维数组数组名</h3>
<ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 二维数组名称用途</span></span><br><span class="line">    <span class="comment">// 1. 可以查看占用内存空间大小</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = </span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组占用内存空间为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组第一行占用的内存为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组第一个元素占用内存为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组的行数为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组的列数为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) / <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 可以查看二维数组的首地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组的首地址为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组的首地址为：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组第一行的首地址为：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组第一行的首地址为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组的第二行的首地址为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(arr[<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 具体元素的首地址要交 取址符 &amp;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维数组第一个元素的首地址为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(&amp;arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="二维数组应用案例">二维数组应用案例</h3>
<p>考试成绩统计案例：有三名同学(张三、李四、王五)，在一次考试中的成绩分别如下表，请分别输出三名同学的总成绩</p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建二维数组</span></span><br><span class="line">    <span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>]=</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="number">90</span>, <span class="number">50</span>, <span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    string names[<span class="number">3</span>] = &#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += scores[i][j];</span><br><span class="line">            <span class="comment">//cout &lt;&lt; scores[i][j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;的总分为：&quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 统计每个人的总和分数</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(6)--函数</title>
    <url>/posts/62589642/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p><strong>作用</strong>：将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现待定的功能</p>
<span id="more"></span>
<h2 id="函数的定义">函数的定义</h2>
<p>函数的定义一般主要为5个步骤：</p>
<ol>
<li>返回值类型</li>
<li>函数名</li>
<li>参数表列</li>
<li>函数体语句</li>
<li>return 表达式</li>
</ol>
<p>语法：</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体语句</span><br><span class="line">        <span class="keyword">return</span> 表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="函数的调用">函数的调用</h2>
<p><strong>功能</strong>：使用定义好的函数</p>
<p><strong>语法</strong>：<code>函数名 (参数)</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义加法函数</span></span><br><span class="line"><span class="comment">// 函数定义的时候，num1 和 num2 并没有真实的数据，知识形式上的参数，简称形参</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// main函数中调用add函数</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数调用的语法：函数名称 (参数)</span></span><br><span class="line">    <span class="comment">// a b 称为实际的参数，简称实参</span></span><br><span class="line">    <span class="comment">// 调用函数的时候，实参的值 会传递给 形参</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="built_in">add</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="值传递">值传递</h2>
<ul>
<li>
<p>所谓值传递，就是函数调用时<strong>实参</strong>将数值传递给<strong>形参</strong></p>
</li>
<li>
<p>值传递时，如果形参发生任何改变，并不会影响实参</p>
</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数，实现两个数字进行交换的函数</span></span><br><span class="line"><span class="comment">// 如果函数不需要返回值，声明的时候可以写 void </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;交换前的数字是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp = num1;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = temp;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;交换后的数字是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 当我们做值传递的时候，函数的形参发生改变，并不会影响实参</span></span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="函数的常见样式">函数的常见样式</h2>
<p>常见的函数样式有 4 种：</p>
<ul>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; this is test03&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">03</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;this is test04 a =&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1 的调用</span></span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="comment">// 2 的调用</span></span><br><span class="line">    <span class="built_in">test02</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 3 的调用</span></span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="built_in">test03</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 4 的调用</span></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="built_in">test04</span>(<span class="number">10000</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="函数的声明">函数的声明</h2>
<p><strong>作用</strong>：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义</p>
<ul>
<li>函数的声明可以是<strong>多次</strong>的，但是函数的定义只能是<strong>一次</strong></li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用函数的声明告诉编译器函数的存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义比较函数，实现两个整数数字进行比较，返回较大的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="函数的分文件编写">函数的分文件编写</h2>
<p><strong>作用</strong>：让代码结构更加清晰</p>
<p>函数文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为<code>.h</code>的头文件</li>
<li>创建后缀名为<code>.cpp</code>的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// swap.h 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 实现两个数字交换的函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap.cpp 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 主函数文件</span></span><br><span class="line"><span class="comment">// 函数的分文件编写</span></span><br><span class="line"><span class="comment">// 实现两个数字交换的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>Visual Studio</code>可以直接按照视频方法运文件。</p>
<p><code>VSCode</code>中推荐使用<code>C/C++ Project Generator</code>管理项目文件。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(7)--指针</title>
    <url>/posts/8f57cf62/</url>
    <content><![CDATA[<h2 id="指针的基本概念">指针的基本概念</h2>
<p><strong>指针的作用</strong>：可以通过指针间接访问内存</p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针变量保存地址</li>
</ul>
<span id="more"></span>
<h2 id="指针变量的定义和使用">指针变量的定义和使用</h2>
<p>指针变量定义的语法：<code>数据类型 * p </code></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/image-20220112111637478.png" alt=""></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义指针</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 指针定义的语法： 数据类型 * 指针变量名</span></span><br><span class="line">    <span class="keyword">int</span> * p;</span><br><span class="line">    <span class="comment">// 让指针记录变量 a 的地址</span></span><br><span class="line">    p = &amp;a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a 的地址为：&quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;指针 p 为：&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 使用指针</span></span><br><span class="line">    <span class="comment">// 可以通过解引用的方式来找到指针指向的内存</span></span><br><span class="line">    <span class="comment">// 指针前加 * 代表解引用，也就是找到指针指向的内存中的数据</span></span><br><span class="line">    *p = <span class="number">1000</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="指针所占内存空间">指针所占内存空间</h2>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// int *p;</span></span><br><span class="line">    <span class="comment">// p = &amp;a;</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 默认 win32 编译情况下都是 4 个字节大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(int *) = &quot;</span> &lt;&lt;  <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span> *) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(char *) = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span> *) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(float *) = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span> *) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(double *) = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span> *) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="空指针和野指针">空指针和野指针</h2>
<p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p>
<p><strong>用途</strong>：初始化指针变量</p>
<p><strong>注意</strong>：空指针指向的内存是不可以访问的</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 空指针 用于给指针变量进行初始化 </span></span><br><span class="line">    <span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//* p = 100;   空指针是不可以访问的！因为0 ~ 255为系统占用内存，不允许用户访问</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 野指针在程序中应该尽量避免</span></span><br><span class="line">    <span class="comment">// 指针变量 p 指向内存地址编号为 0x1100 的空间</span></span><br><span class="line">    <span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问野指针报错</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; *p &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="const修饰指针">const修饰指针</h2>
<p>const 修饰指针有三种情况</p>
<ol>
<li>const 修饰指针	常量指针
<ul>
<li><code>const int * p = &amp; a;</code>：指针的指向可以修改，但是指针指向的值不可修改</li>
</ul>
</li>
<li>const 修饰常量    指针常量
<ul>
<li><code>int * const p = &amp; a;</code>：指针的指向不可以修改，但是指针指向的值可以修改</li>
</ul>
</li>
<li>const 修饰指针和常量
<ul>
<li><code>const int * const p = &amp; a;</code>：指针指向和指针指向的值都不可以修改</li>
</ul>
</li>
</ol>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// const 修饰指针   常量指针</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * p = &amp;a;</span><br><span class="line">    p = &amp;b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const 修饰常量   指针常量</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">    * p2 = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const 修饰指针和常量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">    <span class="comment">// p3 = &amp;b;   错误</span></span><br><span class="line">    <span class="comment">// * p3 = 100;  错误</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="指针和数组">指针和数组</h2>
<p><strong>作用</strong>：利用指针访问数组中的元素</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 利用指针访问数组中的元素</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> * p = arr;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一个元素：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;指针访问第一个元素：&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 利用指针遍历数组</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;利用指针访问第&quot;</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot;个元素：&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="指针和函数">指针和函数</h2>
<p><strong>作用</strong>：利用指针作函数参数，可以修改实参的值</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;swap1 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;swap1 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 指针和函数</span></span><br><span class="line">    <span class="comment">// 值传递 </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap1</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地址传递</span></span><br><span class="line">    <span class="comment">// 可以修饰实参</span></span><br><span class="line">    <span class="built_in">swap2</span>(&amp;a, &amp;b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a2 = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b2 = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="指针、数组、函数">指针、数组、函数</h2>
<p>案例：封装一个函数，利用冒泡排序实现对整型数组的升序降序</p>
<p>例如数组<code>int arr[10] = &#123;4,3,6,9,1,2,10,8,7,5&#125;;</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序  参数：数组首地址  数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果 j&gt;j+1 的值就交换数字</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个数组</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">    <span class="comment">// 数组长度</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建一个函数实现冒泡排序</span></span><br><span class="line">    <span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 打印排序后的数组</span></span><br><span class="line">    <span class="built_in">printArray</span>(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记(8)--结构体</title>
    <url>/posts/c91b60d1/</url>
    <content><![CDATA[<h2 id="结构体基本概念">结构体基本概念</h2>
<p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型。</p>
<h2 id="结构体定义和使用">结构体定义和使用</h2>
<p>语法：<code>struct 结构体名 &#123; 结构体成员列表 &#125;</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<span id="more"></span>
<ul>
<li><code>struct 结构体名 变量名</code></li>
<li><code>struct 结构体名 变量名 = &#123; 成员1值, 成员2值... &#125;</code></li>
<li>定义结构体时顺便创建变量</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建学生数据类型  姓名 年龄 分数  结构体定义的时候不能够省略struct</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 成员值列表</span></span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 分数</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;s3;</span><br><span class="line"><span class="comment">// 2.通过学生类型创建具体学生</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建结构体变量的时候   struct关键字可以省略</span></span><br><span class="line">    <span class="comment">// 创建方式 1</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s1</span>;</span></span><br><span class="line">    s1.name =  <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s1.age = <span class="number">18</span>;</span><br><span class="line">    s1.score = <span class="number">100</span>;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; s1.name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="string">&quot; 分数:&quot;</span> &lt;&lt; s1.score &lt;&lt; endl; </span><br><span class="line">    <span class="comment">// 创建方式 2</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, <span class="number">80</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; s2.name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; s2.age &lt;&lt; <span class="string">&quot; 分数:&quot;</span> &lt;&lt; s2.score &lt;&lt; endl; </span><br><span class="line">    <span class="comment">// 创建方式 3</span></span><br><span class="line">    s3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">    s3.age = <span class="number">20</span>;</span><br><span class="line">    s3.score = <span class="number">90</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; s3.name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; s3.age &lt;&lt; <span class="string">&quot; 分数:&quot;</span> &lt;&lt; s3.score &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="结构体数组">结构体数组</h2>
<p><strong>作用</strong>：将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法</strong>：<code>struct 结构体名 数组名[元素个数] = &#123; &#123;&#125;, &#123;&#125;, ... &#123;&#125;&#125;</code></p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 2. 创建结构体数组  3. 给结构体数组中元素赋值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stuArray</span>[3] =</span></span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">28</span>, <span class="number">99</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;王五&quot;</span>, <span class="number">38</span>, <span class="number">66</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    stuArray[<span class="number">2</span>].name = <span class="string">&quot;赵六&quot;</span>;</span><br><span class="line">    stuArray[<span class="number">2</span>].age = <span class="number">80</span>;</span><br><span class="line">    stuArray[<span class="number">2</span>].score = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.遍历结构体数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; stuArray[i].name </span><br><span class="line">             &lt;&lt; <span class="string">&quot;  年龄： &quot;</span> &lt;&lt; stuArray[i].age</span><br><span class="line">             &lt;&lt; <span class="string">&quot;  分数： &quot;</span> &lt;&lt; stuArray[i].score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="结构体指针">结构体指针</h2>
<p><strong>作用</strong>：通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符<code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">100</span> &#125;;</span><br><span class="line">    <span class="comment">// 通过指针来指向结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> * <span class="title">p</span> =</span> &amp;s;</span><br><span class="line">    <span class="comment">// 通过指针来访问结构体变量中的数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot;  年龄： &quot;</span>  &lt;&lt; p -&gt; age &lt;&lt; <span class="string">&quot;  分数： &quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="结构体嵌套结构体">结构体嵌套结构体</h2>
<p><strong>作用</strong>：结构体中的成员可以是另一个结构体</p>
<p><strong>例如</strong>：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建老师</span></span><br><span class="line">    teacher t;</span><br><span class="line">    t.id = <span class="number">10000</span>;</span><br><span class="line">    t.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">    t.age = <span class="number">50</span>;</span><br><span class="line">    t.stu.name = <span class="string">&quot;小王&quot;</span>;</span><br><span class="line">    t.stu.age = <span class="number">20</span>;</span><br><span class="line">    t.stu.score = <span class="number">60</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;老师姓名：&quot;</span> &lt;&lt; t.name &lt;&lt; <span class="string">&quot;  老师编号：&quot;</span> &lt;&lt; t.id </span><br><span class="line">    &lt;&lt; <span class="string">&quot;  老师年龄：&quot;</span> &lt;&lt; t.age &lt;&lt; <span class="string">&quot;\n老师辅导的学生姓名：&quot;</span> &lt;&lt;</span><br><span class="line">    t.stu.name &lt;&lt; <span class="string">&quot;  老师辅导的学生年龄：&quot;</span> &lt;&lt; t.stu.age &lt;&lt;</span><br><span class="line">    <span class="string">&quot;  老师辅导的学生考试分数：&quot;</span> &lt;&lt; t.stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="结构体做函数参数">结构体做函数参数</h2>
<p><strong>作用</strong>：将结构体作为参数向函数中传递</p>
<p>传递方式两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent1</span><span class="params">(struct student s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.age = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;值传递子函数中 姓名：&quot;</span> &lt;&lt; s.name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span></span><br><span class="line">    &lt;&lt; s.age &lt;&lt; <span class="string">&quot;  分数：&quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(struct student * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;age = <span class="number">200</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;地址传递子函数中 姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span></span><br><span class="line">    &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot;  分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将学生传入到一个参数中，打印学生身上的所有信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span>;</span></span><br><span class="line">    s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s.age = <span class="number">20</span>;</span><br><span class="line">    s.score = <span class="number">85</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main函数中打印  姓名：&quot;</span> &lt;&lt; s.name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span></span><br><span class="line">    &lt;&lt; s.age &lt;&lt; <span class="string">&quot;  分数：&quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printStudent1</span>(s);</span><br><span class="line">    <span class="built_in">printStudent2</span>(&amp;s);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>注意</strong>：如果不想修改主函数中的数据，就用值传递，否则用地址传递。</p>
<h2 id="结构体中const使用场景">结构体中const使用场景</h2>
<p><strong>作用</strong>：用 const 来防止误操作。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数中的形参改为指针可以减少内存空间，而且不会复制新的副本出来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudents</span><span class="params">(<span class="keyword">const</span> student *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//s -&gt; age = 150;  加了const之后，只能读不能写，防止我们的误操作</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; s-&gt;name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span> &lt;&lt; s-&gt;age &lt;&lt; <span class="string">&quot;  分数：&quot;</span> &lt;&lt; s-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">16</span>, <span class="number">70</span>&#125;;</span><br><span class="line">    <span class="comment">// 通过函数打印结构体变量的信息</span></span><br><span class="line">    <span class="built_in">printStudents</span>(&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="结构体案例">结构体案例</h2>
<h3 id="案例1">案例1</h3>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下：</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数、创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例 1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string sName;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string tName;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">sArray</span>[5];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(struct Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">    <span class="comment">// 给老师赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tArray[i].tName = <span class="string">&quot;Teacher_&quot;</span>;</span><br><span class="line">        tArray[i].tName += nameSeed[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过循环给老师带的每个学生赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tArray[i].sArray[j].sName = <span class="string">&quot;Student_&quot;</span>;</span><br><span class="line">            tArray[i].sArray[j].sName += nameSeed[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 随机分数(但是此时是伪随机，要在main中加入随机数种子)</span></span><br><span class="line">            <span class="keyword">int</span> random = <span class="built_in">rand</span>()%<span class="number">61</span> + <span class="number">40</span>;        <span class="comment">// 0~59 -&gt; 40~100</span></span><br><span class="line">            tArray[i].sArray[j].score = random;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(struct Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;老师姓名：&quot;</span> &lt;&lt; tArray[i].tName &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t学生姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].sName &lt;&lt; <span class="string">&quot; 考试分数：&quot;</span> </span><br><span class="line">            &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 随机数种子</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// 1.创建三名老师的数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">tArray</span>[3];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.通过函数给三名老师的信息赋值，并给老师带的学生信息赋值</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(tArray) / <span class="built_in"><span class="keyword">sizeof</span></span>(tArray[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">allocateSpace</span>(tArray, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.打印所有老师及所带学生信息</span></span><br><span class="line">    <span class="built_in">printInfo</span>(tArray, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="案例2">案例2</h3>
<p>设计一个英雄的结构体，包括成员姓名、年龄、性别；</p>
<p>创建结构体数组，数组中存放5名英雄；</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，并最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<table>
<thead>
<tr>
<th>英雄</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td>23</td>
<td>男</td>
</tr>
<tr>
<td>关羽</td>
<td>22</td>
<td>男</td>
</tr>
<tr>
<td>张飞</td>
<td>20</td>
<td>男</td>
</tr>
<tr>
<td>赵云</td>
<td>21</td>
<td>男</td>
</tr>
<tr>
<td>貂蝉</td>
<td>19</td>
<td>女</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(struct Hero heroArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i- <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (heroArray[j].age &gt; heroArray[j+<span class="number">1</span>].age)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> <span class="title">temp</span> =</span> heroArray[j];</span><br><span class="line">                heroArray[j] = heroArray[j+<span class="number">1</span>];</span><br><span class="line">                heroArray[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">(struct Hero heroArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; heroArray[i].name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span> &lt;&lt; heroArray[i].age </span><br><span class="line">        &lt;&lt; <span class="string">&quot;  性别：&quot;</span> &lt;&lt; heroArray[i].sex &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.设计英雄的结构体     2.创建数组存放5名英雄</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> <span class="title">heroArray</span>[5] =</span></span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">&quot;刘备&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;关羽&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;张飞&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;赵云&quot;</span>, <span class="number">21</span>, <span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;貂蝉&quot;</span>, <span class="number">19</span>, <span class="string">&quot;女&quot;</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(heroArray) / <span class="built_in"><span class="keyword">sizeof</span></span>(heroArray[<span class="number">0</span>]);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main函数直接输出&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; heroArray[i].name &lt;&lt; <span class="string">&quot;  年龄：&quot;</span> &lt;&lt; heroArray[i].age </span><br><span class="line">        &lt;&lt; <span class="string">&quot;  性别：&quot;</span> &lt;&lt; heroArray[i].sex &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后的输出结果：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 3.对数组进行排序，按照年龄升序</span></span><br><span class="line">    <span class="built_in">bubbleSort</span>(heroArray, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.输出打印结果</span></span><br><span class="line">    <span class="built_in">printHero</span>(heroArray, len);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>KMCLib安装</title>
    <url>/posts/1f98607f/</url>
    <content><![CDATA[<h2 id="基础包安装">基础包安装</h2>
<p>检查一些需要安装的包是否存在并且为最新版本。打开终端<code>ctrl+alt+t</code>，输入以下命令</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装适用 C++ 的编译器</span></span><br><span class="line">sudo apt install g++</span><br><span class="line"><span class="comment"># 安装 cmake</span></span><br><span class="line">sudo apt install cmake</span><br><span class="line"><span class="comment"># 安装 python 的头文件和静态库</span></span><br><span class="line">sudo apt install python-dev</span><br><span class="line"><span class="comment"># 查找已安装包的更新，并进行更新</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="下载-KMCLib">下载 KMCLib</h2>
<p>开源的<code>KMCLib</code>源码中有许多错误，直接采用下面两种方法下载后需要再进行修改。如果对于<code>C++</code>和<code>python</code>有一定的了解，可以采用下面的方式一或者方式二下载后，<strong>自行对源码进行修改</strong>。</p>
<p>对于没有编程基础，不想自己动手修改的，可以自己选择方法三中提供的蓝奏云盘链接下载，其中的代码包括源码部分以及截至到 2020-12-30 <code>74780ff</code>的所有 <code>Commits</code>部分。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 方法一</span></span><br><span class="line">git clone https://github.com/leetmaa/KMCLib.git</span><br><span class="line"><span class="section"># 方法二</span></span><br><span class="line">git clone https://gitee.com/zyzhang98/KMCLib.git</span><br><span class="line"><span class="section"># 蓝奏云</span></span><br><span class="line">https://zyzhang.lanzouw.com/ivKVWyxxgbc    【Z827】</span><br></pre></td></tr></table></figure></div>
<h2 id="修改-python-默认版本">修改 python 默认版本</h2>
<p><code>KMCLib</code>源码中 Python 部分最初是由 Python2.x 编写的，但是上边蓝奏云链接里的版本经过多次<code>Commits</code>之后，已经实现了对 python3.x 语法的兼容。考虑个人最初接触的是 Python3 ，所以这里将 Ubuntu 系统的默认版本设置为 Python3.x。</p>
<p>最新版的 Ubuntu 中已经内置了 Python2 和 Python3 双版本，只需要进行简单的设置即可更改默认调用的 Python 版本。</p>
<p>打开终端，输入以下命令</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看自己电脑中所有 Python 版本及路径</span></span><br><span class="line">ls /usr/bin/python*</span><br><span class="line"><span class="comment"># 查看自己电脑默认的 Python 版本</span></span><br><span class="line">python --version</span><br></pre></td></tr></table></figure></div>
<p>我的电脑是<code>Ubuntu 20.04.3 LTS</code>版本系统，经过运行上述代码后，可以看到系统中有<code>Python2.7</code>和<code>Python3.8</code>双版本，且默认为<code>Python2.7</code>版本。</p>
<ol>
<li>
<p>系统级修改默认 Python 版本</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有可用的 Python 替代版本</span></span><br><span class="line">sudo update-alternatives --list python</span><br></pre></td></tr></table></figure></div>
<p>如果运行上述代码报错<code>no alternatives for python</code>，请先运行以下代码(注意如果路径与我不同，要将其中 Python2/3 修改为自己的路径)</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 2</span><br></pre></td></tr></table></figure></div>
<p>然后重新运行列出所有版本的代码和设置代码。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有可用版本</span></span><br><span class="line">sudo update-alternatives --list python</span><br><span class="line"><span class="comment"># 输入序号切换可用版本</span></span><br><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>基于个人用户修改默认 Python 版本</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<p>在<code>~/.bashrc</code>文件最后添加<code>alias python='/usr/bin/python3.8'</code></p>
<p>然后打开终端运行</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h2 id="添加环境变量">添加环境变量</h2>
<p>我下载后的<code>KMCLib</code>文件夹路径设置为<code>/home/&lt;用户名&gt;/KMCLib</code>，其中<code>KMCLib</code>文件夹下存在<code>c++</code>,<code>manual</code>,<code>python</code>三个子文件夹。</p>
<p>添加环境变量</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<p>在<code>~/.bashrc</code>文件末尾添加以下内容</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CPLUS_INCLUDE_PATH=/usr/include/python3.8:<span class="variable">$&#123;CPLUS_INCLUDE_PATH&#125;</span></span><br><span class="line"><span class="comment"># 如果全部是按照以下步骤进行配置，只需要将用户名部分改为自己的正式路径即可</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=/home/你自己用户名/KMCLib/python/src:<span class="variable">$&#123;PYTHONPATH&#125;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端更新 ~/.bashrc 文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<h2 id="安装-Swig">安装 Swig</h2>
<p>swig 主要是为了将 C++ 程序封装在 Python 环境中，前端为 Python，后端为 C++。可以简单理解为包装盒是 Python，包装盒里装的是 C++。Swig 的作用就是为了能够将 C++ 装进 Python 包装盒里。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">sudo apt install swig</span><br></pre></td></tr></table></figure></div>
<h2 id="安装外部依赖">安装外部依赖</h2>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 externals 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> KMCLib/c++/externals</span><br><span class="line"><span class="comment"># 配置 C 和 C++ 编译器</span></span><br><span class="line">CXX=g++ CC=gcc make</span><br></pre></td></tr></table></figure></div>
<h2 id="安装-KMCLib-测试包和后端文件">安装 KMCLib 测试包和后端文件</h2>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> KMCLib/c++</span><br><span class="line"><span class="comment"># 创建 build 文件夹</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="comment"># 进入新创建的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 串行版本安装</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># 并行版本安装(仅安装串行即可0)</span></span><br><span class="line">cmake-DMP=g++..</span><br></pre></td></tr></table></figure></div>
<h2 id="编译-test-文件">编译 test 文件</h2>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /KMCLib/c++/build</span><br><span class="line">make test.x</span><br><span class="line">./unittest/test.x</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<h2 id="示例运行">示例运行</h2>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> KMCLib/python/unittest/</span><br><span class="line">python3 utest.py</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Molecular Dynamics</category>
        <category>KMCLib</category>
      </categories>
      <tags>
        <tag>MD</tag>
        <tag>C++</tag>
        <tag>KMCLib</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Lammps安装</title>
    <url>/posts/81c58c19/</url>
    <content><![CDATA[<h2 id="基础安装包">基础安装包</h2>
<p>打开电脑终端<code>ctrl+alt+t</code>，依次键入以下命令，<code>#</code>后的文字为注释部分</p>
<div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="meta">#</span><span class="bash"> 基于cmake安装lammps</span></span><br><span class="line">sudo apt-get install cmake</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装fortran编译器</span></span><br><span class="line">sudo apt-get install gfortran</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装自己熟悉的文本编辑器vim, vi, emacs等</span></span><br><span class="line">sudo apt-get install vim</span><br><span class="line">sudo apt-get install libssl-dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新已安装的所有包</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="mpich安装">mpich安装</h2>
<p>可以根据自己的需要，自行选择实现 MPI 的包，这里以 mpich 为例。</p>
<p>打开电脑终端，依次输入以下命令</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用内置 wget 命令下载 mpich 安装包文件</span></span><br><span class="line">wget https://www.mpich.org/static/downloads/3.4.3/mpich-3.4.3.tar.gz</span><br><span class="line"><span class="comment"># 对安装包进行解压缩</span></span><br><span class="line">tar -xvf mpich-3.4.3.tar.gz</span><br><span class="line"><span class="comment"># 进入解压后的 mpich 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> mpich-3.4.3/</span><br><span class="line"><span class="comment"># mpich 安装配置</span></span><br><span class="line">./configure --enable-shared=yes</span><br></pre></td></tr></table></figure></div>
<p>在上一步最后安装配置后，可能出现以下问题：</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">The default ch4 device could not detect a preferred network</span><br><span class="line">library. Supported options are ofi (libfabric) and ucx:</span><br><span class="line">    --with-device=ch4:ofi or --with-device=ch4:ucx</span><br><span class="line">Configure will use an embedded copy of libfabric or ucx <span class="keyword">if</span> one is</span><br><span class="line">not found <span class="keyword">in</span> the user environment. An installation can be specified</span><br><span class="line">by adding</span><br><span class="line">    --with-libfabric=&lt;path/to/install&gt; or --with-ucx=&lt;path/to/install&gt;</span><br><span class="line">to the configuration.</span><br><span class="line">The previous MPICH default device (ch3) is also available and</span><br><span class="line">supported with option:</span><br><span class="line">    --with-device=ch3</span><br></pre></td></tr></table></figure></div>
<p>使用以下命令重新进行安装配置</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --with-device=ch4:ofi --enable-shared=yes</span><br></pre></td></tr></table></figure></div>
<p>完成上述配置后，最后显示<code>Configuration completed</code>即说明配置完成。</p>
<p>然后继续键入以下命令</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></div>
<p>对文件进行 make 编译后，之后的操作出现错误需要重新输入命令的时候，建议先回到<code>mpich-3.3.4</code>文件夹进行<code>make clean-all</code>和<code>make</code>，删除之前的错误编译文件，防止出现其他问题。</p>
<h2 id="环境变量添加">环境变量添加</h2>
<p>然后在<code>~/.bashrc</code>文件中添加路径，终端中输入<code>sudo gedit ~/.bashrc</code>，然后在文件末尾中添加以下内容。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure></div>
<p>然后更新环境变量，使修改后的环境变量生效。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<h2 id="lammps安装">lammps安装</h2>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget https://download.lammps.org/tars/lammps-stable.tar.gz</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -xvf lammps-stable.tar.gz</span><br><span class="line"><span class="comment"># 进入解压后的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> lammps-29Sep2021/</span><br><span class="line"><span class="comment"># 创建 build 目录</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="comment"># 进入 build 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">cmake ../cmake</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 返回上级目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></div>
<p>以下进行测试</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入lammps文件夹中的 deposit 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> examples/deposit</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">mpirun -n 2 lmp &lt; in.deposit.atom</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Molecular Dynamics</category>
        <category>LAMMPS</category>
      </categories>
      <tags>
        <tag>MD</tag>
        <tag>lammps</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器插件和脚本</title>
    <url>/posts/2e4158e/</url>
    <content><![CDATA[<h2 id="Tampermonkey">Tampermonkey</h2>
<h3 id="安装扩展">安装扩展</h3>
<h4 id="Chrome浏览器安装">Chrome浏览器安装</h4>
<p>由于 Chrome 浏览器自带的插件商店，国内用户需要“魔法上网”才能进去，所以这里直接提供了 Tampermonkey 插件的下载链接。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">https://zyzhang.lanzouw.com/ilYXtyyaehe 		[Z827]</span><br></pre></td></tr></table></figure></div>
<p>首先打开 Chrome 浏览器，点击右上角的三个点的标志，找到更多工具中的扩展选项，进入。</p>
<span id="more"></span>
<ol>
<li>直接将下载好的<code>.crx</code>文件拖入扩展程序界面安装</li>
<li>如果 1 中的方法报错，尝试将<code>.crx</code>文件后缀改为<code>.zip</code>压缩包，然后解压，在扩展程序界面点击<code>加载已解压的扩展程序</code>，然后选择刚才解压好的整个文件夹，进行安装。</li>
</ol>
<h4 id="Edge安装">Edge安装</h4>
<p>直接打开 <a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home?hl=zh-CN">Edge 外接程序</a>官网，搜索框输入<code>Tampermonkey</code>进行安装。</p>
<h4 id="Firefox安装">Firefox安装</h4>
<p>打开 Firefox 浏览器，按快捷键<code>Ctrl+Shift+A</code>进入<code>扩展和主题选项</code>，在页面最下方找到<code>寻找更多附加组件</code>，然后进行<code>Tampermonkey</code>的搜索安装。</p>
<h3 id="脚本安装">脚本安装</h3>
<p>在上一步安装过<code>Tampermonkey</code>之后，在浏览器工具栏找到<code>Tampermonkey</code>的图标，点击，然后选择获取新脚本，点击进入<a href="https://greasyfork.org/zh-CN">Greasy Fork 官网</a>，然后在搜索框中寻找自己想要的脚本安装即可。</p>
<p>脚本其实就是别人将某些网站上的一些特定的操作写成了 js 代码，然后将代码封装成了脚本，使得不懂代码的人可以直接使用脚本达到某些特定的目的。</p>
<p>下面推荐几个自己在用的脚本。</p>
<h4 id="知网PDF下载助手">知网PDF下载助手</h4>
<p>作者：Supernova_BingBing</p>
<p>链接：<a href="https://greasyfork.org/zh-CN/scripts/390733-%E7%9F%A5%E7%BD%91pdf%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B">知网 PDF 下载助手 (greasyfork.org)</a></p>
<p>许多学生会用到知网去搜索论文，但是比较烦人的一个地方是它把一些论文的下载格式进行了限制，只能够下载官方<code>CAJ阅读器</code>进行<code>.caj</code>文件的阅读。</p>
<p>这时候这个脚本的作用就体现出来了，当你打开知网之后，搜索论文，你会发现之前不能够直接下载<code>.pdf</code>格式的论文多出了几个按钮，其中有<code>PDF整本下载</code>、<code>目录下载</code>等，操作非常简单，直接点击即可下载。</p>
<p>脚本的缺点就是下载后的<code>.pdf</code>文件是没有目录的，对目录没有需求的可以不用关心这个问题了就，对目录有强迫需求的，可以通过脚本的目录复制按钮，然后下载 PdgCntEditor 软件制作目录，具体操作脚本说明里都有，这里就不再赘述了。</p>
<p>同类脚本：<a href="https://greasyfork.org/zh-CN/scripts/389343-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91cnki%E7%A1%95%E5%8D%9A%E8%AE%BA%E6%96%87pdf%E4%B8%8B%E8%BD%BD">中国知网 CNKI 硕博论文 PDF 下载 (greasyfork.org)</a></p>
<h4 id="百度广告清理">百度广告清理</h4>
<p>作者：hoothin</p>
<p>链接：<a href="https://greasyfork.org/zh-CN/scripts/24192-%E7%99%BE%E5%BA%A6%E5%B9%BF%E5%91%8A-%E9%A6%96%E5%B0%BE%E6%8E%A8%E5%B9%BF%E5%8F%8A%E5%8F%B3%E4%BE%A7%E5%B9%BF%E5%91%8A-%E6%B8%85%E7%90%86">百度广告 (首尾推广及右侧广告) 清理 (greasyfork.org)</a></p>
<p>主要是清理百度搜索首页的首尾推广广告，右侧广告等。</p>
<p>同类脚本：<a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97">AC-baidu - 重定向优化百度搜狗谷歌必应搜索_favicon_双列 (greasyfork.org)</a></p>
<h4 id="Github增强-高速下载">Github增强-高速下载</h4>
<p>作者：X.I.U</p>
<p>链接：<a href="https://greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD">Github 增强 - 高速下载 (greasyfork.org)</a></p>
<p>这个脚本主要的作用就是当我们在浏览 Github 时候，由于网络问题，本来网站已经是时不时的不能进入了，我们想要下载 Github 上的一些源代码，速度更是非常慢，而这个软件可以帮我们提供几个其他的下载链接，速度还是可以接受的。当然， Github 上的一些源代码也可以使用 Fork 的形式，将其克隆到国内的 Gitee 上，然后再进行下载也是可以的。</p>
<h4 id="Wenku-Doc-Downloader">Wenku Doc Downloader</h4>
<p>作者：Allen Lv</p>
<p>链接：<a href="https://greasyfork.org/zh-CN/scripts/435884-wenku-doc-downloader">Wenku Doc Downloader (greasyfork.org)</a></p>
<p>这个可以帮助我们下载百度文库、豆丁网、爱问共享资料、得力文档、道客巴巴、360doc 图书馆的文档资料。但是，缺点就是它的下载只能是 pdf 或者图片压缩包，也就是说类似截图扫描出来的一样，只能当作临时使用。另外，脚本作者在脚本说明中还提到了另外一个叫做文库下载器的脚本，也是可以解析百度文库的资料然后进行下载。</p>
<h4 id="其他">其他</h4>
<p>除了上述提到的脚本，还有许多实现各种功能的脚本，CSDN 和知乎去除登陆提示，各大视频网站 VIP 视频解析等等。还可以根据自己所访问网站进行脚本的搜索，查找适用于某个网站的脚本。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>乱七八糟</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鸟集</title>
    <url>/posts/2f2ba896/</url>
    <content><![CDATA[<p>🟩 What you are you do not see, what you see is your shadow.<br>
🟪 你无法看到自己, 你看到的是你认为的自己.</p>
<p>🟨 I cannot choose the best. The best chooses me.<br>
🟥 我做不到选择最好的, 是最好的选择了我.</p>
<p>🟦 Let him only see the thorns who has eyes to see the rose.<br>
🟧 让那些盯着玫瑰花的人啊, 多看看玫瑰的刺吧.</p>
<p>⬛ “Who drives me forward like fate?” “The Myself striding on my back.”<br>
🟫 “是谁像命运一样催我向前?” “是我自己一直在我后面.”</p>
<p>⬜ Power takes as ingratitude the writhings of its victims.<br>
🟪 在强权看来, 牺牲品的痛苦是不知好歹.</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>鸡汤</category>
      </categories>
      <tags>
        <tag>文化</tag>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(1)--print()函数</title>
    <url>/posts/79e6c2f2/</url>
    <content><![CDATA[<blockquote>
<p>ZY.Zhang</p>
<p>本文档基于<a href="https://www.bilibili.com/video/BV1wD4y1o7AS?spm_id_from=pageDriver">B站Python教程</a></p>
</blockquote>
<h2 id="1-可以输出数字">1. 可以输出数字</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">520</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">98.5</span>)</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="2-可以输出字符串">2. 可以输出字符串</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-可以输出含有运算符的表达式">3. 可以输出含有运算符的表达式</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>
<!--more-->
<h2 id="4-可以输出到文件">4. 可以输出到文件</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;D:/text.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>,file=fp)</span><br><span class="line">fp.close</span><br></pre></td></tr></table></figure></div>
<p>*注意：*1.所指定的盘符必须存在；2.使用<code>file=fp</code>；3.<code>a+</code>表示文件不存在就创建，存在的话就在内容上继续追加。</p>
<p>不进行换行输出：</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
  </entry>
  <entry>
    <title>Python 学习笔记(10)--字符串</title>
    <url>/posts/9fbebe63/</url>
    <content><![CDATA[<h2 id="1-字符串的驻留机制">1. 字符串的驻留机制</h2>
<p>*字符串：*在Python中是基本数据类型，是一个不可变的字符序列。</p>
<p>*字符串的驻留机制：*仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中，Python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同的字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;字符串的驻留机制&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;Python&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(b,<span class="built_in">id</span>(b))</span><br><span class="line"><span class="built_in">print</span>(c,<span class="built_in">id</span>(c))</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<p><em>驻留机制的几种情况（交互模式）：</em></p>
<ul>
<li>字符串的长度为0或1时</li>
<li>符合标识符的字符串</li>
<li>字符串只在编译时进行驻留，而非运行时</li>
<li>[-5,256]之间的整数数字</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s1 <span class="keyword">is</span> s2</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">s1 <span class="keyword">is</span> s2</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;abc%&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;abc%&#x27;</span></span><br><span class="line">s1 == s2</span><br><span class="line"></span><br><span class="line">s1 <span class="keyword">is</span> s2</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>(s1)</span><br><span class="line"><span class="built_in">id</span>(s2)</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;abcx&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;abcx&#x27;</span></span><br><span class="line">s1 <span class="keyword">is</span> s2</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>(s1)</span><br><span class="line"><span class="built_in">id</span>(s2)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;ab&#x27;</span>+<span class="string">&#x27;c&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">a <span class="keyword">is</span> c </span><br><span class="line">c</span><br><span class="line"><span class="built_in">type</span>(c)</span><br><span class="line">a</span><br><span class="line"><span class="built_in">type</span>(a)</span><br><span class="line"></span><br><span class="line">a = -<span class="number">5</span></span><br><span class="line">b = -<span class="number">5</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line">a = -<span class="number">6</span></span><br><span class="line">b = -<span class="number">6</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="string">&#x27;abc%&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;abc%&#x27;</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line"></span><br><span class="line">a = sys.intern(b)</span><br><span class="line">a <span class="keyword">is</span> b</span><br></pre></td></tr></table></figure></div>
<p><em>sys中的intern方法强制2个字符串指向同一个对象</em></p>
<p><em>PyCharm对字符串进行了优化处理</em></p>
<p><em>字符串驻留机制的优缺点：</em></p>
<ul>
<li>当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能呢的</li>
<li>在需要进行字符串拼接时建议使用str类型的<code>join</code>方法，而非<code>+</code>，因为<code>join()</code>方法是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率要比“+”高。</li>
</ul>
<h2 id="2-字符串的常用操作">2. 字符串的常用操作</h2>
<h3 id="（1）字符串的查询操作">（1）字符串的查询操作</h3>
<p><code>index</code>		<code>rindex</code>		<code>find</code>		<code>rfind</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,hello&#x27;</span></span><br><span class="line"><span class="comment"># index查找子串第一次出现的位置，如果查找子串不存在，抛出ValueError</span></span><br><span class="line"><span class="built_in">print</span>(s,index(<span class="string">&#x27;lo&#x27;</span>))			<span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 查找子串第一次出现的位置，如果查找子串不存在，则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(s,find(<span class="string">&#x27;lo&#x27;</span>))				<span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 查找子串最后一次出现的位置，如果查找子串不存在，抛出ValueError</span></span><br><span class="line"><span class="built_in">print</span>(s,rindex(<span class="string">&#x27;lo&#x27;</span>))			<span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 查找子串最后一次出现的位置，如果查找子串不存在，则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(s,rfind(<span class="string">&#x27;lo&#x27;</span>))			<span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(s,index(&#x27;k&#x27;))   	    # ValueError</span></span><br><span class="line"><span class="built_in">print</span>(s,find(<span class="string">&#x27;k&#x27;</span>))    			<span class="comment"># -1</span></span><br><span class="line"><span class="comment"># print(s,rindex(&#x27;k&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(s,rfind(<span class="string">&#x27;k&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th>-11</th>
<th>-10</th>
<th>-9</th>
<th>-8</th>
<th>-7</th>
<th>-6</th>
<th>-5</th>
<th>-4</th>
<th>-3</th>
<th>-2</th>
<th>-1</th>
</tr>
</thead>
<tbody>
<tr>
<td>h</td>
<td>e</td>
<td>l</td>
<td>l</td>
<td>o</td>
<td>,</td>
<td>h</td>
<td>e</td>
<td>l</td>
<td>l</td>
<td>o</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>10</td>
</tr>
</tbody>
</table>
<h3 id="（2）字符串的大小写转换操作">（2）字符串的大小写转换操作</h3>
<p><code>upper</code>		<code>lower</code>		<code>swapcase</code>		<code>caplitalize</code>		<code>title</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;字符串中的转换&#x27;&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;hello,python&#x27;</span></span><br><span class="line">a = s.upper()						<span class="comment"># 全部转换大写，产生一个新的字符串对象</span></span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(s,<span class="built_in">id</span>(s))</span><br><span class="line">b = s.lower()						<span class="comment"># 全部转换小写，产生一个新的字符串对象</span></span><br><span class="line"><span class="built_in">print</span>(b,<span class="built_in">id</span>(b)) </span><br><span class="line"><span class="built_in">print</span>(s,<span class="built_in">id</span>(s))</span><br><span class="line"><span class="built_in">print</span>(b == s)</span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> s)						<span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;hello,Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2,swapcase())				<span class="comment"># 字符串所有大写转换为小写，所有小写转换为大写</span></span><br><span class="line"><span class="built_in">print</span>(s2,capitalize())  			<span class="comment"># 把第一个字母转换为大写，其余字母转换为小写</span></span><br><span class="line"><span class="built_in">print</span>(s2,title())					<span class="comment"># 把每个单词的第一个字母转换为大写，把每个单词的剩余字母转换为小写</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（3）字符串内容对齐操作">（3）字符串内容对齐操作</h3>
<p><code>center</code>		<code>ljust</code>		<code>rjust</code>		<code>zfill</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,Python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 居中对齐，第一个参数指定宽度，第二个参数指定填充符，默认空格。若设置宽度小于实际宽度，返回原字符串</span></span><br><span class="line"><span class="built_in">print</span>(s,center(<span class="number">20</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左对齐，第一个参数指定宽度，第二个参数指定填充符</span></span><br><span class="line"><span class="built_in">print</span>(s.ljust(<span class="number">20</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s.ljust(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(s.ljust(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右对齐</span></span><br><span class="line"><span class="built_in">print</span>(s.rjust(<span class="number">20</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s.rjust(<span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(s.rjust(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右对齐，左边用0填充，该方法只接收一个参数，用于指定字符串宽度</span></span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(s.zfill(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-8910&#x27;</span>.zfill(<span class="number">8</span>))  <span class="comment"># 减号后开始添0</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（4）字符串的劈分操作">（4）字符串的劈分操作</h3>
<p><code>split</code>		<code>rsplit</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello world Python&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;split从字符串的左边开始劈分，默认的劈分字符是空格字符，返回的值都是一个列表&#x27;&#x27;&#x27;</span></span><br><span class="line">lst = s.split()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">s1 = <span class="string">&#x27;hello|world|Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.split(sep = <span class="string">&#x27;|&#x27;</span>))					<span class="comment"># 通过参数sep指定劈分符</span></span><br><span class="line"><span class="built_in">print</span>(s1.split(sep = <span class="string">&#x27;|&#x27;</span>,maxsplit = <span class="number">1</span>))		<span class="comment"># 通过maxsplit指定劈分字符串时最大劈分次数，经过最大次劈分后，剩余子串会单独作为一部分</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;rsplit从字符串的右边开始劈分，默认的劈分符是空格字符串，返回的值都是一个列表&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.rsplit())</span><br><span class="line"><span class="built_in">print</span>(s.resplit(sep = <span class="string">&#x27;|&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s.rsplit(sep = <span class="string">&#x27;|&#x27;</span>,maxsplit = <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="（5）判断字符串的操作">（5）判断字符串的操作</h3>
<p><code>isidentifier</code>		<code>isspace</code>		<code>isalpha</code>		<code>isdecimal</code>		<code>isnumeric</code>	<code>isalnum</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断指定的字符串是不是合法的标识符</span></span><br><span class="line">s = <span class="string">&#x27;hello,python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span>,s.isidentifier())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>.isidentifier())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.&#x27;</span>,<span class="string">&#x27;张三_&#x27;</span>.isidentifier())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;4.&#x27;</span>,<span class="string">&#x27;张三_123&#x27;</span>.isidentifier())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定的字符串是否全部由空白字符组成（回车、换行、水平制表符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.&#x27;</span>,<span class="string">&#x27;\t&#x27;</span>.isspace())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定的字符串是否全部由字母组成</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;6.&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>.isalpha())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;7.&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>.isalpha())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;8.&#x27;</span>,<span class="string">&#x27;张三1&#x27;</span>.isalpha())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定的字符串是否全部由十进制数字组成</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;9.&#x27;</span>,<span class="string">&#x27;123&#x27;</span>.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;10.&#x27;</span>,<span class="string">&#x27;123四&#x27;</span>.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;11.&#x27;</span>,<span class="string">&#x27;ⅠⅡⅢ&#x27;</span>.isdecimal())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定的字符串是否全部由数字组成</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12.&#x27;</span>,<span class="string">&#x27;123&#x27;</span>.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;13.&#x27;</span>,<span class="string">&#x27;123四&#x27;</span>.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;14.&#x27;</span>,<span class="string">&#x27;ⅠⅡⅢ&#x27;</span>.isnumeric())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定的字符串是否全部由字母和数字组成</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;15.&#x27;</span>,<span class="string">&#x27;abc1&#x27;</span>.isalnum())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;16.&#x27;</span>,<span class="string">&#x27;张三123&#x27;</span>.isalnum())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;17.&#x27;</span>,<span class="string">&#x27;abc!&#x27;</span>.isalnum())</span><br></pre></td></tr></table></figure></div>
<h3 id="（6）字符串操作的其他方法">（6）字符串操作的其他方法</h3>
<p><code>repalce</code>		<code>join</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace第一个参数指定被替换子串，第二个参数指定替换子串，第三个参数指定最大替换次数</span></span><br><span class="line">s = <span class="string">&#x27;hello,Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>))</span><br><span class="line">s1 = <span class="string">&#x27;hello,Python,Python,Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.replace(<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># join将列表或元组中的字符串合并为一个字符串</span></span><br><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>.join(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(lst))</span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(t))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>.join(<span class="string">&#x27;Python&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="3-字符串的比较">3. 字符串的比较</h2>
<p><code>&lt;</code> 		<code>&gt; =</code>		<code>&lt;</code>		<code>&lt; =</code>		<code>= =</code>		<code>! =</code></p>
<p>*比较规则：*首先比较两个字符串中的第一个字符，如果相等则继续比较下一个字符，依次比较下去，直到两个字符串中的字符不相等时，其比较结果就是两个字符串的比较结果，两个字符串中的所有后续字符将不再被比较。</p>
<p>*比较原理：*两个字符进行比较时，比较的是其ordinal value（原始值），调用内置函数ord就可以得到指定字符的ordinal value。与内置函数对应的是内置函数chr，调用内置函数chr时可以使指定的ordinal value得到其对应的字符。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;apple&#x27;</span> &gt; <span class="string">&#x27;apple&#x27;</span>)					<span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;apple&#x27;</span> &gt; <span class="string">&#x27;banana&#x27;</span>)   				<span class="comment"># 97&gt;98,Flase</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;杨&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>),<span class="built_in">chr</span>(<span class="number">98</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">26472</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;is与 == 的区别</span></span><br><span class="line"><span class="string">==比较的是value</span></span><br><span class="line"><span class="string">is 比较的是id&#x27;&#x27;&#x27;</span></span><br><span class="line">a = b = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a == b)</span><br><span class="line"><span class="built_in">print</span>(b == c)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(c))</span><br></pre></td></tr></table></figure></div>
<h2 id="4-字符串的切片操作">4. 字符串的切片操作</h2>
<ul>
<li>字符串是不可变类型，不具备增删改等操作，切片操作将产生新的对象。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,Python&#x27;</span></span><br><span class="line">s1 = s[:<span class="number">5</span>]						<span class="comment"># 没有指定起始位置，从0开始</span></span><br><span class="line">s2 = s[<span class="number">6</span>:]						<span class="comment"># 没有指定结束位置，直到最后一个为止</span></span><br><span class="line">s3 = <span class="string">&#x27;!&#x27;</span></span><br><span class="line">newstr = s1 + s3 + s2</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(newstr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(newstr))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------切片[start:end:step]------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">5</span>:<span class="number">1</span>])					<span class="comment"># 从1开始截到5，不包括5，步长为1</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])					<span class="comment"># 默认从0开始，直到最后一个元素，索引间隔为2</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])					<span class="comment"># 默认从最后一个元素开始，直到第一个元素结束，因为步长为-1</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>::<span class="number">1</span>])					<span class="comment"># 截取Python字符串</span></span><br></pre></td></tr></table></figure></div>
<h2 id="5-格式化字符串">5. 格式化字符串</h2>
<p>*为什么需要格式化字符串？*按照一定格式输出字符串。</p>
<p><em>两种方式：<code>%</code>作占位符；<code>&#123;&#125;</code>作占位符。</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;格式化字符串&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用 % 占位符</span></span><br><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫%s，今年%d岁&#x27;</span> % (name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 &#123;&#125; 占位符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0&#125;，今年&#123;1&#125;岁&#x27;</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># f-string（Python 3.x以上版本）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>，今年<span class="subst">&#123;age&#125;</span>岁&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宽度和精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d&#x27;</span> % <span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10d&#x27;</span> % <span class="number">99</span>)						<span class="comment"># 10代表宽度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.3f&#x27;</span> % <span class="number">3.1415926</span>)				<span class="comment">#.3保留三位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10.3f&#x27;</span> % <span class="number">3.1415926</span>)				<span class="comment"># 宽度为10，小数点后三位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))		<span class="comment"># .3表示一共是3位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))		<span class="comment"># .3f表示3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:10.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))		<span class="comment"># 同时设置宽度和精度，一共是10位数，3位小数</span></span><br></pre></td></tr></table></figure></div>
<h2 id="6-字符串的编码转换">6. 字符串的编码转换</h2>
<p><em>编码与解码的方式：</em></p>
<ul>
<li>编码：将字符串转换成二进制数据（bytes）</li>
<li>解码：将bytes类型的数据转换成字符串类型</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;天涯共此时&#x27;</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding = <span class="string">&#x27;GBK&#x27;</span>))		<span class="comment"># GBK编码格式中，一个中文占两个字节</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(encoding = <span class="string">&#x27;UTF-8&#x27;</span>))		<span class="comment"># UTF-8中，一个中文占三个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">byte = s.encode(encoding = <span class="string">&#x27;GBK&#x27;</span>)		<span class="comment"># 编码</span></span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding = <span class="string">&#x27;GBK&#x27;</span>))	<span class="comment"># 解码   byte代表的就是一个二进制数据（字节类型的数据）</span></span><br><span class="line"></span><br><span class="line">byte = s.encode(encoding = <span class="string">&#x27;UTF-8&#x27;</span>)		<span class="comment"># 编码</span></span><br><span class="line"><span class="built_in">print</span>(byte.decode(encoding = <span class="string">&#x27;UTF-8&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(11)--函数</title>
    <url>/posts/59bac53/</url>
    <content><![CDATA[<h2 id="1-函数的创建和调用">1. 函数的创建和调用</h2>
<p>*什么是函数？*函数就是执行特定任务和完成特定功能的一段代码。</p>
<p>*为什么需要函数？*复用代码；隐藏实现细节；提高可维护性；提高可读性便于调试。</p>
<p><em>函数的创建</em>	<code>def 	函数名（[输入参数]）：函数体	[return  xxx]</code></p>
<p><em>函数的调用</em>	<code>函数名([实际参数])</code></p>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">a,b</span>):</span>			<span class="comment"># a,b称为形式参数，简称形参，形参位置在函数的定义处</span></span><br><span class="line">	c = a + b		</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;位置实参传递&#x27;&#x27;&#x27;</span></span><br><span class="line">result = calc(<span class="number">10</span>,<span class="number">20</span>) 	<span class="comment"># 10，20实际参数，简称实参，位置在函数的调用处</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;关键字实参传递&#x27;&#x27;&#x27;</span></span><br><span class="line">res = calc(b = <span class="number">10</span>,a = <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-函数调用的参数传递">2. 函数调用的参数传递</h2>
<ul>
<li>位置实参：根据形参对应的位置进行实参传递</li>
<li>关键字实参：根据形参名称进行实参传递</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">arg1,arg2</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;arg1&#x27;</span>,arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;arg2&#x27;</span>,arg2)</span><br><span class="line">    arg1 = <span class="number">100</span></span><br><span class="line">    arg2.append(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;arg1&#x27;</span>,arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;arg2&#x27;</span>,arg2)</span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">n1 = <span class="number">11</span></span><br><span class="line">n2 = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1&#x27;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n2&#x27;</span>,n2)</span><br><span class="line">fun(n1,n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1&#x27;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n2&#x27;</span>,n2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在函数的调用过程中，进行参数的传递，</span></span><br><span class="line"><span class="string">如果是不可变对象，在函数体的修改不会影响实参的值，arg1修改为100，不会影响n1的值</span></span><br><span class="line"><span class="string">如果是可变对象，在函数体内的修改会影响实参的值，arg2的修改.append(10)，会影响到n2的值&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>*函数的返回值：*函数返回多个值时，结果为元组。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))				<span class="comment"># False 零的布尔值为False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))				<span class="comment"># True 非零整数布尔值为True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">num</span>):</span></span><br><span class="line">    odd = []				<span class="comment"># 存奇数</span></span><br><span class="line">    even = []				<span class="comment"># 存偶数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span>:</span><br><span class="line">            odd.append(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            even.append(i)</span><br><span class="line">    <span class="keyword">return</span> odd,even</span><br><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line">lst = [<span class="number">10</span>,<span class="number">29</span>,<span class="number">34</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">53</span>,<span class="number">55</span>]</span><br><span class="line"><span class="built_in">print</span>(fun(lst))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;函数的返回值</span></span><br><span class="line"><span class="string">1.如果函数没有返回值（函数执行完毕后，不需要给调用处提供数据） return可以不写</span></span><br><span class="line"><span class="string">2.函数的返回值，如果是1个，直接返回类型</span></span><br><span class="line"><span class="string">3.函数的返回值，如果是多个，返回结果为元组&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment"># return    </span></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">res = fun2()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fun3())</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;函数在定义时，是否需要返回值，视情况而定&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-函数的参数定义">3. 函数的参数定义</h2>
<h3 id="（1）函数定义默认值参数">（1）函数定义默认值参数</h3>
<p>函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b = <span class="number">10</span></span>):</span>    			<span class="comment"># b默认值参数</span></span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line">fun(<span class="number">100</span>)</span><br><span class="line">fun(<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def print(self, *args, sep=&#x27;&#x27;, end=&#x27;\n&#x27;,file=None):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,end = <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）个数可变的位置参数">（2）个数可变的位置参数</h3>
<p>定义函数时，可能无法事先确定传递的位置实参的个数时，使用可变的位置参数；使用*定义个数可变的位置形参；结果为一个元组。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">*args</span>):</span>					<span class="comment"># 函数定义时 可变的位置参数</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(args[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">fun(<span class="number">10</span>)</span><br><span class="line">fun(<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line">fun(<span class="number">30</span>,<span class="number">405</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）个数可变的关键字形参">（3）个数可变的关键字形参</h3>
<p>定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参；使用*定义个数可变的关键字形参；结果为一个字典。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    </span><br><span class="line">fun1(a = <span class="number">10</span>)</span><br><span class="line">fun1(a = <span class="number">20</span>,b=<span class="number">30</span>,c=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def fun2(*args,*a):</span></span><br><span class="line"><span class="string">	pass</span></span><br><span class="line"><span class="string">	代码运行，程序报错，个数可变的位置参数，只能是一个</span></span><br><span class="line"><span class="string">	def fun3(*args,*args):</span></span><br><span class="line"><span class="string">		pass</span></span><br><span class="line"><span class="string">	代码运行，程序报错，个数可变的关键字参数，只能是一个&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">*args1,*args2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def fun3(*args1,*args2):</span></span><br><span class="line"><span class="string">	pass</span></span><br><span class="line"><span class="string">	在一个函数的定义过程中，既有个数可变的位置形参，也有个数可变的关键字形参，要求，个数可变的位置形参放在个数可变的关键字形参之前&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（4）函数的参数总结">（4）函数的参数总结</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a = &#x27;</span>,a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b = &#x27;</span>,b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line">fun(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)					<span class="comment"># 函数调用时的参数传递，称为位置传参</span></span><br><span class="line">lst = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">fun(*lst)						<span class="comment"># 在函数调用时，将列表中的每个元素都转换成位置实参传入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line">fun(a=<span class="number">100</span>,c=<span class="number">300</span>,b=<span class="number">200</span>)			<span class="comment"># 函数的调用，关键字实参</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">222</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">333</span>&#125;</span><br><span class="line">fun(*dic)						<span class="comment"># 函数调用时，将字典中的键值对都转换成关键字实参传入</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b=<span class="number">10</span></span>):</span>				<span class="comment"># b是在函数的定义处，所以是形参，而且进行了赋值，所以是默认值形参</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a=&#x27;</span>,a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">*args</span>):</span>				<span class="comment"># 个数可变的位置形参</span></span><br><span class="line">	<span class="built_in">print</span>(args)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>(<span class="params">*args2</span>):</span>				<span class="comment"># 个数可变的关键字形参</span></span><br><span class="line">    <span class="built_in">print</span>(args2)</span><br><span class="line">   </span><br><span class="line">fun2(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">fun3(a=<span class="number">11</span>,b=<span class="number">22</span>,c=<span class="number">33</span>,d=<span class="number">44</span>,e=<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span>(<span class="params">a,b,c,d</span>):</span>	</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a=&#x27;</span>,a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;d=&#x27;</span>,d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用fun4函数</span></span><br><span class="line">fun4(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)				<span class="comment"># 位置实参传递</span></span><br><span class="line">fun4(a=<span class="number">10</span>,b=<span class="number">20</span>,c=<span class="number">30</span>,d=<span class="number">40</span>)		<span class="comment"># 关键字实参传递</span></span><br><span class="line">fun4(<span class="number">10</span>,<span class="number">20</span>,c=<span class="number">30</span>,d=<span class="number">40</span>)			<span class="comment"># 前两个参数，采用位置实参传递，后两个参数采用关键字实参传递</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;需求：c，d只能采用关键字实参传递&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def fun4(a,b,*,c,d):	从*之后的参数，在函数调用时，只能采用关键字参数传递	</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;函数定义时的形参的顺序问题&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span>(<span class="params">a,b,*,c,d,*args</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span>(<span class="params">*args,*args2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun7</span>(<span class="params">a,b=<span class="number">10</span>,*args,*args2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-变量的作用域">4. 变量的作用域</h2>
<p><em>变量的作用域：<em>程序代码能访问该变量的区域。根据变量的有效范围可以分为</em>局部变量、全局变量。</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    c = a+b						<span class="comment"># c是局部变量，因为是在函数体内进行定义的；a，b为函数的形参，作用范围也是函数内部，相当于局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># print(c)	，因为a，c超出了起作用的范围（超出了作用域）</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line">name =<span class="string">&#x27;杨老师&#x27;</span>					  <span class="comment"># name作用范围为函数的内部和外部都可以使用，全局变量</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">fun2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">    <span class="keyword">global</span> age					<span class="comment"># 函数内部定义的变量，局部变量；局部变量使用global声明之后，这个变量实际上就变成了全局变量</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">fun3()</span><br><span class="line"><span class="built_in">print</span>(age)</span><br></pre></td></tr></table></figure></div>
<h2 id="5-递归函数">5. 递归函数</h2>
<p><em>什么是递归函数？</em></p>
<p>如果在一个函数的函数体内调用了该函数本身，这个函数就称为递归函数.</p>
<p><em>递归函数的组成部分：</em></p>
<p>递归调用条件与递归终止条件.</p>
<p><em>递归的调用过程：</em></p>
<p>每递归调用一次函数，都会在栈内存分配一个栈帧；每执行完一次函数，都会释放相应的空间.</p>
<p><em>递归的优缺点：</em></p>
<p>优点是思路和代码简单；缺点是占用内存多，效率低下.</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;使用递归计算阶乘&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = n*fac(n-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fac(<span class="number">6</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="6-斐波那契数列">6. 斐波那契数列</h2>
<p>$$<br>
F_{n}=F_{n - 1}+F_{n-2}<br>
$$</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 斐波那契数列第六位</span></span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 斐波那契数列前六位(循环操作用列表)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(fib(i))</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(12)--异常、调试</title>
    <url>/posts/c610aefc/</url>
    <content><![CDATA[<h2 id="1-Bug的由来及分类">1. Bug的由来及分类</h2>
<p>*Bug的由来：*世界上第一部万用计算机的进化版-马克2号（Mark Ⅱ）</p>
<p>*Debug：*排除程序bug</p>
<p><em>Bug的常见类型：</em></p>
<span id="more"></span>
<ul>
<li>
<p>粗心导致的语法错误 <code>SyntaxError</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的年龄：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span> :  <span class="comment">#if int(age) &gt;= 18:</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;成年人...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:									<span class="comment"># i没有初始值，括号为中文状态的，缺少i += 1使程序进入循环状态	</span></span><br><span class="line">    <span class="built_in">print</span>（i）</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    uname = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> uname = <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> pwd = <span class="string">&#x27;admin&#x27;</span>: 		<span class="comment"># 一个 = 是赋值，两个 = 是比较</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入有误&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;对不起，三次均输入错误&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>漏了末尾的冒号，如if语句，循环语句，else子句等</li>
<li>缩进错误</li>
<li>把英文符号写成中文符号，比如：冒号，引号，括号</li>
<li>字符串拼接时候，把字符串和数字拼在一起</li>
<li>没有定义变量，比如说while的循环条件的变量</li>
<li>== 比较运算符和 = 赋值运算符的混用</li>
</ul>
</li>
<li>
<p>知识点不熟练导致的错误</p>
<ul>
<li>索引越界问题 	<code>IndexError</code></li>
<li><code>append( )</code>方法的使用掌握不熟练</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">4</span>]) 					<span class="comment"># IndexError lst索引从0开始</span></span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line">lst = append(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)						<span class="comment"># lst.append 且每次只能添加一个</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>思路不清导致的问题</p>
<ul>
<li>使用<code>print()</code>函数</li>
<li>使用“#”暂时注释部分代码</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;豆瓣电影Top250排行,使用列表存储电影信息,要求输入名字在屏幕上娴熟xxx出演了哪部电影&#x27;&#x27;&#x27;</span></span><br><span class="line">lst = [&#123;<span class="string">&#x27;rating&#x27;</span>:[<span class="number">9.7</span>,<span class="number">2062397</span>],<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;1292052&#x27;</span>,<span class="string">&#x27;type&#x27;</span>:[<span class="string">&#x27;犯罪&#x27;</span>,<span class="string">&#x27;剧情&#x27;</span>],<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;肖申克的救赎&#x27;</span>,<span class="string">&#x27;actors&#x27;</span>:[<span class="string">&#x27;蒂姆·罗宾斯&#x27;</span>,<span class="string">&#x27;摩根·弗里曼&#x27;</span>]&#125;</span><br><span class="line">      &#123;<span class="string">&#x27;rating&#x27;</span>:[<span class="number">9.6</span>,<span class="number">1528760</span>],<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;1291546&#x27;</span>,<span class="string">&#x27;type&#x27;</span>:[<span class="string">&#x27;爱情&#x27;</span>,<span class="string">&#x27;剧情&#x27;</span>,<span class="string">&#x27;同性&#x27;</span>],<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;霸王别姬&#x27;</span>,<span class="string">&#x27;actors&#x27;</span>:[<span class="string">&#x27;张国荣&#x27;</span>,<span class="string">&#x27;张丰毅&#x27;</span>,<span class="string">&#x27;巩俐&#x27;</span>,<span class="string">&#x27;葛优&#x27;</span>]&#125;</span><br><span class="line">      &#123;<span class="string">&#x27;rating&#x27;</span>:[<span class="number">9.5</span>,<span class="number">1559181</span>],<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;1292720&#x27;</span>,<span class="string">&#x27;type&#x27;</span>:[<span class="string">&#x27;剧情&#x27;</span>,<span class="string">&#x27;爱情&#x27;</span>],<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;阿甘正传&#x27;</span>,<span class="string">&#x27;actors&#x27;</span>:[<span class="string">&#x27;汤姆·汉克斯&#x27;</span>,<span class="string">&#x27;罗宾·怀特&#x27;</span>]&#125;</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要查询的演员:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:					<span class="comment"># 遍历列表,得到一个&#123;&#125;,item是一个又一个的字典</span></span><br><span class="line">    act_lst = item[<span class="string">&#x27;actors&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> actor <span class="keyword">in</span> act_lst:</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> actor:</span><br><span class="line">            <span class="built_in">print</span>(name,<span class="string">&#x27;出演了：&#x27;</span>,item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">            </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;for movie in item:		#遍历字典,得到movie	是一个字典中的key</span></span><br><span class="line"><span class="string">        actors = movie[&#x27;actors&#x27;]       </span></span><br><span class="line"><span class="string">        if name in actors:</span></span><br><span class="line"><span class="string">            print(name + &#x27;出演了:&#x27; + movie)&#x27;&#x27;&#x27;</span></span><br><span class="line">            </span><br></pre></td></tr></table></figure></div>
<p>第一层for循环遍历列表可以得到每一部电影，而每一部电影又是一个字典，只需要根据key在字典中取值即可。根据演员的键actors取出学员的列表，使用判断name在列表中是否存在，最后根据电影名称的键title取出电影的名称，进行输出。</p>
</li>
<li>
<p>被动掉坑：程序代码逻辑没有错，只是因为用户错误操作或者一些“例外情况”而导致的程序崩溃。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;输入两个整数并进行除法运算&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>)</span><br><span class="line">a = <span class="built_in">int</span>(a)</span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>)</span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">result = a/b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>,result)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="2-异常处理机制">2. 异常处理机制</h2>
<h3 id="（1）try-except结构、try-except-except结构">（1）<code>try...except</code>结构、<code>try...except...except</code>结构</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    n1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>))</span><br><span class="line">    n2 = <span class="built_in">int</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>)</span><br><span class="line">    result = n1/n2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结果为：&#x27;</span>,result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;对不起，除数不允许为0&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;只能输入数字串&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:				<span class="comment"># except从子类到父类，最后可以增加BaseException</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;程序结束&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
<h3 id="（2）try-except-else结构">（2）<code>try...except...else</code>结构</h3>
<p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except块。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>))</span><br><span class="line">	b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>))</span><br><span class="line">	result = a / b</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了&#x27;</span>,e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计算结果为：&#x27;</span>,result)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）try-except-else-finally结构">（3）<code>try...except...else...finally</code>结构</h3>
<p>finally块无论是否发生异常都会被执行，能常用来释放try块中申请的资源。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>))</span><br><span class="line">	b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>))</span><br><span class="line">	result = a / b</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了&#x27;</span>,e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计算结果为：&#x27;</span>,result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;谢谢您的使用&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）traceback模块">（4）traceback模块</h3>
<p>使用traceback模块打印异常处理信息，存储log日志。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(10/0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure></div>
<h2 id="3-Python常见的异常类型">3. Python常见的异常类型</h2>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">异常类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">ZeroDivisionError</td>
<td style="text-align:center">除（或取模）零（所有数据类型）</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">IndexError</td>
<td style="text-align:center">序列中没有此索引（index）</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">KeyError</td>
<td style="text-align:center">映射中没有这个键</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">NameError</td>
<td style="text-align:center">未声明/初始化对象（没有属性）</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">SyntaxError</td>
<td style="text-align:center">Python语法错误</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">ValueError</td>
<td style="text-align:center">传入无效的参数</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;ZeroDivisionError&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;IndexError&#x27;&#x27;&#x27;</span></span><br><span class="line">lst = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">4</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;KeyError&#x27;&#x27;&#x27;</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&#x27;gender&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;NameError&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;SyntaxError&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;ValueError&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-PyCharm的调试模式">4. PyCharm的调试模式</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:				<span class="comment"># 设置断点进行调试</span></span><br><span class="line">    <span class="built_in">print</span>(i)	</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(13)--类、对象</title>
    <url>/posts/1b7d9dd8/</url>
    <content><![CDATA[<h2 id="1-两大编程思想">1. 两大编程思想</h2>
<table >
    <tr>
        <td style="text-align:center"> </td>
        <td style="text-align:center">面向过程</td>
        <td style="text-align:center">面向对象</td>
    </tr>
    <tr>
        <td> 区别 </td>
        <td>事物比较简单，可以用线性的思维去解决</td>
        <td>事物比较复杂，使用简单的线性思维无法解决</td>
    </tr>
    <tr>  
        <td>共同点</td>       
        <th colspan="2">面向过程和面向对象都是解决实际问题的一种思维方式
        </th>     
    </tr> 
     <tr>  
        <td></td>       
        <th class="AutoNewline" colspan="2">二者相辅相成，并不是对立的；
            解决复杂问题，通过面向对象方式便于我们从宏观上把握事物之间复杂的关系、方便我们分析整个系统；
            具体到微观操作，仍然使用面向过程方式来处理。
        </th>     
    </tr>  
</table>
<span id="more"></span>
<h2 id="2-类和对象的创建">2. 类和对象的创建</h2>
<p><em>类</em>是多个类似事物组成的群体的统称。能够帮助我们快速理解和判断事物的性质。</p>
<p>*对象：*不同数据类型属于不同的类，像100、99、520都是int类之下包含的相似的不同个例，这些个例专业术语称为实例或者对象。</p>
<h3 id="（1）类的创建">（1）类的创建</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;Student类名由一个或多个单词组成，每个单词的首字母大写，其余小写&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Python中一切皆对象，Student是对象吗？内存由开空间吗？</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Student))</span><br><span class="line"><span class="built_in">print</span>(Student)</span><br></pre></td></tr></table></figure></div>
<p><em>类的组成：</em></p>
<ul>
<li>类属性</li>
<li>实例方法</li>
<li>静态方法</li>
<li>类方法</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    native_pace = <span class="string">&#x27;吉林&#x27;</span>					<span class="comment"># 直接写在类里的变量，称为类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name				 <span class="comment"># self,name称为实体属性，进行了一个赋值的操作，将局部变量name的值赋给实体属性</span></span><br><span class="line">        self.age = age</span><br><span class="line">   </span><br><span class="line">	<span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生在吃饭...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我使用了staticmethod进行修饰，所以我是静态方法&#x27;</span>)</span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是类方法，因为我使用了classmethod进行修饰&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在类之外定义的称为函数，在类之内定义的称为方法</span></span><br><span class="line"><span class="string">def drink();		#函数</span></span><br><span class="line"><span class="string">	print(&#x27;喝水&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）对象的创建">（2）对象的创建</h3>
<blockquote>
<p>对象的创建又称为类的实例化：实例名 = 类名（）</p>
</blockquote>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    native_pace = <span class="string">&#x27;吉林&#x27;</span>					  <span class="comment"># 直接写在类里的变量，称为类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name					<span class="comment"># self,name称为实体属性，进行了一个赋值的操作，将局部变量name的值赋给实体属性</span></span><br><span class="line">        self.age = age</span><br><span class="line">   </span><br><span class="line">	<span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生在吃饭...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我使用了staticmethod进行修饰，所以我是静态方法&#x27;</span>)</span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是类方法，因为我使用了classmethod进行修饰&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在类之外定义的称为函数，在类之内定义的称为方法</span></span><br><span class="line"><span class="string">def drink();		#函数</span></span><br><span class="line"><span class="string">	print(&#x27;喝水&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Student类的对象</span></span><br><span class="line">stu1 = Student(<span class="string">&#x27;张三&#x27;</span>，<span class="number">20</span>)</span><br><span class="line">stu1.eat()									<span class="comment"># 对象名.方法名()</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name)</span><br><span class="line"><span class="built_in">print</span>(stu1.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(stu1))</span><br><span class="line"><span class="built_in">print</span>(stu1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Student))</span><br><span class="line"><span class="built_in">print</span>(Student)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line">Student.eat(stu1)							<span class="comment"># 类名.方法名(类的对象)		与stu1.eat()一样，都是调用Student中的eat方法</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-类属性、类方法、静态方法">3. 类属性、类方法、静态方法</h2>
<ul>
<li>*类属性：*类中方法外的变量称为类属性，被该类的所有对象所共享。</li>
<li>*类方法：*使用@classmethod修饰的方法，使用类名直接访问的方法。</li>
<li>*静态方法：*使用@staticmethod修饰的方法，使用类名直接访问的方法。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    native_pace = <span class="string">&#x27;吉林&#x27;</span>					   <span class="comment"># 直接写在类里的变量，称为类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span>		    <span class="comment"># 初始化方法</span></span><br><span class="line">        self.name = name					<span class="comment"># self,name称为实体属性，进行了一个赋值的操作，将局部变量name的值赋给实体属性</span></span><br><span class="line">        self.age = age</span><br><span class="line">   </span><br><span class="line">	<span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生在吃饭...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我使用了staticmethod进行修饰，所以我是静态方法&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是类方法，因为我使用了classmethod进行修饰&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------类属性的使用方法---------------&#x27;</span>)      </span><br><span class="line"><span class="built_in">print</span>(Student.native_pace)</span><br><span class="line">stu1 = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;李四&#x27;</span>,<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1.native_pace)</span><br><span class="line"><span class="built_in">print</span>(stu2.native_pace)</span><br><span class="line">Student.native_pace = <span class="string">&#x27;天津&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1.native_pace)</span><br><span class="line"><span class="built_in">print</span>(stu2.native_pace)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------类方法的使用方式--------------&#x27;</span>)</span><br><span class="line">Student.cm()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------静态方法的使用方式----------------&#x27;</span>)</span><br><span class="line">Student.method()</span><br></pre></td></tr></table></figure></div>
<h2 id="4-动态绑定属性和方法">4. 动态绑定属性和方法</h2>
<blockquote>
<p>Python是动态语言，在创建对象后，可以动态地绑定属性和方法。</p>
</blockquote>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">stu1 = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;李四&#x27;</span>,<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------只给李四添加一个性别---------------&#x27;</span>)</span><br><span class="line">stu2.gender = <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name,stu1.age)					<span class="comment"># 如果添加stu1.gender会抛出AttributeError</span></span><br><span class="line"><span class="built_in">print</span>(stu2.name,stu2.age,stu2.gender)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">stu1.eat()</span><br><span class="line">stu2.eat()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;定义在类之外地，称为函数&#x27;</span>)</span><br><span class="line">stu1.show = show</span><br><span class="line">stu1.show</span><br><span class="line"><span class="comment"># stu2.show		因为stu2并没有绑定show方法</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(14)--对象方法</title>
    <url>/posts/c5fc2304/</url>
    <content><![CDATA[<p><em>面向对象的三大特征：</em></p>
<ul>
<li>封装：提高程序的安全性。（1）将数据（属性）和行为（方法）包装到类对象中，在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂度；（2）在Python中没有专门的修饰符用于属性的私有，如果该属性不希望在类对象外部被访问，前边使用两个“*”；</li>
<li>继承：提高代码的复用性；</li>
<li>多态：提高程序的可扩展性和可维护性。</li>
</ul>
<span id="more"></span>
<h2 id="1-封装">1. 封装</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,brand</span>):</span></span><br><span class="line">        self.brand = brand</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汽车已启动...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">car = Car(<span class="string">&#x27;宝马X5&#x27;</span>)</span><br><span class="line">car.start()</span><br><span class="line"><span class="built_in">print</span>(car,brand)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name	</span><br><span class="line">        self.*age = age 			<span class="comment"># 年龄age不希望在类的外部被使用，所以加了两个“_”</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name,self.*age)</span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">stu.show()</span><br><span class="line"><span class="comment"># 在类的外部使用name与age</span></span><br><span class="line"><span class="built_in">print</span>(stu.name)</span><br><span class="line"><span class="comment"># print(stu.*age)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(stu))</span><br><span class="line"><span class="built_in">print</span>(stu._Student*age)			<span class="comment"># 在类的外部可以通过	_Student*age	进行访问</span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-继承">2. 继承</h2>
<p>*继承的特点：*如果一个类没有继承任何类，则默认继承object；Python支持多继承；定义子类时，必须在其构造函数中调用父类的构造函数。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类类名(<span class="params">父类<span class="number">1</span>，父类<span class="number">2.</span>..</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span>				<span class="comment"># Person继承object类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,anme,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name,self.age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age,stu_no</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(name,age)</span><br><span class="line">        self.stu_no = stu_no</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age,teachofyear</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(name,age)</span><br><span class="line">        self.teachofyear = teachofyear</span><br><span class="line">       </span><br><span class="line">stu = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;1001&#x27;</span>)</span><br><span class="line">teacher = Teacher(<span class="string">&#x27;李四&#x27;</span>，<span class="number">34</span>，<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">stu.info()</span><br><span class="line">teacher.info()</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span>						<span class="comment"># Python支持多继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-方法重写">3. 方法重写</h2>
<ul>
<li>如果子类对继承自父类的某个属性或方法不满意，可以在子类中对其（方法体）进行重新编写。</li>
<li>子类重写后的方法中可以通过<code>super().xxx()</code>调用父类中被重写的方法。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span>				<span class="comment">#Person继承object类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,anme,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name,self.age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age,stu_no</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(name,age)</span><br><span class="line">        self.stu_no = stu_no</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().info()</span><br><span class="line">        <span class="built_in">print</span>(self.stu_no)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age,teachofyear</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(name,age)</span><br><span class="line">        self.teachofyear = teachofyear</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().info()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;教龄&#x27;</span>,self.teachofyear)</span><br><span class="line">       </span><br><span class="line">stu = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;1001&#x27;</span>)</span><br><span class="line">teacher = Teacher(<span class="string">&#x27;李四&#x27;</span>，<span class="number">34</span>，<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">stu.info()</span><br><span class="line">teacher.info()</span><br></pre></td></tr></table></figure></div>
<h2 id="4-object类">4. object类</h2>
<ul>
<li>object类是所有类的父类，因此所有类都有object类的属性和方法。</li>
<li>内置函数dir()可以查看指定对象所有属性。</li>
<li>Object有一个_str_()方法，用于返回一个对于“对象的描述”，对应于内置函数str()经常用于print()方法，帮助我们查看对象的信息，所以我们经常会对_str_()进行重写。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">   <span class="function"><span class="keyword">def</span> *<span class="title">str</span>*(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我的名字是&#123;0&#125;，今年&#123;1&#125;岁。&#x27;</span>.<span class="built_in">format</span>(self.name,self,age)</span><br><span class="line">stu = Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(stu))</span><br><span class="line"><span class="built_in">print</span>(stu)						<span class="comment"># 默认调用*str*()方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(stu))</span><br></pre></td></tr></table></figure></div>
<h2 id="5-多态">5. 多态</h2>
<p>简单地说，多态就是“具有多种形态”，它指的是：即便不知道一个变量所引用地对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所用对象的类型，动态决定调用哪个对象中的方法。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;动物会吃&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗吃骨头...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猫吃鱼...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人吃五谷杂粮&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">obj</span>):</span></span><br><span class="line">    obj.eat()</span><br><span class="line"><span class="comment"># 开始调用函数</span></span><br><span class="line">fun(Cat())</span><br><span class="line">fun(Dog())</span><br><span class="line">fun(Animal())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------------&#x27;</span>)</span><br><span class="line">fun(Person())</span><br></pre></td></tr></table></figure></div>
<p><em>静态语言和动态语言关于多态的区别：</em></p>
<ul>
<li>静态语言实现多态的三个必要条件：继承，方法重写，父类引用指向子类对象，例如Java。</li>
<li>动态语言的多态崇尚“鸭子类型”。当看到一只鸟走起来像鸭子、游泳起来像鸭子，那么这只鸟就可以被称为鸭子。在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的行为。</li>
</ul>
<h2 id="6-特殊方法和特殊属性">6. 特殊方法和特殊属性</h2>
<table>
    <tr>
        <td > &nbsp </td>
        <td style="text-align:center">  名称  </td>
        <td style="text-align:center">  描述  </td>
    </tr>
    <tr>
        <td style="text-align:center"> 特殊属性 </td>
        <td style="text-align:center">*dict()*</td>
        <td >获得类对象或者实例对象所绑定的所有属性和方法的字典</td>
    </tr>
    <tr>       
        <th style="text-align:center" rowspan="4"> 特殊方法 </th>
        <td style="text-align:center">*len*()</td>
        <td >通过重写*len*()方法，让内置函数len()的参数可以是自定义类型</td>
    </tr> 
     <tr>  
        <td style="text-align:center">*add*()</td> 
        <td >通过重写*add*()方法，可以使用自定义对象具有“+”功能</td>
    </tr>  
    <tr>  
        <td style="text-align:center">*new*()</td> 
        <td >用于创建对象</td>
    </tr> 
    <tr>  
        <td style="text-align:center">*init*()</td> 
        <td >对创建的对象进行初始化</td>
    </tr> 
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;特殊属性&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="built_in">object</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 创建C类的对象</span></span><br><span class="line">x = C(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">20</span>)			<span class="comment"># x是C类型的一个实例对象</span></span><br><span class="line"><span class="built_in">print</span>(x.*<span class="built_in">dict</span>*)			<span class="comment"># 实例对象的属性字典</span></span><br><span class="line"><span class="built_in">print</span>(C.*<span class="built_in">dict</span>*)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x.*<span class="class"><span class="keyword">class</span>*)			# 输出对象所属的类</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">C.*bases*</span>)			# 输出<span class="title">C</span>类的父类类型的元素</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">C.*base*</span>)			# 输出类的基类</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">C.*mro*</span>)			# 类的层次结构</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">A.*subclasses*(<span class="params"></span>)</span>)	# 输出<span class="title">A</span>的子类</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;特殊方法&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">c = a+b						<span class="comment"># 两个int类型的对象相加操作</span></span><br><span class="line">d = a.*add*(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">add</span>*(<span class="params">self,other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name + other.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">len</span>*(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.name)</span><br><span class="line">stu1 = Student(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = stu1 + stu2				<span class="comment"># 实现了两个对象的加法运算（因为在Student类中，编写了*add*(）特殊的方法</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s = stu1.*add*(stu2)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">lst = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(lst.*<span class="built_in">len</span>*())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(stu1))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;*new*()和*init*()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">new</span>*(<span class="params">cls,*args,*kwargs</span>):</span>			<span class="comment"># 9360</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*new*()被调用执行了，cls的id值为&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(cls)))</span><br><span class="line">        obj = <span class="built_in">super</span>().*new*(cls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;创建的对象的id值为&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(obj)))				<span class="comment">#7104</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">	<span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*init*被调用了，self的id值为：&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(self)))			<span class="comment">#7104</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;object这个类对象的id为：&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(<span class="built_in">object</span>)))		<span class="comment">#3232</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Person这个类对象的id为：&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(Person)))		<span class="comment">#9360</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Person类的实例对象</span></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p1这个Person类的实例对象的id为：&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(p1)))		<span class="comment">#7104</span></span><br></pre></td></tr></table></figure></div>
<h2 id="7-类的浅拷贝与深拷贝">7. 类的浅拷贝与深拷贝</h2>
<p>*变量的赋值操作：*只是形成两个变量，实际上还是指向同一个对象。</p>
<p>*浅拷贝：*Python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝。因此，源对象与拷贝对象会引用同一个子对象。</p>
<p>*深拷贝：*使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disk</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,cpu,disk</span>):</span></span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.disk = disk</span><br><span class="line">        </span><br><span class="line"><span class="comment"># (1)变量的赋值</span></span><br><span class="line">cpu1 = CPU()</span><br><span class="line">cpu2 = cpu1</span><br><span class="line"><span class="built_in">print</span>(cpu1,<span class="built_in">id</span>(cpu1))</span><br><span class="line"><span class="built_in">print</span>(cpu2,<span class="built_in">id</span>(cpu2))</span><br><span class="line"><span class="comment"># (2)类的浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------&#x27;</span>)</span><br><span class="line">disk = Disk()					<span class="comment"># 创建一个硬盘类的对象</span></span><br><span class="line">computer = Computer(cpu1,disk)	<span class="comment"># 创建一个计算机类的对象</span></span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">computer2 = copy.copy(computer)</span><br><span class="line"><span class="built_in">print</span>(disk)</span><br><span class="line"><span class="built_in">print</span>(computer,computer.cpu,computer.disk)</span><br><span class="line"><span class="built_in">print</span>(computer2,computer2.cpu,computer2.disk)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line">computer3 = copy.deepcopy(computer)</span><br><span class="line"><span class="built_in">print</span>(computer,computer.cpu,computer.disk)</span><br><span class="line"><span class="built_in">print</span>(computer3,computer3.cpu,computer3.disk)</span><br></pre></td></tr></table></figure></div>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/c8cdab97bbe478d97bb8e13c1fb7f298-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-3dd12c.png" alt="面向对象"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(15)--模块、包</title>
    <url>/posts/58b01302/</url>
    <content><![CDATA[<h2 id="1-什么叫模块？">1. 什么叫模块？</h2>
<p><em>模块（modules）：</em></p>
<ul>
<li>一个模块中可以包含N多个函数</li>
<li>在Python中一个扩展名为 .py 的文件就是一个模块</li>
<li>使用模块的好处
<ul>
<li>方便其他程序和脚本的导入并使用</li>
<li>避免函数名和变量名的冲突</li>
<li>提高代码的可维护性</li>
<li>提高代码的可重用性</li>
</ul>
</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    native_place = <span class="string">&#x27;吉林&#x27;</span>		 <span class="comment"># 类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sm</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span> </span><br><span class="line">b = <span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-自定义模块">2. 自定义模块</h2>
<p>导入模块</p>
<p><code>import  模块名称  [as 别名]</code></p>
<p><code>from  模块名称  import  函数/变量/类</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(math))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(math))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(math))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="built_in">print</span>(pi)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a/b</span><br><span class="line"><span class="comment"># 如何导入自定义模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;pycharm右键MarkDirectory as SourcesRoot&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-以主程序的形式执行">3. 以主程序的形式执行</h2>
<p>在每个模块的定义中都包括一个记录模块名称的变量_name_，程序可以检查该变量，以确定他们在哪个模块执行，如果一个模块不是被导入到其他程序中执行，那么它可能在解释器的顶端模块中执行。顶端模块的_name_变量的值为_main_</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(add(<span class="number">10</span>,<span class="number">20</span>))		<span class="comment"># 只有当点击运行calc2模块时才会执行运算</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calc2</span><br><span class="line"><span class="built_in">print</span>(calc2.add(<span class="number">100</span>,<span class="number">200</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="4-Python中的包">4. Python中的包</h2>
<p><em>包</em>是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下。</p>
<p>*作用：*代码规范；避免模块名称冲突</p>
<p>*包与目录的区别：*包含__int__.py文件的目录叫作包；目录里通常不包含__int__.py文件</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单击右键，创建-Python Package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> package</span><br><span class="line"><span class="keyword">import</span> calc</span><br><span class="line"><span class="comment"># 使用import导入时只能跟包名和模块名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> package <span class="keyword">import</span> modelA</span><br><span class="line"><span class="keyword">from</span> package.modelA <span class="keyword">import</span> a</span><br><span class="line"><span class="comment"># 使用from...import可以导入包，模块，函数变量等</span></span><br></pre></td></tr></table></figure></div>
<h2 id="5-Python中常见的内置模块">5. Python中常见的内置模块</h2>
<table>
<thead>
<tr>
<th style="text-align:center">模块名</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sys</td>
<td style="text-align:center">与Python解释器及其环境操作相关的标准库</td>
</tr>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:center">提供与时间相关的各种函数的标准库</td>
</tr>
<tr>
<td style="text-align:center">os</td>
<td style="text-align:center">提供了访问操作系统服务功能的标准库</td>
</tr>
<tr>
<td style="text-align:center">calendar</td>
<td style="text-align:center">提供与日期相关的各种函数的标准库</td>
</tr>
<tr>
<td style="text-align:center">urllib</td>
<td style="text-align:center">用于读取来自网上（服务器）的数据标准库</td>
</tr>
<tr>
<td style="text-align:center">json</td>
<td style="text-align:center">用于使用JSON序列化和反序列化对象</td>
</tr>
<tr>
<td style="text-align:center">re</td>
<td style="text-align:center">用于在字符串中执行正则表达式匹配和替换</td>
</tr>
<tr>
<td style="text-align:center">math</td>
<td style="text-align:center">提供标准算术运算函数的标准库</td>
</tr>
<tr>
<td style="text-align:center">decimal</td>
<td style="text-align:center">用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算</td>
</tr>
<tr>
<td style="text-align:center">logging</td>
<td style="text-align:center">提供了灵活的记录事件、错误、警告和调试信息等日志信息的功能</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(<span class="number">24</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(<span class="number">45</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="built_in">print</span>(time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(urllib.request.urlopen(<span class="string">&#x27;http://www.baidu.com&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.pi)</span><br></pre></td></tr></table></figure></div>
<h2 id="6-第三方模块的安装及使用">6. 第三方模块的安装及使用</h2>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DOS</span><br><span class="line">pip install schedule</span><br><span class="line">python</span><br><span class="line">import schedule</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;哈哈-----&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(16)--文件、编码</title>
    <url>/posts/e588b51c/</url>
    <content><![CDATA[<h2 id="1-编码格式介绍">1. 编码格式介绍</h2>
<p><em>常见的字符编码格式：</em></p>
<ul>
<li>Python的解释器使用的是Unicode（内存）</li>
<li>.py文件咋磁盘上使用UTF-8存储（外存）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/a39f43b85950721916f3d604bdec87f7-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81-d1d892.png" alt="字符编码"></p>
<span id="more"></span>
<h2 id="2-文件的读写原理">2. 文件的读写原理</h2>
<ul>
<li>文件的读写俗称“IO操作”</li>
</ul>
<blockquote>
<p>Python操作文件 	→	打开或新建文件夹	→	读写文件	→	关闭资源</p>
</blockquote>
<h2 id="3-文件读写操作">3. 文件读写操作</h2>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/3533d6732209e0e2d129a63807dbb88b-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99-21770d.png" alt="文件读写"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file.readlines())		<span class="comment"># 结果是一个list</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th style="text-align:center">打开模式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">只读模式打开文件，文件指针将会放在文件的开头</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">只写模式打开文件，如果文件不存在则创建；如果文件存在，则覆盖原有内容，指针放在文件开头</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">追加模式打开文件，如果文件不存在则创建，文件指针在文件开头；如果文件存在，则在文件末尾追加内容，文件指针在原文件末尾</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">二进制方式打开文件，不能单独使用，需要与其他模式一起使用，rb或者wb</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">读写模式打开文件，不能单独使用，需要与其他模式一起使用，a+</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">src_file = <span class="built_in">open</span>(<span class="string">&#x27;logo.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">target_file = <span class="built_in">open</span>(<span class="string">&#x27;copylogo.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">target_file.write(src_file.read())</span><br><span class="line">target_file.close()</span><br><span class="line">src_file.close()</span><br></pre></td></tr></table></figure></div>
<h2 id="4-文件对象常用的方法">4. 文件对象常用的方法</h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">read([size])</td>
<td style="text-align:center">从文件中读取size个字节或字符的内容返回，若省略[size]，则读取到文件末尾，一次读取文件所有内容</td>
</tr>
<tr>
<td style="text-align:center">readline()</td>
<td style="text-align:center">从文本文件中读取一行内容</td>
</tr>
<tr>
<td style="text-align:center">readlines()</td>
<td style="text-align:center">把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td>
</tr>
<tr>
<td style="text-align:center">write(str)</td>
<td style="text-align:center">将字符串str内容写入文件</td>
</tr>
<tr>
<td style="text-align:center">writelines(s_list)</td>
<td style="text-align:center">将字符串列表s_list写入文本文件，不添加换行符</td>
</tr>
<tr>
<td style="text-align:center">seek(offset[,whence])</td>
<td style="text-align:center">把文件指针移动到新的位置，offset表示相对whence的位置；offset为正往结束方向移动，为负往开始方向移动。whence不同的值代表不同含义：0从文件头开始计算，1从当前位置开始计算；2从文件末尾开始计算</td>
</tr>
<tr>
<td style="text-align:center">tell()</td>
<td style="text-align:center">返回文件指针的当前位置</td>
</tr>
<tr>
<td style="text-align:center">flush()</td>
<td style="text-align:center">把缓冲区的内容写入文件，但不关闭文件</td>
</tr>
<tr>
<td style="text-align:center">close()</td>
<td style="text-align:center">把缓冲区的内容写入文件，同时关闭文件，释放文件对象相关资源</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file.read(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(file.readline())</span><br><span class="line"><span class="built_in">print</span>(file.readlines())</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">lst = [<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;go&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span><br><span class="line">file.writelines(lst)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file.seek(<span class="number">2</span>)	<span class="comment"># 一个中文两个字节</span></span><br><span class="line"><span class="built_in">print</span>(file.read())</span><br><span class="line"><span class="built_in">print</span>(file.tell())</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">file.flush()</span><br><span class="line">file.write(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></div>
<h2 id="5-with语句（上下文管理器）">5. with语句（上下文管理器）</h2>
<ul>
<li>with语句可以自动管理上下文资源，不论什么原因跳出with块，都能确保文件正确的关闭，以此来达到释放资源的目的。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="built_in">print</span>(file.read())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;MyContentMgr实现了特殊方法*enter*(),*exit*()称为该类对象遵守了上下文管理器协议。</span></span><br><span class="line"><span class="string">该类对象的实例对象，称为上下文管理器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MyContentMgr()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContentMgr</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">enter</span>*(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;enter方法被调用执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">exit</span>*(<span class="params">self,exc_type,exc_val,exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;exit方法被调用执行了&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;show方法被调用执行了&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> MyContentMgr() <span class="keyword">as</span> file:</span><br><span class="line">    file.show()</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件的复制</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;logo.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> src_file:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;copy2logo.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> target_file:</span><br><span class="line">        target_file.write(src_file.read())</span><br></pre></td></tr></table></figure></div>
<h2 id="6-目录操作">6. 目录操作</h2>
<h3 id="（1）os模块">（1）os模块</h3>
<ul>
<li>
<p>os模块是Python内置的与操作系统功能和文件系统相关的模块，该模块中的语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样。</p>
</li>
<li>
<p>os模块与<code>os.path</code>模块用于对目录或文件进行操作。</p>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os模块与操作系统相关的一个模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;notepad.exe&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;calc.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接调用可执行文件</span></span><br><span class="line">os.startfile(<span class="string">&#x27;D:\\YesPlayMusic\\YesPlayMusic.exe&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getcwd()</td>
<td style="text-align:center">返回当前的工作目录</td>
</tr>
<tr>
<td style="text-align:center">listdir()</td>
<td style="text-align:center">返回指定路径下的文件和目录信息</td>
</tr>
<tr>
<td style="text-align:center">mkdir(path[,mode])</td>
<td style="text-align:center">创建目录</td>
</tr>
<tr>
<td style="text-align:center">makedirs(path1/path2…[,mode])</td>
<td style="text-align:center">创建多级目录</td>
</tr>
<tr>
<td style="text-align:center">rmdir(path)</td>
<td style="text-align:center">删除目录</td>
</tr>
<tr>
<td style="text-align:center">removedirs(path1/path2…)</td>
<td style="text-align:center">删除多级目录</td>
</tr>
<tr>
<td style="text-align:center">chdir(path)</td>
<td style="text-align:center">将path设置成当前工作目录</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"></span><br><span class="line">os.listdir(<span class="string">&#x27;../chap15&#x27;</span>)			<span class="comment"># 办公自动化经常使用</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">&#x27;newdir2&#x27;</span>)</span><br><span class="line">os.makedirs(<span class="string">&#x27;A/B/C&#x27;</span>)</span><br><span class="line">os.rmdir(<span class="string">&#x27;newdir2&#x27;</span>)</span><br><span class="line">os.removedirs(<span class="string">&#x27;A/B/C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;F:\\desktop\\chap14&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）os-path模块">（2）os.path模块</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">abspath(path)</td>
<td style="text-align:center">用于获取文件或目录的绝对路径</td>
</tr>
<tr>
<td style="text-align:center">exists(path)</td>
<td style="text-align:center">用于判断文件或目录是否存在，如果存在返回True，否则返回False</td>
</tr>
<tr>
<td style="text-align:center">join(path,name)</td>
<td style="text-align:center">将目录与目录或者文件名拼接起来</td>
</tr>
<tr>
<td style="text-align:center">splitext()</td>
<td style="text-align:center">分离文件名和扩展名</td>
</tr>
<tr>
<td style="text-align:center">basename(path)</td>
<td style="text-align:center">从一个目录中提取文件名</td>
</tr>
<tr>
<td style="text-align:center">dirname(path)</td>
<td style="text-align:center">从一个路径中提取文件路径，不包括文件名</td>
</tr>
<tr>
<td style="text-align:center">isdir(path)</td>
<td style="text-align:center">用于判断是否为路径</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;demo13.py&#x27;</span>),os.path.exists(<span class="string">&#x27;demo18.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;E:\\Python&#x27;</span>,<span class="string">&#x27;demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.split(<span class="string">&#x27;E:\\vippython\\chap15\\demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.splitext(<span class="string">&#x27;demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.basename(<span class="string">&#x27;E:\\vippython\\chap15\\demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(<span class="string">&#x27;E:\\vippython\\chap15\\demo13.py&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">&#x27;E:\\vippython\\chap15\\demo13.py&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;列出指定目录下的所有py文件&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.getcwd()</span><br><span class="line">lst = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.py&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chap15--&gt;newdir--&gt;sub--&gt;遍历所有文件walk</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.getcwd()</span><br><span class="line">lst_files = os.walk(path)</span><br><span class="line"><span class="keyword">for</span> dirpath,dirname,filename <span class="keyword">in</span> lst_files:</span><br><span class="line">    <span class="built_in">print</span>(dirname)</span><br><span class="line">    <span class="built_in">print</span>(dirpath)</span><br><span class="line">    <span class="built_in">print</span>(filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirname:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(dirpath,<span class="built_in">dir</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(dirpath,file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++++++++++++++++++++++++&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(17)--学生信息管理示例</title>
    <url>/posts/60781b63/</url>
    <content><![CDATA[<h2 id="1-需求分析">1. 需求分析</h2>
<p><em>学生管理系统应具备的功能：</em></p>
<ul>
<li>添加学生及成绩信息</li>
<li>将学生信息保存到文件中</li>
<li>修改和删除学生信息</li>
<li>查询学生信息</li>
<li>根据学生成绩进行排序</li>
<li>统计学生的总分</li>
</ul>
<span id="more"></span>
<h2 id="2-系统设计">2. 系统设计</h2>
<p><em>七大模块：</em></p>
<ul>
<li>录入学生信息模块</li>
<li>查找学生信息模块</li>
<li>删除学生信息模块</li>
<li>修改学生信息模块</li>
<li>学生成绩排名模块</li>
<li>统计学生总人数模块</li>
<li>显示全部学生信息模块</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/33e25e976d2b5602c8750274cfc19f31-%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-2872db.png" alt="学生信息管理系统"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/1837a678d7dbc59152c45b273dac2dae-%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B-784307.png" alt="业务流程"></p>
<h2 id="3-系统开发必备">3. 系统开发必备</h2>
<ul>
<li>
<p><em>系统开发环境</em></p>
<ul>
<li>操作环境：Win10</li>
<li>Python解释器版本：Python3</li>
<li>开发环境：PyCharm</li>
<li>Python内置模块：os，re</li>
</ul>
</li>
<li>
<p><em>项目目录结构</em></p>
<p>studentsys	--&gt;	students.txt	&amp;	<a href="http://stusystem.py">stusystem.py</a></p>
</li>
</ul>
<h2 id="4-主函数设计">4. 主函数设计</h2>
<ul>
<li>系统主界面运行效果图</li>
<li>主函数的业务流程</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">退出系统</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">录入学生信息，调用insert()函数</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">查找学生信息，调用search()函数</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">删除学生信息，调用delete()函数</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">修改学生信息，调用modify()函数</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">对学生成绩排序，调用sort()函数</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">统计学生总人数，调用total()函数</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">显示所有学生信息，调用show()函数</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;student.txt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        menu()</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请选择：\n&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]:</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">0</span>:</span><br><span class="line">                answer = <span class="built_in">input</span>(<span class="string">&#x27;您确定退出系统吗？y/n \n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span> <span class="keyword">or</span> <span class="keyword">if</span> answer == <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;谢谢您的使用！&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                insert()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">                search()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">3</span>:</span><br><span class="line">                delete()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">4</span>:</span><br><span class="line">                modify()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">5</span>:</span><br><span class="line">                sort()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">6</span>:</span><br><span class="line">                total()</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">7</span>:</span><br><span class="line">                show()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;======================学生信息管理系统===================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----------------------功能菜单-----------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 1.录入学生信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 2.查找学生信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 3.删除学生信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 4.修改学生信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 5.排序&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 6.统计学生总人数&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 7.显示所有学生信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\t\t\t\t\t\t 0.退出系统&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------------&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>():</span>	<span class="comment">#(1)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span>	<span class="comment">#(4)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span>	<span class="comment">#(2)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span>():</span>	<span class="comment">#(3)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>():</span>		<span class="comment">#(7)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span>():</span>	<span class="comment">#(5)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span>		<span class="comment">#(6)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<h2 id="5-学生信息维护模块设计">5. 学生信息维护模块设计</h2>
<h3 id="（1）录入学生信息">（1）录入学生信息</h3>
<ul>
<li>*实现录入学生信息模块：*从控制台录入学生信息，并保存到磁盘文件中。</li>
<li><code>save(student)</code>函数，用于将学生信息保存到文件</li>
<li><code>insert()</code>函数，用于录入学生信息</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>():</span></span><br><span class="line">    student_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">input</span>(<span class="string">&#x27;请输入ID（如1001）：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">id</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            English = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入英语成绩：&#x27;</span>))</span><br><span class="line">            Python = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入Python成绩：&#x27;</span>))</span><br><span class="line">            Java = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入Java成绩&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;输入无效，不是整数类型，请重新输入。&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 将录入的学生信息保存到字典中</span></span><br><span class="line">        student = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="built_in">id</span>,<span class="string">&#x27;name&#x27;</span>:name,<span class="string">&#x27;English&#x27;</span>:English,<span class="string">&#x27;Python&#x27;</span>:Python,<span class="string">&#x27;Java&#x27;</span>:Java&#125;</span><br><span class="line">        <span class="comment"># 将学生信息添加到列表中</span></span><br><span class="line">        student_list.append(student)</span><br><span class="line">        answer = <span class="built_in">input</span>(<span class="string">&#x27;是否继续添加？y/n \n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 调用save()函数</span></span><br><span class="line">    save(student_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;学生信息录入完毕！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stu_txt = <span class="built_in">open</span>(filename,<span class="string">&#x27;a&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        stu_txt = <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">            stu_txt.write(<span class="built_in">str</span>(item) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        stu_txt.close()</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）删除学生信息">（2）删除学生信息</h3>
<ul>
<li>*实现删除学生信息功能：*从控制台录入学生ID，到磁盘文件中找到对应的学生信息，并将其删除。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        student_id = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学生的ID：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> student_id != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    student_old = file.readlines()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                student_old =[]</span><br><span class="line">            flag = Fasle						<span class="comment"># 标记是否删除</span></span><br><span class="line">            <span class="keyword">if</span> student_old:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wfile:</span><br><span class="line">                    d=&#123;&#125;</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> student_old:</span><br><span class="line">                        d = <span class="built_in">dict</span>(<span class="built_in">eval</span>(item))	<span class="comment"># 将字符串转成字典</span></span><br><span class="line">                        <span class="keyword">if</span> d[<span class="string">&#x27;id&#x27;</span>] != student_id:</span><br><span class="line">                            wfile.write(<span class="built_in">str</span>(d) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&#x27;id为<span class="subst">&#123;student_id&#125;</span>的学生信息已被删除&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&#x27;没有找到ID为<span class="subst">&#123;student_id&#125;</span>的学生信息&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;无学生信息&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                show()							<span class="comment"># 删除之后要重新显示所有学生信息</span></span><br><span class="line">                answer = <span class="built_in">input</span>(<span class="string">&#x27;是否继续删除？y/n \n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（3）修改学生信息">（3）修改学生信息</h3>
<ul>
<li>*实现修改学生信息功能：*从控制台录入学生ID，到磁盘文件中找到对应的学生信息，将其进行修改。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span>():</span></span><br><span class="line">    show()</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> rfile:</span><br><span class="line">            student_old = rfile.readlines()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    student_id = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学生的ID：\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> wfile:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> student_old:</span><br><span class="line">            d = <span class="built_in">dict</span>(<span class="built_in">eval</span>(item))</span><br><span class="line">            <span class="keyword">if</span> d[<span class="string">&#x27;id&#x27;</span>] == student_id:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;找到学生信息，可以修改他（她）的相关信息了！&#x27;</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        d[<span class="string">&#x27;name&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入姓名：\n&#x27;</span>)</span><br><span class="line">                        d[<span class="string">&#x27;English&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入英语成绩：\n&#x27;</span>)</span><br><span class="line">                        d[<span class="string">&#x27;Python&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入Python成绩：\n&#x27;</span>)</span><br><span class="line">                        d[<span class="string">&#x27;Java&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入Java成绩：\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;您的输入有误，请重新输入！&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                wfile.write(<span class="built_in">str</span>(d) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;修改成功！&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                wfile.write(<span class="built_in">str</span>(d) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        answer = <span class="built_in">input</span>(<span class="string">&#x27;是否继续修改其他学生信息？y/n \n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            modify()</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）查找学生信息">（4）查找学生信息</h3>
<ul>
<li>*实现查询学生信息功能：*从控制台录入学生ID或姓名，到磁盘文件中找到对应的学生信息。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    student_query = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">id</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">            mode = <span class="built_in">input</span>(<span class="string">&#x27;按ID查找请输入1，按姓名查找请输入2：\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mode = <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="built_in">id</span> = <span class="built_in">input</span>(<span class="string">&#x27;请输入学生ID:\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> mode = <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&#x27;请输入学生姓名:\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;您的输入有误，请重新输入：\n&#x27;</span>)</span><br><span class="line">                search()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span>  rfile:</span><br><span class="line">                student = rfile.readlines()</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> student:</span><br><span class="line">                    d = <span class="built_in">dict</span>(<span class="built_in">eval</span>(item))</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">id</span> != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> d[<span class="string">&#x27;id&#x27;</span>] == <span class="built_in">id</span>:</span><br><span class="line">                            student_query.append(d)</span><br><span class="line">                    <span class="keyword">elif</span> name != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> d[<span class="string">&#x27;name&#x27;</span>] == name:</span><br><span class="line">                            student_query.append(d)</span><br><span class="line">             <span class="comment"># 显示查询结果</span></span><br><span class="line">            show_student(student_query)</span><br><span class="line">             <span class="comment"># 清空列表</span></span><br><span class="line">            student_query.clear()</span><br><span class="line">            answer = <span class="built_in">input</span>(<span class="string">&#x27;是否要继续查询？y/n \n&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;暂未保存学生信息！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_student</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有查询到学生信息，无数据显示！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 定义标题的显示格式</span></span><br><span class="line">    format_title = <span class="string">&#x27;&#123;:^6 \t &#123;:^12&#125; \t &#123;:^8&#125; \t &#123;:^10&#125; \t &#123;:^10&#125; \t &#123;:^8&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(format_title.<span class="built_in">format</span>(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;英语成绩&#x27;</span>,<span class="string">&#x27;Python成绩&#x27;</span>,<span class="string">&#x27;Java成绩&#x27;</span>,<span class="string">&#x27;总成绩&#x27;</span>))</span><br><span class="line">    <span class="comment"># 定义内容的显示格式</span></span><br><span class="line">    format_data = <span class="string">&#x27;&#123;:^6 \t &#123;:^12&#125; \t &#123;:^8&#125; \t &#123;:^8&#125; \t &#123;:^8&#125; \t &#123;:^8&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="built_in">print</span>(format_data.<span class="built_in">format</span>(item.get(<span class="string">&#x27;id&#x27;</span>)),item.get(<span class="string">&#x27;name&#x27;</span>),item.get(<span class="string">&#x27;English&#x27;</span>),item.get(<span class="string">&#x27;Python&#x27;</span>),item.get(<span class="string">&#x27;Java&#x27;</span>),<span class="built_in">int</span>(item.get(<span class="string">&#x27;English&#x27;</span>))+<span class="built_in">int</span>(item.get(<span class="string">&#x27;Python&#x27;</span>))+<span class="built_in">int</span>(item.get(<span class="string">&#x27;Java&#x27;</span>))  )</span><br></pre></td></tr></table></figure></div>
<h3 id="（5）统计学生总人数">（5）统计学生总人数</h3>
<ul>
<li>*实现统计学生总人数：*统计学生信息文件中保存的学生信息个数。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total</span>():</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename.<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> rfile:</span><br><span class="line">            students = rfile.readlines()</span><br><span class="line">            <span class="keyword">if</span> students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;一共有<span class="subst">&#123;<span class="built_in">len</span>(students)&#125;</span>名学生。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;还没有录入学生信息。&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（6）显示所有学生信息">（6）显示所有学生信息</h3>
<ul>
<li>*实现显示所有学生信息功能：*将学生信息文件中保存的全部学生信息获取并显示。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    student_lst =[]</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):								<span class="comment"># 判断文件是否存在</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding =<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> rfile:		<span class="comment"># 打开文件</span></span><br><span class="line">            students = rfile.readlines()						<span class="comment"># 读取全部数据</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> students:</span><br><span class="line">                student_lst,append(<span class="built_in">eval</span>(item))</span><br><span class="line">            <span class="keyword">if</span> student_lst:</span><br><span class="line">                show_student(student_lst)						<span class="comment"># 调用显示学生信息的方法</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;暂未保存数据&#x27;</span>)  </span><br></pre></td></tr></table></figure></div>
<h3 id="（7）排序学生成绩">（7）排序学生成绩</h3>
<ul>
<li>*实现按学生成绩排序功能：*主要对学生信息按英语成绩，Python成绩，Java成绩，总成绩进行升序或者降序排序。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>():</span></span><br><span class="line">    show()</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding =<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> rfile:</span><br><span class="line">            student_list = rfile.readlines()</span><br><span class="line">        student_new = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> stuednt_list:</span><br><span class="line">            d = <span class="built_in">dict</span>(<span class="built_in">eval</span>(item))</span><br><span class="line">            student_new,append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    asc_or_desc = <span class="built_in">input</span>(<span class="string">&#x27;请选择 \n (0.升序；\n (1.降序&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> asc_or_desc == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        asc_or_desc_bool = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> asc_or_desc == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        asc_or_desc_bool = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您的输入有误，请重新输入。&#x27;</span>)</span><br><span class="line">        sort()</span><br><span class="line">    mode = <span class="built_in">input</span>(<span class="string">&#x27;请选择排序方式 \n (1.按英语成绩排序; \n (2.按Python成绩排序; \n (3.按Java语言成绩排序; \n (0.按总成绩排序.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        student_new.sort(key = <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[<span class="string">&#x27;English&#x27;</span>]),reverse = asc_or_desc_bool)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        student_new.sort(key = <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[<span class="string">&#x27;Python&#x27;</span>]),reverse = asc_or_desc_bool)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        student_new.sort(key = <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[<span class="string">&#x27;Java&#x27;</span>]),reverse = asc_or_desc_bool)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        student_new.sort(key = <span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&#x27;English&#x27;</span>]) + <span class="built_in">int</span>(x[<span class="string">&#x27;Python&#x27;</span>]) + <span class="built_in">int</span>(x[<span class="string">&#x27;Java&#x27;</span>]),reverse = asc_or_desc_bool)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您的输入有误，请重新输入！&#x27;</span>)</span><br><span class="line">        sort()</span><br><span class="line">    show_student(student_new)		<span class="comment"># 显示排序结果</span></span><br></pre></td></tr></table></figure></div>
<h2 id="6-项目打包">6. 项目打包</h2>
<ul>
<li><em>安装第三方模块：</em>（1）在线安装方式<code>pip install PyInstaller</code>；（2）执行打包操作</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(18)--案例实操</title>
    <url>/posts/3816cdcc/</url>
    <content><![CDATA[<h2 id="1-案例一">1. 案例一</h2>
<h3 id="（1）向文件输出“奋斗成就更好的你”">（1）向文件输出“奋斗成就更好的你”</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Task1 使用print方式进行输出</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;F:/test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;奋斗成就更好的你&#x27;</span>,file = fp)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Task1 使用文件读写操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;F:/test1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;奋斗成就更好的你&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h3 id="（2）输出北京的天气预报">（2）输出北京的天气预报</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;今天&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;08时&#x27;</span>,<span class="string">&#x27;11时&#x27;</span>,<span class="string">&#x27;14时&#x27;</span>,<span class="string">&#x27;17时&#x27;</span>,<span class="string">&#x27;20时&#x27;</span>,<span class="string">&#x27;23时&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0℃ &#x27;</span>,<span class="string">&#x27;6℃ &#x27;</span>,<span class="string">&#x27;10℃&#x27;</span>,<span class="string">&#x27;4℃ &#x27;</span>,<span class="string">&#x27;1℃ &#x27;</span>,<span class="string">&#x27;0℃ &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;明 天 &#x27;</span>,<span class="string">&#x27;2/23&#x27;</span>,<span class="string">&#x27;2/11℃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;2/24&#x27;</span>,<span class="string">&#x27;0/9℃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;2/25&#x27;</span>,<span class="string">&#x27;-2/8℃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;2/26&#x27;</span>,<span class="string">&#x27;-3/6℃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;2/27&#x27;</span>,<span class="string">&#x27;-2/7℃&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;星期六&#x27;</span>,<span class="string">&#x27;2/28&#x27;</span>,<span class="string">&#x27;-1/11℃&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）机票购买界面">（3）机票购买界面</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;✈国内 \t ♜国际.港澳台 \t ↘发现低价&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;航班类型：⊙单程	⊙往返	⊙多程（含缺口城）&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;出发城市：北京&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;到达城市：长春&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;出发日期：2020-3-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;返回日期：yyyy-MM-dd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t ☐带儿童  ☐带婴儿&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t\t*****&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t\t*_搜索*_&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）北京地铁1号线运行图">（4）北京地铁1号线运行图</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;地铁1\t\t\t四惠东→苹果园&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t首车：05:05&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\t\t末车：23:30\t\t票价：起步价：2元&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  1\t\t  3\t  5\t  7\t\t  9\t\t  11\t\t  12\t\t 14\t\t 16\t\t 18\t\t 20\t\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;   ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t ⇌\t\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;四惠东\t大望路\t永安里\t东单\t天安门东\t西单\t复兴门\t木樨地\t公主坟\t五棵松\t八宝山&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-案例二">2. 案例二</h2>
<h3 id="（1）输出杨老师出版的图书信息">（1）输出杨老师出版的图书信息</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;►→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→◄&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷       《Java程序设计教程》   ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;► 出版社：西安电子科技大学出版社 ◄&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷     出版时间：2019-02-02     ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;►        定  价：56.8          ◄&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→◁&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">book_name = <span class="string">&#x27;Java程序设计教程&#x27;</span></span><br><span class="line">publish = <span class="string">&#x27;西安电子科技大学出版社&#x27;</span></span><br><span class="line">pub_date = <span class="string">&#x27;2019-02-02&#x27;</span></span><br><span class="line">price = <span class="number">56.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▶➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝◀&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷\t\t 《&#x27;</span>,book_name,<span class="string">&#x27;》 \t\t ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷\t出版社：&#x27;</span>,publish,<span class="string">&#x27;\t ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷\t出版时间：&#x27;</span>,pub_date,<span class="string">&#x27;\t\t\t ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷\t定 价：&#x27;</span>,price,<span class="string">&#x27;\t\t\t\t ◁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;▷➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝➝◁&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）输出《红楼梦》中的金陵十二钗前五位">（2）输出《红楼梦》中的金陵十二钗前五位</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 变量的赋值</span></span><br><span class="line">name1 = <span class="string">&#x27;林黛玉&#x27;</span></span><br><span class="line">name2 = <span class="string">&#x27;薛宝钗&#x27;</span></span><br><span class="line">name3 = <span class="string">&#x27;贾元春&#x27;</span></span><br><span class="line">name4 = <span class="string">&#x27;贾探春&#x27;</span></span><br><span class="line">name5 = <span class="string">&#x27;史湘云&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;①\t&#x27;</span> + name1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;②\t&#x27;</span> + name2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;③\t&#x27;</span> + name3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;④\t&#x27;</span> + name4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;⑤\t&#x27;</span> + name5)</span><br><span class="line"><span class="comment"># 2 列表</span></span><br><span class="line">lst_name = [<span class="string">&#x27;林黛玉&#x27;</span>,<span class="string">&#x27;薛宝钗&#x27;</span>,<span class="string">&#x27;贾元春&#x27;</span>,<span class="string">&#x27;贾探春&#x27;</span>,<span class="string">&#x27;史湘云&#x27;</span>]</span><br><span class="line">lst_sig = [<span class="string">&#x27;①&#x27;</span>,<span class="string">&#x27;②&#x27;</span>,<span class="string">&#x27;③&#x27;</span>,<span class="string">&#x27;④&#x27;</span>,<span class="string">&#x27;⑤&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(lst_sig[i],lst_name[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;①&#x27;</span>:<span class="string">&#x27;林黛玉&#x27;</span>,<span class="string">&#x27;②&#x27;</span>:<span class="string">&#x27;薛宝钗&#x27;</span>,<span class="string">&#x27;③&#x27;</span>:<span class="string">&#x27;贾元春&#x27;</span>,<span class="string">&#x27;④&#x27;</span>:<span class="string">&#x27;贾探春&#x27;</span>,<span class="string">&#x27;⑤&#x27;</span>:<span class="string">&#x27;史湘云&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;key,d[key]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zip-----------------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> s,name <span class="keyword">in</span> <span class="built_in">zip</span>(lst_sig,lst_name):</span><br><span class="line">    <span class="built_in">print</span>(s,name)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）输出图书音像勋章">（3）输出图书音像勋章</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[0;35m\t\t图书音像勋章\033[m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[0;35m-----------------------\033[m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[0;32m❀图书音像勋章\t\t✪专享活动 \033[m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[0;34m❤专属优惠\t\t\t☎优惠提醒 \033[m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[0;35m-----------------------\033[m&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）输出你的身体指标">（4）输出你的身体指标</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">height = <span class="number">170</span></span><br><span class="line">weight = <span class="number">50.5</span></span><br><span class="line">bmi = weight / (height+weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您的身高是：&#x27;</span>,height)</span><br><span class="line"><span class="comment"># print(&#x27;您的身高是：&#x27; + str(height))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您的体重是：&#x27;</span> + <span class="built_in">str</span>(weight))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您的BMI是：&#x27;</span> + <span class="built_in">str</span>(bmi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您的BMI的指数是：&#x27;</span> <span class="string">&#x27;&#123;:0.2f&#125;&#x27;</span>.<span class="built_in">format</span>(bmi)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-案例三">3. 案例三</h2>
<h3 id="（1）将指定的十进制数转换二进制、八进制、十六进制">（1）将指定的十进制数转换二进制、八进制、十六进制</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">	num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个十进制的整数：&#x27;</span>))		<span class="comment"># str转换成int类型</span></span><br><span class="line"><span class="comment"># 使用个数可变的位置参数</span></span><br><span class="line">	<span class="built_in">print</span>(num,<span class="string">&#x27;的二进制数为：&#x27;</span>,<span class="built_in">bin</span>(num))</span><br><span class="line"><span class="comment"># 使用+作为连接符，注意符号左右均为str类型</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">str</span>(num) + <span class="string">&#x27;的二进制数为：&#x27;</span> + 	<span class="built_in">bin</span>(num))</span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;%s的二进制数为：%s&#x27;</span> %  (num,<span class="built_in">bin</span>(num)))</span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;的二进制数为：&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(num,<span class="built_in">bin</span>(num)))</span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>的二进制数为：<span class="subst">&#123;<span class="built_in">bin</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>的八进制数为：<span class="subst">&#123;<span class="built_in">oct</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>的十六进制数为：<span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    	<span class="keyword">try</span>:</span><br><span class="line">        	fun()</span><br><span class="line">        	<span class="keyword">break</span></span><br><span class="line">    	<span class="keyword">except</span>:</span><br><span class="line">        	<span class="built_in">print</span>(<span class="string">&#x27;只能输入整数！程序出错，请重新输入&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）为自己手机充值">（2）为自己手机充值</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;用户手机账户原有话费金额为：\033[0;35m 8元 \033[m&#x27;</span>)</span><br><span class="line">money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入用户的充值金额：&#x27;</span>))</span><br><span class="line">money += <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前的余额为：\033[0;32m &#x27;</span>,money,<span class="string">&#x27;元 \033[m&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）计算能量的消耗">（3）计算能量的消耗</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您当天行走的步数：&#x27;</span>))</span><br><span class="line">calorie = num *<span class="number">28</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您今天一共消耗了卡路里<span class="subst">&#123;calorie&#125;</span>，即<span class="subst">&#123;calorie/<span class="number">1000</span>&#125;</span>千卡&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）预测未来子女的身高">（4）预测未来子女的身高</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">father_height = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入父亲的身高：&#x27;</span>))</span><br><span class="line">mother_height = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入母亲的身高：&#x27;</span>))</span><br><span class="line">son_height = (father_height + mother_height)*<span class="number">0.54</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;预测子女的身高为：&#123;&#125;cm&#x27;</span>.<span class="built_in">format</span>(son_height))</span><br></pre></td></tr></table></figure></div>
<h2 id="4-案例四">4. 案例四</h2>
<h3 id="（1）支付密码的验证">（1）支付密码的验证</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&#x27;支付宝支付密码：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> pwd.isdigit():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;支付数据合法&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;支付数字不合法，支付密码只能是数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line">s = <span class="string">&#x27;支付数据合法&#x27;</span> <span class="keyword">if</span> pwd.isdigit() <span class="keyword">else</span> <span class="string">&#x27;支付数字不合法，支付密码只能是数字&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）模拟-QQ-账号登录">（2）模拟 QQ 账号登录</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">qq = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的QQ号：&#x27;</span>)</span><br><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> qq == <span class="string">&#x27;296626472&#x27;</span>  <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;账号或者密码不正确&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）商品价格大竞猜">（3）商品价格大竞猜</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">price = random.randint(<span class="number">1000</span>,<span class="number">1500</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;今日竞猜的商品为小米扫地机器人，价格在[1000-1500]之间：&#x27;</span>)</span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> guess &gt; price:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;大了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> guess &lt; price:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;真实价格为：&#x27;</span>,price)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）根据星座查看运势">（4）根据星座查看运势</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;白羊座&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;金牛座&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;双子座&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;巨蟹座&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;狮子座&#x27;</span>:<span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">star = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的星座查看近来的运势：&#x27;</span>)</span><br><span class="line"><span class="comment"># print(d[star])</span></span><br><span class="line"><span class="built_in">print</span>(d.get(star))</span><br></pre></td></tr></table></figure></div>
<h2 id="5-案例五">5. 案例五</h2>
<h3 id="（1）循环输出26个字母对应的-ASCII-码值">（1）循环输出26个字母对应的 ASCII 码值</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">97</span>    <span class="comment"># a的ASCII为97</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),<span class="string">&#x27;---&gt;&#x27;</span>,x)</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------&#x27;</span>)</span><br><span class="line">x = <span class="number">97</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">123</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x),<span class="string">&#x27;----&gt;&#x27;</span>,x)</span><br><span class="line">    x += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）模拟用户登录">（2）模拟用户登录</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    user_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_name == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> user_pwd == <span class="string">&#x27;8888&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码不正确！&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;您还有<span class="subst">&#123;<span class="number">3</span>-i&#125;</span>次机会！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;对不起，三次均输入错误，请联系后台管理员！&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）猜数游戏">（3）猜数游戏</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rand = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;在我心中有个数1-100，请你猜一猜。&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> num &lt; rand:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &gt; rand:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您一共猜了<span class="subst">&#123;i&#125;</span>次&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;真聪明&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> i &lt;= <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;还凑合&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;天哪，找杨老师学习二分算法&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）计算100-999之间的水仙花数">（4）计算100-999之间的水仙花数</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> math.<span class="built_in">pow</span>((i % <span class="number">10</span>),<span class="number">3</span>) + math.<span class="built_in">pow</span>((i//<span class="number">10</span>%<span class="number">10</span>),<span class="number">3</span>) + math.<span class="built_in">pow</span>(i // <span class="number">100</span>,<span class="number">3</span>) == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></div>
<h2 id="6-案例六">6. 案例六</h2>
<h3 id="（1）“千年虫”我来了">（1）“千年虫”我来了</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">year = [<span class="number">82</span>,<span class="number">89</span>,<span class="number">88</span>,<span class="number">86</span>,<span class="number">85</span>,<span class="number">00</span>,<span class="number">99</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表：&#x27;</span>,year)</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(year):</span><br><span class="line">    <span class="comment">#print(index,value)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(value) != <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        year[index] = <span class="built_in">int</span>(<span class="string">&#x27;19&#x27;</span> + <span class="built_in">str</span>(value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        year[index] = <span class="built_in">int</span>(<span class="string">&#x27;200&#x27;</span> + <span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之后的列表为：&#x27;</span>,year)</span><br><span class="line">year.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序之后的列表为：&#x27;</span>,year)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）京东购物流程">（2）京东购物流程</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    goods = <span class="built_in">input</span>(<span class="string">&#x27;请输入商品的名称进入商品的入库，每次只能输入一个商品：\n&#x27;</span>)</span><br><span class="line">    lst.append(goods)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line">cart = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num = <span class="built_in">input</span>(<span class="string">&#x27;请输入要购买的商品编号：&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> item.find(num) != -<span class="number">1</span>:</span><br><span class="line">            cart.append(item)</span><br><span class="line">            <span class="keyword">break</span>						<span class="comment"># 退出for循环</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>						<span class="comment"># 退出while循环</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您购物车里已经选好的商品为：&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;for m in cart:</span></span><br><span class="line"><span class="string">    print(m)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cart)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(cart[j])</span><br></pre></td></tr></table></figure></div>
<h2 id="7-案例七">7. 案例七</h2>
<h3 id="（1）根据星座测试性格特点">（1）根据星座测试性格特点</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">constellation = [<span class="string">&#x27;白羊座&#x27;</span>,<span class="string">&#x27;金牛座&#x27;</span>,<span class="string">&#x27;双子座&#x27;</span>,<span class="string">&#x27;巨蟹座&#x27;</span>,<span class="string">&#x27;狮子座&#x27;</span>,<span class="string">&#x27;处女座&#x27;</span>,<span class="string">&#x27;天秤座&#x27;</span>,<span class="string">&#x27;天蝎座&#x27;</span>,<span class="string">&#x27;射手座&#x27;</span>,<span class="string">&#x27;摩羯座&#x27;</span>,<span class="string">&#x27;水瓶座&#x27;</span>,<span class="string">&#x27;双鱼座&#x27;</span>]</span><br><span class="line">nature = [<span class="string">&#x27;积极乐观&#x27;</span>,<span class="string">&#x27;固执内向&#x27;</span>,<span class="string">&#x27;圆滑世故&#x27;</span>,<span class="string">&#x27;多愁善感&#x27;</span>,<span class="string">&#x27;迷之自信&#x27;</span>,<span class="string">&#x27;精明计较&#x27;</span>,<span class="string">&#x27;犹豫不决&#x27;</span>,<span class="string">&#x27;阴暗消极&#x27;</span>,<span class="string">&#x27;放荡不羁&#x27;</span>,<span class="string">&#x27;务实本分&#x27;</span>,<span class="string">&#x27;作天作地&#x27;</span>,<span class="string">&#x27;安于现状&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两个列表转成集合</span></span><br><span class="line">a = <span class="built_in">zip</span>(constellation,nature)</span><br><span class="line">d = <span class="built_in">dict</span>(<span class="built_in">zip</span>(constellation,nature))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的星座名称：&#x27;</span>)</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">if</span> key == item:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(key,<span class="string">&#x27;的性格特点为：&#x27;</span>,d.get(key))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(&#x27;您输入的星座有误&#x27;)</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您输入的星座有误&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）模拟12306火车票订票下单">（2）模拟12306火车票订票下单</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dict_ticket = &#123;</span><br><span class="line">    <span class="string">&#x27;G1569&#x27;</span>:[<span class="string">&#x27;北京南-天津南&#x27;</span>,<span class="string">&#x27;18:05&#x27;</span>,<span class="string">&#x27;18:39&#x27;</span>,<span class="string">&#x27;00:34&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;G1567&#x27;</span>:[<span class="string">&#x27;北京南-天津南&#x27;</span>,<span class="string">&#x27;18:15&#x27;</span>,<span class="string">&#x27;18:49&#x27;</span>,<span class="string">&#x27;00:34&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;G8917&#x27;</span>:[<span class="string">&#x27;北京南-天津西&#x27;</span>,<span class="string">&#x27;18:20&#x27;</span>,<span class="string">&#x27;19:19&#x27;</span>,<span class="string">&#x27;00:59&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;G203 &#x27;</span>:[<span class="string">&#x27;北京南-天津南&#x27;</span>,<span class="string">&#x27;18:35&#x27;</span>,<span class="string">&#x27;19:09&#x27;</span>,<span class="string">&#x27;00:34&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;车次\t\t出发站\t\t到达站\t\t出发时间\t\t\t到达时间\t\t\t历时时长&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict_ticket:</span><br><span class="line">    <span class="built_in">print</span>(item,end = <span class="string">&#x27;   &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dict_ticket[item]:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27;\t\t\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()		<span class="comment"># 换行</span></span><br><span class="line"><span class="comment"># 输入要购买的车次    </span></span><br><span class="line">train_no = <span class="built_in">input</span>(<span class="string">&#x27;请输入购买的车次：&#x27;</span>)</span><br><span class="line">persons = <span class="built_in">input</span>(<span class="string">&#x27;请输入乘车人。如果是多人请使用逗号分隔&#x27;</span>)</span><br><span class="line">s = <span class="string">f&#x27;您已购买了<span class="subst">&#123;train_no&#125;</span>次列车，&#x27;</span></span><br><span class="line">s_info = dict_ticket[train_no]		<span class="comment"># 获取车次详细信息</span></span><br><span class="line">s += s_info[<span class="number">0</span>] + <span class="string">&#x27; &#x27;</span> + s_info[<span class="number">1</span>] + <span class="string">&#x27; 开。&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;s&#125;</span>请<span class="subst">&#123;persons&#125;</span>尽快取走纸质车票。【铁路客服】&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="8-案例八">8. 案例八</h2>
<h3 id="（1）我的咖啡馆你做主">（1）我的咖啡馆你做主</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">coffee_name = (<span class="string">&#x27;蓝山&#x27;</span>,<span class="string">&#x27;卡布奇诺&#x27;</span>,<span class="string">&#x27;拿铁&#x27;</span>,<span class="string">&#x27;皇家咖啡&#x27;</span>,<span class="string">&#x27;女王咖啡&#x27;</span>,<span class="string">&#x27;美丽与哀愁&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您好！欢迎光临小喵咖啡屋。&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;本店经营的咖啡有：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(coffee_name):</span><br><span class="line">    <span class="built_in">print</span>(index+ +<span class="number">1</span> ,<span class="string">&#x27;.&#x27;</span>,item,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line">index = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;\n请输入您喜欢的咖啡编号：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt;= <span class="built_in">len</span>(coffee_name):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的咖啡[<span class="subst">&#123;coffee_name[index -<span class="number">1</span>]&#125;</span>]好了，请您慢用&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）显示2019年中超联赛前五名排行">（2）显示2019年中超联赛前五名排行</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">socres = ((<span class="string">&#x27;广州恒大&#x27;</span>,<span class="number">72</span>),(<span class="string">&#x27;北京国安&#x27;</span>,<span class="number">70</span>),(<span class="string">&#x27;上海上港&#x27;</span>,<span class="number">66</span>),(<span class="string">&#x27;江苏苏宁&#x27;</span>,<span class="number">53</span>),(<span class="string">&#x27;山东鲁能&#x27;</span>,<span class="number">51</span>))</span><br><span class="line"><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(scores):</span><br><span class="line">    <span class="built_in">print</span>(index +<span class="number">1</span>,<span class="string">&#x27;.&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> item:</span><br><span class="line">        <span class="built_in">print</span>(score,end =<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）模拟手机通讯录">（3）模拟手机通讯录</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">phones = <span class="built_in">set</span>()						<span class="comment"># 创建一个空集合，集合元素没有顺序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    info = <span class="built_in">input</span>(<span class="string">f&#x27;请输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个朋友的姓名和手机号码：&#x27;</span>)</span><br><span class="line">    phones.add(info)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> phones:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<h2 id="9-案例九">9. 案例九</h2>
<h3 id="（1）统计字符串中出现指定字符的次数">（1）统计字符串中出现指定字符的次数</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_count</span>(<span class="params">s,ch</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> ch.upper() == item <span class="keyword">or</span> ch.lower() == item:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    s = <span class="string">&#x27;hellopython,hellojava,hellogo&#x27;</span></span><br><span class="line">    ch = <span class="built_in">input</span>(<span class="string">&#x27;请输入要统计的字符：&#x27;</span>)</span><br><span class="line">    count = get_count(s,ch)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ch&#125;</span>在<span class="subst">&#123;s&#125;</span>中出现的次数为：<span class="subst">&#123;count&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）格式化输出商品的名称和单价">（2）格式化输出商品的名称和单价</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    	<span class="keyword">for</span> i <span class="keyword">in</span> item:</span><br><span class="line">       	 <span class="built_in">print</span>(i,end =<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">lst = [</span><br><span class="line">    [<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;电风扇&#x27;</span>,<span class="string">&#x27;美的&#x27;</span>,<span class="number">500</span>],</span><br><span class="line">    [<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;洗衣机&#x27;</span>,<span class="string">&#x27;TCL&#x27;</span>,<span class="number">1000</span>],</span><br><span class="line">    [<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;微波炉&#x27;</span>,<span class="string">&#x27;老板&#x27;</span>,<span class="number">400</span>],</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;编号\t\t\t名称\t\t\t品牌\t\t\t单价&#x27;</span>)</span><br><span class="line">show(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------格式化---------------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    item[<span class="number">0</span>] = <span class="string">&#x27;0000&#x27;</span> + item[<span class="number">0</span>]</span><br><span class="line">    item[<span class="number">3</span>] = <span class="string">&#x27;￥&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(item[<span class="number">3</span>])</span><br><span class="line">show(lst)    </span><br></pre></td></tr></table></figure></div>
<h2 id="10-案例十">10. 案例十</h2>
<h3 id="（1）Mini-计算器">（1）Mini 计算器</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">a,b,op</span>):</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> add(a,b)</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sub(a,b)</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> mul(a,b)</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> b != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> div(a,b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;除数不能为0&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a/b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>))</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>))</span><br><span class="line">    op = <span class="built_in">input</span>(<span class="string">&#x27;请输入运算符：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(calc(a,b,op))</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）猜数游戏">（2）猜数游戏</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span>(<span class="params">num,guess_num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num = guess_num:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> guess_num &gt; num:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">num = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    guess_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;我心里有个1-100的整数，请你猜一猜：&#x27;</span>))</span><br><span class="line">    result = guess(num,guess_num)</span><br><span class="line">    <span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> result &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;真笨，10次都没猜中！&#x27;</span>) </span><br></pre></td></tr></table></figure></div>
<h2 id="11-案例十一">11. 案例十一</h2>
<h3 id="（1）编写程序输入学员成绩">（1）编写程序输入学员成绩</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入分数：&#x27;</span>))</span><br><span class="line">	<span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">   	 	<span class="built_in">print</span>(<span class="string">&#x27;分数为：&#x27;</span>,score)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">   	 	<span class="keyword">raise</span> Exception(<span class="string">&#x27;分数不正确&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）编写程序，判断三个参数能否构成三角形">（2）编写程序，判断三个参数能否构成三角形</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_triangle</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a&lt;<span class="number">0</span> <span class="keyword">or</span> b&lt;<span class="number">0</span> <span class="keyword">or</span> c&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;三条边不能有负数&#x27;</span>)				<span class="comment"># 手动抛出异常对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断是否构成三角形</span></span><br><span class="line">    <span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;三角形的边长为a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>，不能构成三角形&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一条边：&#x27;</span>))</span><br><span class="line">        b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二条边：&#x27;</span>))</span><br><span class="line">        c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第三条边：&#x27;</span>))</span><br><span class="line">        is_triangle(a,b,c)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure></div>
<h2 id="12-案例十二">12. 案例十二</h2>
<h3 id="（1）定义一个圆的类来计算面积和周长">（1）定义一个圆的类来计算面积和周长</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,r</span>):</span></span><br><span class="line">        self.r = r</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_area</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> math.pi * math.<span class="built_in">pow</span>(self.r,<span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_perimeter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*math.pi*self.r</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">    c = Circle(r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;圆的面积为：<span class="subst">&#123;c.get_area()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;圆的周长为：<span class="subst">&#123;c.get_perimeter()&#125;</span>)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">  	print(&#x27;</span>圆的面积为：&#123;:<span class="number">.2</span>f&#125;<span class="string">&#x27;.format(c.get_area()))</span></span><br><span class="line"><span class="string">  	print(&#x27;</span>圆的周长为：&#123;:<span class="number">.2</span>f&#125;<span class="string">&#x27;.format(c.get_perimeter())) </span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）定义学生类录入5个学生信息存储到列表中">（2）定义学生类录入5个学生信息存储到列表中</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,stu_name,stu_age_,stu_gender,stu_score</span>):</span></span><br><span class="line">        self.stu_name = stu_name</span><br><span class="line">        self.stu_age = stu_age</span><br><span class="line">        self.stu_gender = stu_gender</span><br><span class="line">        self.stu_score = stu_score</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.stu_name,self.stu_age,self.stu_gender,self.stu_score)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入五位学员的信息：(姓名#年龄#性别#成绩)&#x27;</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">        s = <span class="built_in">input</span>(<span class="string">f&#x27;请输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>位学员的信息和成绩：&#x27;</span>)</span><br><span class="line">        s_lst = s.split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(s_lst)</span></span><br><span class="line">        <span class="comment"># 创建学生对象</span></span><br><span class="line">        stu = Student(s_lst[<span class="number">0</span>],<span class="built_in">int</span>(s_lst[<span class="number">1</span>]),s_lst[<span class="number">2</span>],<span class="built_in">float</span>(s_lst[<span class="number">3</span>]))</span><br><span class="line">        lst.append(stu)</span><br><span class="line">    <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">        item.show()</span><br></pre></td></tr></table></figure></div>
<h2 id="13-案例十三">13. 案例十三</h2>
<h3 id="（1）编写程序实现乐手弹奏乐器">（1）编写程序实现乐手弹奏乐器</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Erhu</span>(<span class="params">Instrument</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;二胡在演奏&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piano</span>(<span class="params">Instrument</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;钢琴在演奏&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Violin</span>(<span class="params">Instrument</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小提琴在演奏&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">instrument</span>):</span></span><br><span class="line">    instrument.make_sound()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小鸟在唱歌&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    play(Erhu())</span><br><span class="line">    play(Piano())</span><br><span class="line">    play(Violin())</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）请使用面向对象的思想，设计自定义类，描述出租车和家用轿车的信息">（2）请使用面向对象的思想，设计自定义类，描述出租车和家用轿车的信息</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,<span class="built_in">type</span>,no</span>):</span></span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.no = no</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taxi</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,<span class="built_in">type</span>,no,company</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(<span class="built_in">type</span>,no)</span><br><span class="line">        self.company = company</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(’乘客您好！)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;我是<span class="subst">&#123;self.company&#125;</span>出租车公司的，我的车牌是<span class="subst">&#123;self.no&#125;</span>，请问您要去哪里？&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;目的地到了，请您付款下车，欢迎再次乘坐。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FamilyCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> *<span class="title">init</span>*(<span class="params">self,<span class="built_in">type</span>,no,name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().*init*(<span class="built_in">type</span>,no)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;目的地到了，我们去玩吧&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;我是<span class="subst">&#123;self.name&#125;</span>，我的汽车我做主&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    taxi = Taxi(<span class="string">&#x27;上海大众&#x27;</span>,<span class="string">&#x27;京A9765&#x27;</span>,<span class="string">&#x27;长城&#x27;</span>)</span><br><span class="line">    taxi.start()</span><br><span class="line">    taxi.stop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>* <span class="number">30</span>)</span><br><span class="line">    familycar = FamilyCar(<span class="string">&#x27;广汽丰田&#x27;</span>,<span class="string">&#x27;京B88888&#x27;</span>,<span class="string">&#x27;武大郎&#x27;</span>)</span><br><span class="line">    familycar.start()</span><br><span class="line">    familycar.stop()</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
<h2 id="14-案例十四">14. 案例十四</h2>
<h3 id="（1）模拟高铁售票系统">（1）模拟高铁售票系统</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> prettytable <span class="keyword">as</span> pt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示座席</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_ticket</span>(<span class="params">row_num</span>):</span></span><br><span class="line">    tb = pt.PrettyTable()</span><br><span class="line">    tb.field_names = [<span class="string">&#x27;行号&#x27;</span>,<span class="string">&#x27;座位1&#x27;</span>,<span class="string">&#x27;座位2&#x27;</span>,<span class="string">&#x27;座位3&#x27;</span>,<span class="string">&#x27;座位4&#x27;</span>,<span class="string">&#x27;座位5&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row_num):</span><br><span class="line">        lst = [<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>行&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>]</span><br><span class="line">        tb.add_row(lst)</span><br><span class="line">    <span class="built_in">print</span>(tb)</span><br><span class="line"><span class="comment"># 订票</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_ticket</span>(<span class="params">row_num,row,column</span>):</span></span><br><span class="line">    tb = pt.PrettyTable()</span><br><span class="line">    tb.field_names = [<span class="string">&#x27;行号&#x27;</span>,<span class="string">&#x27;座位1&#x27;</span>,<span class="string">&#x27;座位2&#x27;</span>,<span class="string">&#x27;座位3&#x27;</span>,<span class="string">&#x27;座位4&#x27;</span>,<span class="string">&#x27;座位5&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row_num):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(row) == i+<span class="number">1</span>:</span><br><span class="line">            lst = [<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>行&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>]</span><br><span class="line">            lst[<span class="built_in">int</span>(column)] = <span class="string">&#x27;已售&#x27;</span></span><br><span class="line">            tb.add_row(lst)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lst = [<span class="string">f&#x27;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>行&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>,<span class="string">&#x27;有票&#x27;</span>]</span><br><span class="line">            tb.add_row(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    row_num = <span class="number">13</span></span><br><span class="line">    show_ticket(row_num)</span><br><span class="line">    choose_num = <span class="built_in">input</span>(<span class="string">&#x27;请输入选择的座位，如13,5表示13排5号座位&#x27;</span>)</span><br><span class="line">    <span class="comment"># 英文逗号处分隔行与列</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       row,column = choose_num.split(<span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入格式有误，如13排5号座位，应该位13,5&#x27;</span>)</span><br><span class="line">    order_ticket(row_num,row,column)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）推算几天后的日期">（2）推算几天后的日期</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputdate</span>():</span>    </span><br><span class="line">    indate = <span class="built_in">input</span>(<span class="string">&#x27;请输入开始日期：&#123;20200202&#125;后按回车&#x27;</span>)</span><br><span class="line">    indate = indate.strip()</span><br><span class="line">    datestr = indate[<span class="number">0</span>:<span class="number">4</span>] + <span class="string">&#x27;-&#x27;</span> + indate[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">&#x27;-&#x27;</span> +indate[<span class="number">6</span>:]</span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.strptime(datestr,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--------------推算几天后的日期---------------------&#x27;</span>)</span><br><span class="line">    sdate = inputdate()</span><br><span class="line">    in_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入间隔天数：&#x27;</span>))</span><br><span class="line">    fdate = sdate + datetime.timedelta(days = in_num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您推算的日期是：&#x27;</span> + <span class="built_in">str</span>(fdate))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您推算的日期是：&#x27;</span> + <span class="built_in">str</span>(fdate).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div>
<h2 id="15-案例十五">15. 案例十五</h2>
<h3 id="（1）记录用户的登录日志">（1）记录用户的登录日志</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入提示数字，执行相应的操作：0.退出  1.查看登录日志&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 记录日志</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_logininfo</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        s = <span class="string">f&#x27;用户名<span class="subst">&#123;username&#125;</span>，登录时间：<span class="subst">&#123;time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.localtime(time.time()))&#125;</span>&#x27;</span></span><br><span class="line">        file.write(s)</span><br><span class="line">        file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取日志</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_logininfo</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = file.readlin()</span><br><span class="line">            <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               <span class="built_in">print</span>(line,end = <span class="string">&#x27;&#x27;</span>) </span><br><span class="line">                        </span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> == username <span class="keyword">and</span> <span class="string">&#x27;admin&#x27;</span> == pwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">        write_logininfo(username)</span><br><span class="line">        show_info()</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入操作数字&#x27;</span>))</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;退出成功&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> num == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;查看登录日志&#x27;</span>)</span><br><span class="line">                read_logininfo()</span><br><span class="line">                num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入操作数字：&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;您输入的数字有误&#x27;</span>)</span><br><span class="line">                show_info()</span><br><span class="line">                num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入操作数字：&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;对不起，用户名和密码不正确！&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(time.localtime(time.time()))</span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,time.localtime(time.time()))</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）模拟淘宝客服的自动回复">（2）模拟淘宝客服的自动回复</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;replay.txt文档</span></span><br><span class="line"><span class="string">订单|如果您有任何订单问题，可以登录淘宝账号，点击“我的订单”，查看订单详情</span></span><br><span class="line"><span class="string">物流|如果您有任何物流问题，可以登录淘宝账号，点击“我的订单”，查看商品系统</span></span><br><span class="line"><span class="string">账户|如果您有任何账号问题，可以联系淘宝客服，电话：XXXX-XXXXXX</span></span><br><span class="line"><span class="string">支付|如果您有任何支付问题，可以联系支付宝客服，QQ：XXXXXXXXX</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_answer</span>(<span class="params">question</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;replay.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = file.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:		<span class="comment"># if line ==&#x27;&#x27;到文件末尾退出</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 字符串的分隔</span></span><br><span class="line">            keyword = line.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            reply = line.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> keyword <span class="keyword">in</span> question:</span><br><span class="line">                <span class="keyword">return</span> reply</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *name* == <span class="string">&#x27;*main*&#x27;</span>:</span><br><span class="line">    question = <span class="built_in">input</span>(<span class="string">&#x27;Hi，您好，小蜜在此等主任很久了，有什么烦恼快和小蜜说吧&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> question == <span class="string">&#x27;bye&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 开始在文件中查找</span></span><br><span class="line">        replay = find_answer(question)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> replay:		<span class="comment"># 如果回复的是False，not False则为True</span></span><br><span class="line">            question = <span class="built_in">input</span>(<span class="string">&#x27;小蜜不知道你在说什么，您可以问一些关于订单、物流、账户、支付等问题（退出请输入bye）&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(replay)</span><br><span class="line">            question = <span class="built_in">input</span>(<span class="string">&#x27;小主，您还可以问一些关于订单、物流、账户、支付等问题（退出请输入bye&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小主再见&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(2)--转义字符</title>
    <url>/posts/a3158c16/</url>
    <content><![CDATA[<h2 id="1-转义字符">1. 转义字符</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello \n world&#x27;</span>) 		 	<span class="comment"># \ +转义功能的首字母 n--newline的首字母表示换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello \t world&#x27;</span>) 		 	<span class="comment"># \t 水平制表符，一组4个空格的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;helloooo \t world&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello \r world&#x27;</span>) 			<span class="comment"># \r 回车把hello覆盖</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello \b world&#x27;</span>) 			<span class="comment"># \b 退一个格将o退没了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;http:\\\\www.baidu.com&#x27;</span>) 	<span class="comment"># \\输出一个\，\\\\输出2个\</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  老师说：\’大家好\‘  &#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="2-原字符">2. 原字符</h2>
<p>不希望字符串中的转义字符起作用，字符串前加上<code>r</code>或者<code>R</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello \n world&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p><u>注意事项</u>：最后一个字符不能是反斜杠\，但是是两个\\可以。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(3)--变量、数据类型、标识符</title>
    <url>/posts/98705640/</url>
    <content><![CDATA[<h2 id="1-二进制与字符编码">1. 二进制与字符编码</h2>
<p>计算机只认识0和1。ASCII表来表示符号和数字。</p>
<p><img src="https://static01.imgkr.com/temp/d141123ef9d94013a8e0c3f6a025a7c9.png" alt="ASCII"></p>
<span id="more"></span>
<p>‘A’ 使用了8个位（bit）才能表示出来，在计算机他们叫<em>一个字节（byte）</em>。<br>
$$<br>
\qquad0 \qquad 1\qquad 0\qquad 0\qquad0\qquad0\qquad 0\qquad 1\qquad<br>
$$</p>
<p>1024 byte = 1 kB ； 1024 kB = 1 MB ；</p>
<p>1024 MB = 1 GB ； 1024 GB = 1 TB.</p>
<blockquote>
<p>二进制0，1		ASCII		GB2312		GB18030 	Unicode		UTF-8</p>
</blockquote>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 汉字“乘”与进制数的转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0b100111001011000</span>)) 		 <span class="comment"># 0b代表二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;乘&#x27;</span>))   					<span class="comment"># 得到&#x27;乘&#x27;所代表的十进制数</span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-标识符和保留字">2. 标识符和保留字</h2>
<p>有一些单词被赋予了特定的意义，这些单词在用户给任何对象起名字的时候不允许使用。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)     	<span class="comment"># 查看所有的保留字</span></span><br></pre></td></tr></table></figure></div>
<p><em>标识符</em>是指变量、函数、类、模块和其他对象的名字。</p>
<blockquote>
<p>其规则是：</p>
<ul>
<li>字母、数字、下划线</li>
<li>不能以数字开头</li>
<li>不能是Python的保留字</li>
<li>严格区分大小写</li>
</ul>
</blockquote>
<h2 id="3-变量的定义和使用">3. 变量的定义和使用</h2>
<p><em>变量</em>是内存中一个带标签的盒子。下例中，<code>name</code>表示变量名，=是复制运算符，玛丽亚是值。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;玛丽亚&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标识&#x27;</span>,<span class="built_in">id</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;类型&#x27;</span>,<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;值&#x27;</span>,name)</span><br></pre></td></tr></table></figure></div>
<p><em>变量由三部分组成：</em></p>
<ul>
<li>*标识：*表示对象所存储的内存地址，使用内置函数<code>id(obj)</code>来获取；</li>
<li>*类型：*表示对象的数据类型，使用内置函数<code>type(obj)</code>来获取；</li>
<li>*值：*表示对象所存储的具体数据，使用<code>print(obj)</code>可以将值进行打印输出；</li>
</ul>
<p>当多次复制后，变量名会指向新的空间，旧的空间称为内存垃圾。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;玛丽亚&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">name = <span class="string">&#x27;楚留冰&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-常用的数据类型">4. 常用的数据类型</h2>
<p>常用的数据类型：</p>
<ul>
<li>整数类型（int）：98</li>
<li>浮点数类型（float）：3.14159</li>
<li>布尔类型（bool）：True False</li>
<li>字符串类型（str）：‘人生苦短，我用Python’</li>
</ul>
<h3 id="（1）整数类型integer">（1）整数类型integer</h3>
<p>整数的不同进制表示方法：</p>
<ul>
<li>十进制：默认的进制；</li>
<li>二进制：以 0b 开头；</li>
<li>八进制：以 0o 开头；</li>
<li>十六进制：以 0x 开头。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n1 = <span class="number">90</span></span><br><span class="line">n2 = -<span class="number">76</span></span><br><span class="line">n3 = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(n1,<span class="built_in">type</span>(n1))</span><br><span class="line"><span class="built_in">print</span>(n2,<span class="built_in">type</span>(n2))</span><br><span class="line"><span class="built_in">print</span>(n3,<span class="built_in">type</span>(n3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数可以表示为二进制，十进制，八进制，十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十进制&#x27;</span>,<span class="number">118</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二进制&#x27;</span>,<span class="number">0b10101111</span>) 			 <span class="comment"># 二进制以0b开头，0，1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;八进制&#x27;</span>,<span class="number">0o176</span>) 					 <span class="comment"># 八进制以0o开头，0-7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十六进制&#x27;</span>,<span class="number">0x1EAF</span>) 			    <span class="comment"># 十六进制以0x开头，0-9，A-F</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）浮点数类型float">（2）浮点数类型float</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">1.1</span></span><br><span class="line">n2 = <span class="number">2.2</span></span><br><span class="line">n3 = <span class="number">2.1</span></span><br><span class="line"><span class="built_in">print</span>(n1+n2)   						<span class="comment"># 结果出现很多0，计算不准确，二进制的底层问题，会有误差</span></span><br><span class="line"><span class="built_in">print</span>(n1+n3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal  		<span class="comment"># 导入模块decimal解决不准确的问题</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;1.1&#x27;</span>)+Decimal(<span class="string">&#x27;2.2&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）布尔类型boolean">（3）布尔类型boolean</h3>
<ul>
<li>用来表示真或假的值；</li>
<li><code>True</code>表示真，<code>False</code>表示假；</li>
<li>布尔值可以转化为整数，True-&gt;1，False-&gt;0。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f1 = <span class="literal">True</span></span><br><span class="line">f2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(f1,<span class="built_in">type</span>(f1))</span><br><span class="line"><span class="built_in">print</span>(f2,<span class="built_in">type</span>(f2))</span><br><span class="line"><span class="comment"># 布尔值转化为整数计算</span></span><br><span class="line"><span class="built_in">print</span>(f1+<span class="number">1</span>)  				<span class="comment"># 2   1+1的结果为2，True表示1</span></span><br><span class="line"><span class="built_in">print</span>(f2+<span class="number">1</span>)  				<span class="comment"># 1   0+1的结果为1，False表示0</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（4）字符串类型">（4）字符串类型</h3>
<ul>
<li>字符串类型又被称为不可变的字符序列；</li>
<li>可以使用单引号，双引号，三引号来定义；</li>
<li>单引号和双引号定义的字符串必须在一行；</li>
<li>三引号定义的字符串可以分布在连续的多行。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;人生苦短，我用Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1,<span class="built_in">type</span>(str1))</span><br><span class="line">str2 = <span class="string">&quot;人生苦短，我用Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2,<span class="built_in">type</span>(str2))</span><br><span class="line">str3 = <span class="string">&#x27;&#x27;&#x27;人生苦短，</span></span><br><span class="line"><span class="string">  我用Python&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3,<span class="built_in">type</span>(str3))</span><br><span class="line">str4 = <span class="string">&quot;&quot;&quot;人生苦短，</span></span><br><span class="line"><span class="string">  我用Python&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（5）数据类型的转换">（5）数据类型的转换</h3>
<p><em>为什么需要数据类型的转换？将不同类型的数据拼接到一起。</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name),<span class="built_in">type</span>(age)) 				     	<span class="comment"># 说明name和age的数据类型不同</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#x27;</span> +name+ <span class="string">&#x27;今年&#x27;</span> +<span class="built_in">str</span>(age)+ <span class="string">&#x27;岁&#x27;</span> ) 		<span class="comment"># 将int类型通过str()转换为str类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---str()将其他类型转换成str类型---&#x27;</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">198.8</span></span><br><span class="line">c = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(typr(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b),<span class="built_in">str</span>(c),<span class="built_in">type</span>(<span class="built_in">str</span>(a)),<span class="built_in">type</span>(<span class="built_in">str</span>(b)),<span class="built_in">type</span>(<span class="built_in">str</span>(c)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---int()将其他类型转换成int类型---&#x27;</span>)</span><br><span class="line">s1 = <span class="string">&#x27;128&#x27;</span></span><br><span class="line">f1 = <span class="number">98.7</span></span><br><span class="line">s2 = <span class="string">&#x27;76.77&#x27;</span></span><br><span class="line">ff = <span class="literal">True</span></span><br><span class="line">s3 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s1),<span class="built_in">type</span>(f1),<span class="built_in">type</span>(s2),<span class="built_in">type</span>(ff),<span class="built_in">type</span>(s3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(s1),<span class="built_in">type</span>(<span class="built_in">int</span>(s1)))  				<span class="comment"># str转换成int类型，字符串为数字串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(f1),<span class="built_in">type</span>(<span class="built_in">int</span>(f1)))  				<span class="comment"># float转换成int类型，只截取整数部分，舍去小数部分</span></span><br><span class="line"><span class="comment">#print(int(s2),type(int(s2)))  				# str转换成int类型报错，因为字符串为小数串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(ff),<span class="built_in">type</span>(<span class="built_in">int</span>(ff)))  				<span class="comment"># bool转换成int类型</span></span><br><span class="line"><span class="comment">#print(int(s3),type(int(s3)))  				# str转换成int类型报错，字符串必须是数字串且是整数，非数字串不允许转换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---float()函数，将其他数据类型转换成float类型---&#x27;</span>)</span><br><span class="line">s4 = <span class="string">&#x27;128.96&#x27;</span></span><br><span class="line">s5 = <span class="string">&#x27;76&#x27;</span></span><br><span class="line">ff1 = <span class="literal">True</span></span><br><span class="line">s6 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">i = <span class="number">98</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s4),<span class="built_in">type</span>(s5),<span class="built_in">type</span>(s6),<span class="built_in">type</span>(ff1),<span class="built_in">type</span>(i))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(s4),<span class="built_in">type</span>(<span class="built_in">float</span>(s4)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(s5),<span class="built_in">type</span>(<span class="built_in">float</span>(s5)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(ff1),<span class="built_in">type</span>(<span class="built_in">float</span>(ff1)))</span><br><span class="line"><span class="comment">#print(float(s6),type(float(s6)))  			# 字符串中数据为非数字串，不允许转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(i),<span class="built_in">type</span>(<span class="built_in">float</span>(i)))</span><br></pre></td></tr></table></figure></div>
<h2 id="5-Python中的注释">5. Python中的注释</h2>
<p><em>注释</em>是在代码中对代码的功能进行解释说明的标注性文字，可以提高代码的可读性，注释的内容会被Python解释器忽略。通常包含三种类型的注释：</p>
<ul>
<li>单行注释：以<code>#</code>开头，直至换行结束；</li>
<li>多行注释：并没有单独的多行注释标记，将一对三引号之间的代码称为多行注释；</li>
<li>中文编码声明注释：在文件开头加上中文声明注释，用以指定源码文件的编码格式。（Python3基本用不到）</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入功能（单行注释）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;嘿嘿，</span></span><br><span class="line"><span class="string">我是多行注释&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(4)--运算符</title>
    <url>/posts/7699b75/</url>
    <content><![CDATA[<h2 id="1-Python的输入函数input">1. Python的输入函数input()</h2>
<p><code>input()</code>函数的基本使用：<code>present=input('大圣想要什么礼物呢？')</code></p>
<p>其中<code>present</code>是变量，<code>=</code>是赋值运算符，将输入函数的结果赋值给变量<code>present</code>，<code>input</code>函数是一个输入函数，需要输入回答。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入函数input</span></span><br><span class="line">present = <span class="built_in">input</span>(<span class="string">&#x27;大圣想要什么礼物呢？&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(present,<span class="built_in">type</span>(present))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求从键盘录入两个整数，计算两个整数的和</span></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个加数：&#x27;</span>)</span><br><span class="line">a = <span class="built_in">int</span>(a)</span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&#x27;请输入另一个加数：&#x27;</span>)</span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(a+b)   				<span class="comment"># 对str类型的两个量进行连接,对int类型的两个量进行计算</span></span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="2-Python中的运算符">2. Python中的运算符</h2>
<p>算术运算符（标准算术运算符，取余运算符，幂运算符）</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)     <span class="comment"># 加法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>-<span class="number">1</span>)     <span class="comment"># 减法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>*<span class="number">4</span>)     <span class="comment"># 乘法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span>/<span class="number">2</span>)    <span class="comment"># 除法运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span>//<span class="number">2</span>)   <span class="comment"># 整除运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span>%<span class="number">2</span>)    <span class="comment"># 取余运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>*<span class="number">3</span>)    <span class="comment"># 幂运算，2的3次方</span></span><br><span class="line"><span class="comment"># 一正一负整除运算  向下取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span>//<span class="number">4</span>)     <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">9</span>//-<span class="number">4</span>)   <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span>//-<span class="number">4</span>)    <span class="comment">#-3</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">9</span>//<span class="number">4</span>)    <span class="comment">#-3</span></span><br><span class="line"><span class="comment"># 一正一负取余运算  公式:余数=被除数-除数*商</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span>%-<span class="number">4</span>)     <span class="comment"># 9-(-4)*(-3)=-3</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">9</span>%<span class="number">4</span>)     <span class="comment"># -9-4*(-3)=3</span></span><br></pre></td></tr></table></figure></div>
<p>赋值运算符<code>=</code></p>
<ul>
<li>执行顺序：从右到左</li>
<li>支持链式赋值，<code>a = b = c = 20</code></li>
<li>支持参数赋值， <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>//=</code> <code>%=</code></li>
<li>支持系列解包赋值，<code>a,b,c = 20,30,40</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值运算符</span></span><br><span class="line">i = <span class="number">3</span>+<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(i)  				<span class="comment"># 运算顺序从右到左</span></span><br><span class="line">a = b = c = <span class="number">20</span> 			<span class="comment"># 链式赋值</span></span><br><span class="line"><span class="built_in">print</span>(a,<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(b,<span class="built_in">id</span>(b))</span><br><span class="line"><span class="built_in">print</span>(c,<span class="built_in">id</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---支持参数赋值---&#x27;</span>)</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">a += <span class="number">30</span>  				<span class="comment"># 相当于a=a+30</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a -= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a *= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)   				<span class="comment"># int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line">a /= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  		<span class="comment"># float</span></span><br><span class="line">a //= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line">a %= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---解包赋值---&#x27;</span>)</span><br><span class="line">a,b,c = <span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---交换两个变量的值---&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">a,b = 10,20</span></span><br><span class="line"><span class="string">print(&#x27;</span>交换之前：<span class="string">&#x27;,a,b)</span></span><br><span class="line"><span class="string">a,b = b,a #交换</span></span><br><span class="line"><span class="string">print(&#x27;</span>交换之后：<span class="string">&#x27;,a,b)</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-比较运算符">3. 比较运算符</h2>
<p><em>比较运算符</em>对变量或表达式的结果进行大小、真假等比较。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a,b = <span class="number">10</span>,<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&gt;b吗？&#x27;</span>,a&gt;b)   			<span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&lt;b吗？&#x27;</span>,a&lt;b)   			<span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&lt;=b吗？&#x27;</span>,a&lt;=b)  			<span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&gt;=b吗？&#x27;</span>,a&gt;=b)  			<span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a==b吗？&#x27;</span>,a==b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a!=b吗？&#x27;</span>,a!=b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;一个 = 称为赋值运算符， == 称为比较运算符</span></span><br><span class="line"><span class="string">  一个变量由三部分组成，标识(id)，类型(type)，值(value)</span></span><br><span class="line"><span class="string">  == 比较的是值还是标识呢？  答案是比较的是值</span></span><br><span class="line"><span class="string">  比较对象的标识使用 is</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a==b)   					<span class="comment"># True  说明a与b的value相等</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) 					<span class="comment"># True  说明a与b的id标识相等</span></span><br><span class="line"></span><br><span class="line">lst1=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">lst2=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(lst1 == lst2) 			<span class="comment"># value   --True</span></span><br><span class="line"><span class="built_in">print</span>(lst1 <span class="keyword">is</span> lst2)  			<span class="comment"># id      --False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(lst1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(lst2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b)        		<span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(lst1 <span class="keyword">is</span> <span class="keyword">not</span> lst2)  		<span class="comment"># True</span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-布尔运算符">4. 布尔运算符</h2>
<p><em>布尔运算符</em>对于布尔值之间的运算。<code>and</code>,<code>or</code>,<code>not</code>,<code>in</code>,<code>not in</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 布尔运算符</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----and----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">and</span> b==<span class="number">2</span>)  				<span class="comment"># True and True  --&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">and</span> b&lt;<span class="number">2</span>)   				<span class="comment"># True and False  --&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(a!=<span class="number">1</span> <span class="keyword">and</span> b==<span class="number">2</span>)  				<span class="comment"># False and True  --&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(a!=<span class="number">1</span> <span class="keyword">and</span> b!=<span class="number">2</span>)  				<span class="comment"># False and False --&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----or----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">or</span> b==<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">or</span> b&lt;<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a!=<span class="number">1</span> <span class="keyword">or</span> b==<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a!=<span class="number">1</span> <span class="keyword">or</span> b!=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----not-----&#x27;</span>)</span><br><span class="line">f = <span class="literal">True</span></span><br><span class="line">f2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> f)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> f2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----in与not in------&#x27;</span>)</span><br><span class="line">s = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure></div>
<h2 id="5-位运算符">5. 位运算符</h2>
<p><em>位运算符</em>将数据转换成二进制进行计算。</p>
<ul>
<li>位与<code>&amp;</code>：对应数位都是1，结果数位才是1，否则为0</li>
<li>位或<code>|</code>：对应数位都是0，结果数位才是0，否则为1</li>
<li>左移位<code>&lt;&lt;</code>：高位溢出舍弃，低位补0</li>
<li>右移位<code>&gt;&gt;</code>：低位溢出舍弃，高位补0</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &amp; <span class="number">8</span>)  				<span class="comment"># 按位与</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> | <span class="number">8</span>)  				<span class="comment"># 按位或</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &lt;&lt; <span class="number">1</span>) 				<span class="comment"># 向左移动1位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &gt;&gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="6-Python中的运算符优先级">6. Python中的运算符优先级</h2>
<p><code>*</code> <code>*,/,//,%</code> <code>+,-</code> <code>&lt;&lt;,&gt;&gt;</code> <code>&amp;</code> <code>|</code> <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code> <code>and</code> <code>or</code> <code>=</code></p>
<blockquote>
<p>算术 → 位 → 比较（True False）→ 布尔 → 赋值=</p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(5)--结构</title>
    <url>/posts/bbce055/</url>
    <content><![CDATA[<h2 id="1-程序的组织结构">1. 程序的组织结构</h2>
<p>任何简单或复杂的算法都可以由顺序结构、选择结构和循环结构这三种基本结构组合而成。</p>
<h2 id="2-顺序结构">2. 顺序结构</h2>
<p>程序从上到下顺序地执行代码，中间没有任何地判断和跳转，直到程序结束。</p>
<blockquote>
<p>程序开始 → 代码1 → 代码2 → … → 代码N → 程序结果</p>
</blockquote>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;把大象装冰箱一共分几步&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------程序开始--------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.把冰箱门打开&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.把大象放到冰箱里&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.把冰箱门关上&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------程序结束---------&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="3-对象的布尔值">3. 对象的布尔值</h2>
<p>Python一切皆对象，所有对象都有一个布尔值，获取对象地布尔值使用内置函数<code>bool()</code></p>
<p>以下对象地布尔值为<code>False</code></p>
<ul>
<li>False</li>
<li>数值0</li>
<li>None</li>
<li>空字符串</li>
<li>空列表</li>
<li>空元组</li>
<li>空字典</li>
<li>空集合</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试对象地布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------布尔值均为False---------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))      			<span class="comment"># 空列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">list</span>()))  			<span class="comment"># 空列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(()))      			<span class="comment"># 空元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">tuple</span>())) 			<span class="comment"># 空元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(&#123;&#125;))      			<span class="comment"># 空字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">dict</span>())) 		 	<span class="comment"># 空字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">set</span>()))   			<span class="comment"># 空集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------布尔值为True-------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;helloworld&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="4-选择结构">4. 选择结构</h2>
<p>程序根据判断条件地布尔值选择性地执行部分代码，明确地让计算机知道在什么条件下该去做什么。</p>
<h3 id="（1）单分支if结构">（1）单分支<code>if</code>结构</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">money = <span class="number">1000</span>							 <span class="comment"># 余额</span></span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入取款金额：&#x27;</span>))			<span class="comment"># 取款金额</span></span><br><span class="line"><span class="comment"># 判断余额是否充足</span></span><br><span class="line"><span class="keyword">if</span> money &gt;= s:</span><br><span class="line">  money = money - s</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;取款成功，余额为：&#x27;</span>,money)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）双分支if-else结构">（2）双分支<code>if...else</code>结构</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;从键盘录入一个整数，编写程序使计算机判断奇偶 &#x27;&#x27;&#x27;</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">  <span class="built_in">print</span>(num,<span class="string">&#x27;是偶数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(num,<span class="string">&#x27;是奇数&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）多分支if-elif-else结构">（3）多分支<code>if...elif...else</code>结构</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;多分支结构，多选一执行</span></span><br><span class="line"><span class="string">  从键盘录入一个整数成绩</span></span><br><span class="line"><span class="string">    90-100  A</span></span><br><span class="line"><span class="string">    80-89   B</span></span><br><span class="line"><span class="string">    70-79  C</span></span><br><span class="line"><span class="string">    60-69  D</span></span><br><span class="line"><span class="string">    0-59  E</span></span><br><span class="line"><span class="string">    小于0或大于100 为非法数据（不是成绩的有效范围）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个成绩：&#x27;</span>))</span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span> <span class="keyword">and</span> score &lt;= <span class="number">100</span>:    <span class="comment"># Python语句独有特点也可写作 if 90 &lt;= score &lt;= 100: </span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;A级&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt;= <span class="number">89</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;B级&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt;= <span class="number">79</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;C级&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> score &lt;= <span class="number">69</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;D级&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">50</span> <span class="keyword">and</span> score &lt;= <span class="number">59</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;E级&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;对不起，成绩有误，不在成绩的有效范围&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）if语句的嵌套">（4）if语句的嵌套</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;会员    &gt;= 200   8折</span></span><br><span class="line"><span class="string">          &gt;= 100    9折</span></span><br><span class="line"><span class="string">          不打折</span></span><br><span class="line"><span class="string">  非会员   &gt;=200     9.5折</span></span><br><span class="line"><span class="string">          不打折&#x27;&#x27;&#x27;</span></span><br><span class="line">answer = <span class="built_in">input</span>(<span class="string">&#x27;您是会员吗？y/n \n&#x27;</span>)</span><br><span class="line">money = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的购物金额：&#x27;</span>))</span><br><span class="line"><span class="comment">#外层判断是否是会员</span></span><br><span class="line"><span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:   <span class="comment">#会员</span></span><br><span class="line">  <span class="keyword">if</span> money &gt;= <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打8折，付款金额为：&#x27;</span>,money*<span class="number">0.8</span>,<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">  <span class="keyword">elif</span> money &gt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打9折，付款金额为：&#x27;</span>,money*<span class="number">0.9</span>,<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不打折，付款金额为：&#x27;</span>,money,<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:              <span class="comment">#非会员</span></span><br><span class="line">  <span class="keyword">if</span> money &gt;= <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打9.5折，付款金额为：&#x27;</span>,money*<span class="number">0.95</span>,<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不打折，付款金额为：&#x27;</span>,money,<span class="string">&#x27;元&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（5）条件表达式">（5）条件表达式</h3>
<p><em>条件表达式</em>是<code>if...else</code>的简写，语法结构为：<code>x if 判断条件 else y</code></p>
<p>运算规则：如果判断条件的布尔值为True，条件表达式的返回值为x，否则条件表达式的返回值为False。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;从键盘录入两个整数，比较两个整数的大小&#x27;&#x27;&#x27;</span></span><br><span class="line">num_a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个整数：&#x27;</span>))</span><br><span class="line">num_b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个整数：&#x27;</span>))</span><br><span class="line"><span class="comment">#比较大小</span></span><br><span class="line"><span class="keyword">if</span> num_a &gt;= num_b:</span><br><span class="line">  <span class="built_in">print</span>(num_a,<span class="string">&#x27;大于等于&#x27;</span>,num_b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(num_a,<span class="string">&#x27;小于&#x27;</span>,num_b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------使用条件表达式进行比较-------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(( <span class="built_in">str</span>(num_a) + <span class="string">&#x27;大于等于&#x27;</span> + <span class="built_in">str</span>(num_b))  <span class="keyword">if</span> num_a&gt;=num_b <span class="keyword">else</span> <span class="built_in">str</span>(num_a)+<span class="string">&#x27;小于&#x27;</span>+<span class="built_in">str</span>(num_b))</span><br></pre></td></tr></table></figure></div>
<h2 id="5-pass空语句">5. pass空语句</h2>
<p>语句什么都不做，只是一个占位符，用在语法上需要语句的地方。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pass语句</span></span><br><span class="line">answer = <span class="built_in">input</span>(‘您是会员吗？y/n’)</span><br><span class="line"><span class="keyword">if</span> answer == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(6)--循环及嵌套</title>
    <url>/posts/a0b09048/</url>
    <content><![CDATA[<h2 id="1-range-函数的使用">1. range()函数的使用</h2>
<p><em>range()函数</em>用于生成一个整数序列，其返回值是一个迭代器对象。</p>
<p>创建range对象的三种方式：</p>
<ul>
<li><code>range(stop)</code>:创建一个[0,stop]之间的整数序列，步长为1</li>
<li><code>range(start,stop)</code>:创建一个[start,stop]之间的整数序列，步长为1</li>
<li><code>range(start,stop,step)</code>:创建一个[start,stop]之间的整数序列，步长为step<br>
range 类型的优点：不管 range 对象表示的整数序列有多长，所有 range 对象占用的内存空间都是相同的，因为仅仅需要存储 start,stop 和 step，只有当用到range 对象时，才会去计算序列中的相关元素。用 in 和 not in 来判断整数序列中是否存在指定的整数。</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range的三种创建方式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 第一种创建方式，只有一个参数&#x27;&#x27;&#x27;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">10</span>)     						<span class="comment"># [0 1 2 3 4 5 6 7 8 9]  默认从0开始，步长为1 </span></span><br><span class="line"><span class="built_in">print</span>(r)    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))    						<span class="comment"># 用于查看range对象中的整数序列  --list是列表函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 第二种创建方式，括号里给了两个参数&#x27;&#x27;&#x27;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)   						<span class="comment"># 指定了起始值和终止值，区间左闭右开[1,10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 第三种创建方式，括号里给出三个参数&#x27;&#x27;&#x27;</span></span><br><span class="line">r = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 判断指定的整数在序列中是否存在in，not in&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> r)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> <span class="keyword">in</span> r)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> r)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> <span class="keyword">not</span> <span class="keyword">in</span> r)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>,<span class="number">1</span>))   				<span class="comment"># 未使用时，上下两个所占内存一样</span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-循环结构">2. 循环结构</h2>
<p><em>循环</em>时反复作同一件事情的情况，用于次数不固定的循环，初始条件不成立，一次都不执行。</p>
<h3 id="（1）while循环">（1）while循环</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment"># 判断条件表达式</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">10</span>:     							<span class="comment"># if改为while重新运行，结果是1 2 3 4 5 6 7 8 9</span></span><br><span class="line">  <span class="built_in">print</span>(a)</span><br><span class="line">  a += <span class="number">1</span></span><br><span class="line"><span class="comment"># if与while的区别是：if判断一次，条件True执行一行；while是判断N+1次，条件是True执行N次</span></span><br></pre></td></tr></table></figure></div>
<p>四步循环法：</p>
<ul>
<li>初始化变量</li>
<li>条件判断</li>
<li>条件执行体（循环体）</li>
<li>改变变量<br>
初始化的变量和条件判断的变量与改变的变量为同一个</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算0到4的累加和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>            						<span class="comment"># 用于存储累加和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;初始化变量为0&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;条件判断&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">5</span>:</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;条件执行体（循环体）&#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="built_in">sum</span> += a</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;改变变量&#x27;&#x27;&#x27;</span></span><br><span class="line">  a += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;和为&#x27;</span>,<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;计算1到100之间的偶数和&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>   								<span class="comment"># 用于存储偶数和</span></span><br><span class="line">a = <span class="number">1</span>             						<span class="comment"># 初始化变量</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">100</span>    						<span class="comment"># 条件判断</span></span><br><span class="line">  <span class="comment"># 条件执行体（求和）</span></span><br><span class="line">  <span class="keyword">if</span> a%<span class="number">2</span> == <span class="number">0</span>:    						<span class="comment"># if not bool(a%2):   意味着0的布尔值为False </span></span><br><span class="line">    <span class="built_in">sum</span> += a</span><br><span class="line">  a += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1到100的偶数和&#x27;</span>,<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）for-in循环">（2）for-in循环</h3>
<p>语法结构为：<code>for 自定义的变量 in 可迭代对象 循环体</code></p>
<ul>
<li>in表示从（字符串、序列等）中依次取值，又称为遍历</li>
<li>for-in遍历的对象必须是可迭代对象</li>
<li>循环体内不需要访问自定义变量，可以将自定义变量替代为下划线</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>  					<span class="comment"># 第一次取出来的是P，赋值给item，输出</span></span><br><span class="line">  <span class="built_in">print</span>(item)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># range()产生一个整数序列，也是一个可迭代对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果在循环体中不需要使用自定义变量，可将自定义变量写为_</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;人生苦短，我用Python&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;使用for循环计算1到100之间的偶数和&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">  <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> += item</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1到100之间的偶数和为：&#x27;</span>,<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;输出100到999之间的水仙花数</span></span><br><span class="line"><span class="string">  举例 153 =3*3*3+5*5*5</span></span><br><span class="line"><span class="string">  1*1*1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">  ge = item %<span class="number">10</span></span><br><span class="line">  shi = item // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">  bai = item // <span class="number">100</span></span><br><span class="line">  <span class="built_in">print</span>(bai,shi,ge)</span><br><span class="line">  <span class="keyword">if</span> ge*<span class="number">3</span>+shi*<span class="number">3</span>+bai*<span class="number">3</span> == item:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）break、continue与else语句">（3）break、continue与else语句</h3>
<p><em>break语句</em>用于结束循环结构，通常与分支结构if一起使用</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;从键盘录入密码，最多录入三次，如果正确就结束循环&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入四位数密码：&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> pwd == <span class="string">&#x27;8888&#x27;</span>；</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码不正确&#x27;</span>)  </span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">3</span>:</span><br><span class="line">  pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入四位数密码：&#x27;</span>)   <span class="comment"># 条件执行体</span></span><br><span class="line">  <span class="keyword">if</span> pwd == <span class="string">&#x27;8888&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码不正确&#x27;</span>)</span><br><span class="line">  a += <span class="number">1</span>                           <span class="comment"># 改变变量</span></span><br></pre></td></tr></table></figure></div>
<p><em>continue语句</em>用于结束当前循环，进入下一次循环，通常与分支结构中的if一起使用</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;要求输出1到50之间所有5的倍数：和5的余数为0的数</span></span><br><span class="line"><span class="string">  什么样的数不是5的倍数？与5的余数不是0的数&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">  <span class="keyword">if</span> item % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------使用continue----------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">  <span class="keyword">if</span> item % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<p><em>else语句</em>与其他语句配合使用。<br>
与if配合使用，if条件表达式不成立时执行else；与for和while配合使用时，没有碰到break时执行else。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> pwd == <span class="string">&#x27;8888&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码不正确&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;对不起，三次密码均输入错误。&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">3</span>；</span><br><span class="line">  <span class="keyword">if</span> pwd == <span class="string">&#x27;8888&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码不正确&#x27;</span>)</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;改变变量&#x27;&#x27;&#x27;</span></span><br><span class="line">  a += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;对不起，三次密码均输入错误&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-嵌套循环">3. 嵌套循环</h2>
<p><em>嵌套循环</em>时循环结构中又嵌套了另外的完整的循环结构，其中内层循环作为外层循环的循环体执行。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;输出一个三行四列的矩形&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):       				<span class="comment"># 行表，执行三次，一次是一行</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)；  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end = <span class="string">&#x27;\t&#x27;</span>)  				<span class="comment"># 不执行输出</span></span><br><span class="line">  <span class="built_in">print</span>()                  				<span class="comment"># 打行</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;九九乘法表&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,<span class="string">&#x27;*&#x27;</span>,j,<span class="string">&#x27;=&#x27;</span>,i*j,end = <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></div>
<p><em>二重循环中的break和continue用于控制本层循环。</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/e27097e833ec6dd9a7236b79c48217b8-%E4%BA%8C%E9%87%8D%E5%BE%AA%E7%8E%AF-c106fa.png" alt="二重循环"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;流程控制语句break与continue在二重循环中的使用&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):     					<span class="comment"># 外层循环执行5次</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>，<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="comment">#continue</span></span><br><span class="line">    <span class="built_in">print</span>(j)</span><br><span class="line">    <span class="comment">#print(j,end = &#x27;\t&#x27;)</span></span><br><span class="line">  <span class="comment">#print()</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(7)--列表</title>
    <url>/posts/4bfaafb7/</url>
    <content><![CDATA[<p>为什么需要列表？</p>
<ul>
<li>变量可以存储一个元素，而列表是一个“大容器”可以存储N多个元素，程序可以方便地对这些数据进行整体操作</li>
<li>列表相当于其它语言中地数组</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>           				  	<span class="comment"># 变量存储地是一个对象的引用</span></span><br><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">98</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure></div>
<h2 id="1-列表的创建与删除">1. 列表的创建与删除</h2>
<p>创建方式：1.使用中括号；2.调用内置函数<code>list()</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">98</span>]         	<span class="comment"># 使用中括号创建列表</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst2 = <span class="built_in">list</span>([<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">97</span>])  	<span class="comment"># 使用内置函数list()创建列表</span></span><br></pre></td></tr></table></figure></div>
<p>列表的特点：</p>
<ul>
<li>列表元素按顺序有序排序</li>
<li>索引映射唯一数据</li>
<li>列表可以存储重复数据</li>
<li>任意数据类型混存</li>
<li>根据需要动态分配和回收内存</li>
</ul>
<span id="more"></span>
<h2 id="2-列表的查询操作">2. 列表的查询操作</h2>
<ul>
<li>获取列表中指定元素的索引</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">98</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst,index(<span class="string">&#x27;hello&#x27;</span>))    				<span class="comment"># 列表存在多个相同元素，只返回列表第一个索引</span></span><br><span class="line"><span class="comment"># print(lst,index(&#x27;Python&#x27;))   				# 查询元素不存在ValueError:&#x27;Python&#x27; is not in list</span></span><br><span class="line"><span class="comment"># print(lst,index(&#x27;hello&#x27;,1,3)) ValueError</span></span><br><span class="line"><span class="built_in">print</span>(lst,index(<span class="string">&#x27;hello&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>))  				<span class="comment"># 指定在start到stop之间进行查找</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>获取列表中的单个元素</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">98</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="number">234</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">2</span>])   							<span class="comment"># 获取索引为2的元素</span></span><br><span class="line"><span class="built_in">print</span>(lst[-<span class="number">3</span>])  							<span class="comment"># 获取索引为-3的元素</span></span><br><span class="line"><span class="comment">#print(lst[10]) 							# IndexError:list index out of range超出索引范围，真想从0到N-1，逆向从-N到-1</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>获取列表中的多个元素：列表名<code>[start:stop:step]</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">1</span>])    						<span class="comment"># start=1 stop=6 step=1切片切出一个新列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表&#x27;</span>，<span class="built_in">id</span>(lst))</span><br><span class="line">lst2 = lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;切的片段:&#x27;</span>,<span class="built_in">id</span>(lst2))</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>:])    						<span class="comment"># step不写默认从1开始</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">6</span>:<span class="number">2</span>])    						<span class="comment"># start不写默认从0开始</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>::<span class="number">2</span>])    						<span class="comment"># stop不写默认最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------step为负数的情况-------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表：&#x27;</span>,lst)</span><br><span class="line"><span class="built_in">print</span>(lst[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">7</span>::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">6</span>:<span class="number">0</span>:-<span class="number">2</span>])</span><br></pre></td></tr></table></figure></div>
<ul>
<li>判断指定元素在列表中是否存在</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>列表元素的遍历<br>
可迭代对象：字符串和列表</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">  <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-列表元素的增、删、改操作">3. 列表元素的增、删、改操作</h2>
<h3 id="（1）列表元素的增加操作">（1）列表元素的增加操作</h3>
<ul>
<li><code>append()</code>：在列表的末尾添加一个元素</li>
<li><code>extend()</code>：在列表的末尾至少添加一个元素</li>
<li><code>insert()</code>：在列表的任意位置添加一个元素</li>
<li>切片：在列表的任意位置添加至少一个元素</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向列表的末尾添加一个元素</span></span><br><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加元素之前&#x27;</span>，lst)</span><br><span class="line">lst.append(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加元素之后&#x27;</span>,lst,<span class="built_in">id</span>(lst))</span><br><span class="line">lst2 = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>]</span><br><span class="line">lst.append(lst2)        				<span class="comment"># 将lst2作为一个元素添加到列表的末尾</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst.extend(lst2)        				<span class="comment"># 向列表的末尾一次性添加多个元素  </span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst.insert(<span class="number">1</span>,<span class="number">90</span>)        				<span class="comment"># 在任意位置添加一个元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst3 = [<span class="literal">True</span>,<span class="literal">False</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">lst[<span class="number">1</span>:] = lst3          				<span class="comment"># 切片替换</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）列表的删除操作">（2）列表的删除操作</h3>
<ul>
<li><code>remove()</code>：一次删除一个元素；重复元素只删除第一个；元素不存在抛出ValueError</li>
<li><code>pop()</code>：删除一个指定索引位置上的元素；指定索引不存在抛出IndexError；不指定索引，删除列表最后一个元素</li>
<li>切片：一次至少删除一个元素</li>
<li><code>clear()</code>：清空列表</li>
<li><code>del()</code>：删除列表</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">30</span>]</span><br><span class="line">lst.remove(<span class="number">30</span>)          		<span class="comment"># 重复元素只删除第一个</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># lst.remove(100)         		# 移除元素不存在ValueError</span></span><br><span class="line"><span class="comment"># pop根据索引移除元素</span></span><br><span class="line">lst.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># lst.pop(8)              		# IndexError</span></span><br><span class="line">lst.pop()                		<span class="comment"># 默认删除最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------切片操作删除至少一个元素，将产生一个新的列表对象-----------&#x27;</span>)</span><br><span class="line">new_lst = lst[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表&#x27;</span>,lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;新列表&#x27;</span>,new_lst)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;不产生新的列表对象，而是删除原列表的内容&#x27;&#x27;&#x27;</span></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = []</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;清除列表中的所有元素&#x27;&#x27;&#x27;</span></span><br><span class="line">lst.clear()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;del语句将列表对象删除&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">del</span> lst</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）列表元素的修改操作">（3）列表元素的修改操作</h3>
<ul>
<li>为指定索引的元素赋予一个新值</li>
<li>为指定的切片赋予一个新值</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"><span class="comment"># 一次修改一个值</span></span><br><span class="line">lst[<span class="number">2</span>] = <span class="number">100</span>      </span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-列表元素的排序">4. 列表元素的排序</h2>
<ul>
<li>调用<code>sort()</code>方法，列表中的所有元素默认按照从小到大的顺序进行排序，可以指定<code>reverse=True</code>进行降序排序</li>
<li>调用内置函数<code>sorted()</code>，可以指定<code>reverse=True</code>进行降序排序，原列表不发生改变</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">20</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">98</span>,<span class="number">54</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序前的列表&#x27;</span>,lst,<span class="built_in">id</span>(lst))</span><br><span class="line"><span class="comment"># 调用列表对象的sort方法，默认升序</span></span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序后的列表&#x27;</span>,lst,<span class="built_in">id</span>(lst))</span><br><span class="line"><span class="comment"># 指定参数进行降序</span></span><br><span class="line">lst.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst.sort(reverse = <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------调用内置函数sorted()对列表对象进行排序，产生一个新的列表对象----&#x27;</span>)</span><br><span class="line">lst = [<span class="number">20</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">98</span>,<span class="number">54</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原列表&#x27;</span>,lst)</span><br><span class="line">new_lst = <span class="built_in">sorted</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(new_lst)</span><br><span class="line">desc_lst = <span class="built_in">sorted</span>(lst,reverse =<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(desc_lst)</span><br></pre></td></tr></table></figure></div>
<h2 id="5-列表推导式">5. 列表推导式</h2>
<p><em>列表生成式</em>简称生成列表的公式。<br>
语法格式：<code>[i*i for i in range(1,10)]</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">lst1 = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(lst1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;列表中的元素的值为2 4 6 8 10 &#x27;&#x27;&#x27;</span></span><br><span class="line">lst2 = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst2)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(8)--字典</title>
    <url>/posts/575736df/</url>
    <content><![CDATA[<p>什么是<em>字典</em>？Python内置的数据结构之一，与列表一样是一个可变序列；以键值对的方式存储数据，字典是一个无序的序列。</p>
<p><code>scores = &#123;'张三':100,'李四':98,'王五':45&#125;</code></p>
<p><em>字典的实现原理</em>：字典的实现原理与查字典类似，查字典是先根据部首或拼音查找对应的页码，Python中的字典是根据key查找Value所在的位置。</p>
<span id="more"></span>
<h2 id="1-创建字典">1. 创建字典</h2>
<ul>
<li>使用花括号：<code>scores=&#123;'张三':100,'李四':98,'王五':45&#125;</code></li>
<li>使用dict内置函数：<code>dict(name='jack',age =20)</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;使用&#123;&#125;创建字典&#x27;&#x27;&#x27;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;王五&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scores))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;使用内置函数dict&#x27;&#x27;&#x27;</span></span><br><span class="line">student = <span class="built_in">dict</span>(name=<span class="string">&#x27;jack&#x27;</span>,age=<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(student)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;空字典&#x27;&#x27;&#x27;</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-字典中元素的获取">2. 字典中元素的获取</h2>
<p>[]取值与使用get()取值的区别：</p>
<ul>
<li>[]如果字典中不存在指定的key，抛出keyError异常</li>
<li><code>get()</code>方法取值，如果字典中不存在指定的key，并不会抛出KeyError而是返回None，可以通过参数设置默认的Value，以便指定的key不存在时返回</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;获取字典中的值&#x27;&#x27;&#x27;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;王五&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 第一种方式，使用[]&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;张三&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;陈六&#x27;</span>])         				<span class="comment"># KeyError</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;第二种方式 使用get&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(scores,get(<span class="string">&#x27;张三&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(scores,get(<span class="string">&#x27;陈六&#x27;</span>))     				<span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(scores,get(<span class="string">&#x27;麻七&#x27;</span>,<span class="number">99</span>))  				<span class="comment"># 99是在查找麻七对应的value不存在时，提供的一个返回值</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-字典的常用操作">3. 字典的常用操作</h2>
<ul>
<li>key的判断：<code>in</code>和<code>not in</code></li>
<li>字典元素的删除del</li>
<li>字典元素的新增</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;key的判断&#x27;&#x27;&#x27;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;王五&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">in</span> scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> scores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> scores[<span class="string">&#x27;张三&#x27;</span>]    				<span class="comment"># 删除指定的key-value对</span></span><br><span class="line"><span class="comment">#scores.clear()      				 # 清空字典元素</span></span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line">scores[<span class="string">&#x27;陈六&#x27;</span>] = <span class="number">98</span>   				<span class="comment"># 新增元素</span></span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line">scores[<span class="string">&#x27;陈六&#x27;</span>] = <span class="number">100</span>  				<span class="comment"># 修改元素</span></span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure></div>
<p>获取字典视图的三个方法：<code>keys</code>、<code>values</code>、<code>items</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;王五&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line"><span class="comment"># 获取所有的key</span></span><br><span class="line">keys = scores.keys()</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(keys))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(keys))  				<span class="comment"># 将所有的key组成的视图转成列表</span></span><br><span class="line"><span class="comment"># 获取所有的Value</span></span><br><span class="line">values = scores.values()</span><br><span class="line"><span class="built_in">print</span>(values)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(values))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(values))</span><br><span class="line"><span class="comment"># 获取所有的key-value对</span></span><br><span class="line">items = scores.items()</span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(items))   			<span class="comment"># 转换之后的列表元素为元组</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典元素的遍历</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;张三&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;李四&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;王五&#x27;</span>:<span class="number">45</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scores:</span><br><span class="line">  <span class="built_in">print</span>(item,scores[item],scores.get(item))</span><br></pre></td></tr></table></figure></div>
<h2 id="4-字典的特点">4. 字典的特点</h2>
<ul>
<li>字典中的所有元素都是一个<code>key-value</code>对，key不允许重复，value可以重复</li>
<li>字典中的元素是无序的</li>
<li>字典中的key必须是不可变对象</li>
<li>字典也可以根据需要动态地伸缩</li>
<li>字典会浪费较大地内存，是一个使用空间换时间地数据结构</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;nikename&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></div>
<h2 id="5-字典生成式">5. 字典生成式</h2>
<p>内置函数<code>zip()</code>:用于将可迭代对象作为参数，将对象中对应地元素打包成一个元组，然后返回由这些元组组成的列表</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Fruits&#x27;</span>,<span class="string">&#x27;Books&#x27;</span>,<span class="string">&#x27;Others&#x27;</span>]</span><br><span class="line">prices = [<span class="number">96</span>,<span class="number">78</span>,<span class="number">85</span>,<span class="number">100</span>,<span class="number">120</span>]</span><br><span class="line">d = &#123;item.upper():prices  <span class="keyword">for</span> item,prices <span class="keyword">in</span> <span class="built_in">zip</span>(items,prices)&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学习笔记(9)--元组、集合</title>
    <url>/posts/3c20665e/</url>
    <content><![CDATA[<h2 id="1-元组">1. 元组</h2>
<p><em>元组</em>是Python内置的数据结构之一，属于不可变序列。<code>t=('Python','hello',90)</code></p>
<p>不可变序列与可变序列:</p>
<ul>
<li>不可变序列（没有增删改操作）：字符串、元组</li>
<li>可变序列（可进行增删改操作，对象地址不发生更改）：列表、字典</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;可变序列   列表、字典&#x27;&#x27;&#x27;</span></span><br><span class="line">lst = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">45</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(lst))</span><br><span class="line">lst.append(<span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(lst))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;不可变序列   字符串、元组&#x27;&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s))</span><br><span class="line">s = s+<span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></div>
<h3 id="（1）元组的创建方式">（1）元组的创建方式</h3>
<ul>
<li>使用小括号  <code>t=('Python','hello',90)</code></li>
<li>使用内置函数<code>tuple()</code>  <code>t=tuple(('Python','hello',90))</code></li>
<li>只包含一个元组的元素需要使用逗号和小括号  <code>t=(10,)</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;元组的创建方式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 第一种使用小括号</span></span><br><span class="line">t = (<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">98</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br><span class="line"></span><br><span class="line">t0 = <span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">98</span></span><br><span class="line"><span class="built_in">print</span>(t0)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t0))</span><br><span class="line"></span><br><span class="line">t3 = (<span class="string">&#x27;Python&#x27;</span>,)     			<span class="comment"># 如果元组中只有一个元素，逗号不能省略</span></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种使用内置函数tuple</span></span><br><span class="line">t1 = <span class="built_in">tuple</span>((<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">98</span>))</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;空元组的创建方式&#x27;&#x27;&#x27;</span></span><br><span class="line">lst =[]</span><br><span class="line">lst1= <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">d=&#123;&#125;</span><br><span class="line">d2=<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">t4=()</span><br><span class="line">t5=<span class="built_in">tuple</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;空列表&#x27;</span>,lst,lst1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;空字典&#x27;</span>,d,d2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;空元组&#x27;</span>,t4,t5)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）为什么将元组设计成不可变序列">（2）为什么将元组设计成不可变序列</h3>
<ul>
<li>
<p>在多任务环境下，同时操作对象时不需要加锁</p>
</li>
<li>
<p>因此，在程序中尽量使用不可变序列</p>
</li>
<li>
<p>注意：元组中存储的是对象的引用</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/cd6e4e6103275f67b33fc60230892a3f-cd6e4e6103275f67b33fc60230892a3f-100610mmxddzthmlhtdhux-e088f3-ace770.png" alt=""></p>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">10</span>,[<span class="number">20</span>,<span class="number">30</span>],<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>],<span class="built_in">type</span>(t[<span class="number">0</span>]),<span class="built_in">id</span>(t[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>],<span class="built_in">type</span>(t[<span class="number">1</span>]),<span class="built_in">id</span>(t[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>],<span class="built_in">type</span>(t[<span class="number">2</span>]),<span class="built_in">id</span>(t[<span class="number">2</span>]))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;尝试将t[1]修改为100&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="number">100</span>))</span><br><span class="line"><span class="comment"># t[1]=100    				# 元组是不允许修改元素的</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;由于[20,30]是列表，而列表是可变序列，所以可以向列表中添加元素，而列表的内存地址不变&#x27;&#x27;&#x27;</span></span><br><span class="line">t[<span class="number">1</span>].append(<span class="number">100</span>)   			<span class="comment"># 向列表中添加元素</span></span><br><span class="line"><span class="built_in">print</span>(t,<span class="built_in">id</span>(t[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）元组的遍历">（3）元组的遍历</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;元组的遍历&#x27;&#x27;&#x27;</span></span><br><span class="line">t = (<span class="string">&#x27;Python&#x27;</span>，<span class="string">&#x27;world&#x27;</span>,<span class="number">98</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;第一种获取元组元素的方式，使用索引&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>])</span><br><span class="line"><span class="comment">#print(t[3])   				# IndexError</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;遍历元组&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> t:</span><br><span class="line">  <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-集合">2. 集合</h2>
<p><em>集合</em>是Python语言提供的内置数据结构；与列表、字典一样都属于可变类型的序列；是没有Value的字典，只有key。</p>
<h3 id="（1）集合的创建方式">（1）集合的创建方式</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;第一种创建方式使用&#123;&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">s = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>&#125;				<span class="comment"># 集合中的元素不允许重复</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;第二种创建方式使用set&#123;&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">s1 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(s1,<span class="built_in">type</span>(s1))</span><br><span class="line"></span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(s2,<span class="built_in">type</span>(s2))</span><br><span class="line"></span><br><span class="line">s3 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">65</span>))   			<span class="comment"># 集合中的元素是无序的</span></span><br><span class="line"><span class="built_in">print</span>(s3,<span class="built_in">type</span>(s3))</span><br><span class="line"></span><br><span class="line">s4 = <span class="built_in">set</span>(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s4,<span class="built_in">type</span>(s4))</span><br><span class="line"></span><br><span class="line">s5 = <span class="built_in">set</span>(&#123;<span class="number">12</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">44</span>,<span class="number">4</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s5,<span class="built_in">type</span>(s5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空集合</span></span><br><span class="line">s6 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s6))</span><br><span class="line"></span><br><span class="line">s7 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s7))</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）集合的相关操作">（2）集合的相关操作</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">405</span>,<span class="number">60</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素的判断操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素的新增操作</span></span><br><span class="line">s.add(<span class="number">80</span>)        					<span class="comment"># 一次添加一个元素</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.update(&#123;<span class="number">200</span>,<span class="number">400</span>,<span class="number">300</span>&#125;)   			<span class="comment"># 一次至少添加一个元素</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.update([<span class="number">100</span>,<span class="number">99</span>,<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.update((<span class="number">78</span>,<span class="number">64</span>,<span class="number">56</span>))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素的删除操作</span></span><br><span class="line">s.remove(<span class="number">100</span>)	 					<span class="comment"># 一次删除一个指定元素，元素不存在抛出KeyError</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># s.remove(500)   					# KeyError</span></span><br><span class="line">s.discard(<span class="number">500</span>)   					<span class="comment"># 删除一个指定元素，元素不存在不报异常</span></span><br><span class="line">s.discard(<span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.pop()          					<span class="comment"># 一次只能删除一个任意元素</span></span><br><span class="line">s.pop()</span><br><span class="line"><span class="comment"># s.pop(400)      					# TypeError 不能够添加参数</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s.clear()        					<span class="comment"># 清空集合</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）集合间的关系">（3）集合间的关系</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;集合是否相等？元素相同即相等，与顺序无关&#x27;&#x27;&#x27;</span></span><br><span class="line">s = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">30</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s == s2)    					<span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s != s2)    					<span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;一个集合是否是另一个集合的子集&#x27;&#x27;&#x27;</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s3 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">90</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))</span><br><span class="line"><span class="built_in">print</span>(s3.issubset(s1))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;一个集合是否是另一个集合的超集&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s2))</span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s3))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;两个集合是否含有交集&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s3))   			<span class="comment"># False   有交集为False</span></span><br><span class="line">s4 = &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.isdisjoint(s4))   			<span class="comment"># True   无交集为True</span></span><br></pre></td></tr></table></figure></div>
<p>（4）集合的数学操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/91cad1a6ec28f224ac7087289cd17db5-%E9%9B%86%E5%90%88-c016b8.png" alt="集合"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;集合的数学操作&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 - s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差集</span></span><br><span class="line"><span class="built_in">print</span>(s1.symmetric_difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）集合生成式">（4）集合生成式</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;列表生成式&#x27;&#x27;&#x27;</span></span><br><span class="line">lst = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;集合生成式&#x27;&#x27;&#x27;</span></span><br><span class="line">s = &#123;i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-列表、字典、元组、集合总结">3. 列表、字典、元组、集合总结</h2>
<table>
<thead>
<tr>
<th style="text-align:center">数据结构</th>
<th style="text-align:center">是否可变</th>
<th style="text-align:center">是否重复</th>
<th style="text-align:center">是否有序</th>
<th style="text-align:center">定义符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">列表(list)</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">可重复</td>
<td style="text-align:center">有序</td>
<td style="text-align:center">[]</td>
</tr>
<tr>
<td style="text-align:center">元组(tuple)</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">可重复</td>
<td style="text-align:center">有序</td>
<td style="text-align:center">()</td>
</tr>
<tr>
<td style="text-align:center">字典(dict)</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">key不可重复，value可重复</td>
<td style="text-align:center">无序</td>
<td style="text-align:center">{key:value}</td>
</tr>
<tr>
<td style="text-align:center">集合(set)</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">不可重复</td>
<td style="text-align:center">无序</td>
<td style="text-align:center">{}</td>
</tr>
</tbody>
</table>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(1)--基础简介</title>
    <url>/posts/5223358a/</url>
    <content><![CDATA[<blockquote>
<p>ZY.Zhang</p>
<p>本文档基于<a href="https://www.bilibili.com/video/BV1Yh411o7Sz?p=1">B站视频教程</a></p>
</blockquote>
<h2 id="1-爬虫简介">1. 爬虫简介</h2>
<p>什么是爬虫：通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。</p>
<h2 id="2-爬虫合法性探究">2. 爬虫合法性探究</h2>
<p>爬虫究竟是合法还是违法的？</p>
<ul>
<li>在法律中是不被禁止的</li>
<li>具有违法风险</li>
<li>善意爬虫 &amp; 恶意爬虫</li>
</ul>
<p>爬虫带来的风险可以体现在如下两个方面：</p>
<ol>
<li>爬虫干扰了被访问网站的正常运营</li>
<li>爬虫抓取了受到法律保护的特定类型的数据或信息</li>
</ol>
<p>如何在编写使用的过程中避免进入局子的厄运？</p>
<ul>
<li>时常优化自己的程序，避免干扰被访问网站的正常运行</li>
<li>在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私或者商业机密等敏感内容，需要及时停止爬取或者传播。</li>
</ul>
<span id="more"></span>
<h2 id="3-爬虫初试深入">3. 爬虫初试深入</h2>
<p>爬虫在使用场景中的分类：</p>
<ul>
<li>
<p>通用爬虫：抓取系统的重要组成部分。抓取的是一整张页面数据。</p>
</li>
<li>
<p>聚焦爬虫：是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p>
</li>
<li>
<p>增量式爬虫：监测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</p>
</li>
</ul>
<p>爬虫的矛与盾：</p>
<ul>
<li>
<p>反爬机制：门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p>
</li>
<li>
<p>反反爬策略：爬虫程序，可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p>
</li>
</ul>
<p>robots.txt 协议：君子协议。规定了网站中那些数据可以被爬虫爬取，那些数据不允许被爬取。</p>
<p>例如：<a href="https://www.tabao.com/robots.txt">www.tabao.com/robots.txt</a></p>
<h2 id="4-http-https-协议">4. http&amp;https 协议</h2>
<h3 id="（1）http-协议">（1）http 协议</h3>
<p>概念：就是服务器和客户端进行数据交互的一种形式。</p>
<p>常用请求头信息：</p>
<ul>
<li>User-Agent：请求载体的身份标识</li>
<li>Connection：请求完毕后，是断开连接还是保持连接</li>
</ul>
<p>常用响应头信息：</p>
<ul>
<li>Content-Type：服务器响应回客户端的数据类型</li>
</ul>
<h3 id="（2）https-协议">（2）https 协议</h3>
<p>概念：安全的超文本传输协议</p>
<h3 id="（3）加密方式">（3）加密方式</h3>
<ul>
<li>
<p>对称秘钥加密</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/ea6ba70193f76fcf28fb396f0fdd6af0-%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86-7541dc.png" alt="对称加密"></p>
</li>
<li>
<p>非对称秘钥加密</p>
<p>存在缺点：第一个是如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持，只要是发送秘钥，就有可能有被挟持的风险；第二个是非对称秘钥加密方式效率比较低，处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/f6d4e5688c777ef4bc782697570a1fd6-%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86-7eb72d.png" alt="非对称加密"></p>
</li>
<li>
<p>证书秘钥加密：</p>
<ul>
<li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起；</li>
<li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(2)--requests 模块基础</title>
    <url>/posts/9058b1e5/</url>
    <content><![CDATA[<h2 id="1-requests-第一血">1. requests 第一血</h2>
<p>requests 模块：Python 中原生的一款基于网络请求的模块，功能非常强大，简单便捷，效率极高。</p>
<p>作用：模拟浏览器发请求。</p>
<p>如何使用：（requests 模块的编码流程）</p>
<ul>
<li>指定 url</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>持久化存储</li>
</ul>
<span id="more"></span>
<p>环境的安装：<code>pip install requests</code></p>
<p>实战编码：</p>
<ul>
<li>需求：爬取搜狗首页的数据</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step1 指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line">    <span class="comment"># step2 发起请求</span></span><br><span class="line">    <span class="comment"># get方法会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url = url)</span><br><span class="line">    <span class="comment"># step3 获取响应数据，text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># step4 持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-requests-巩固深入案例介绍">2. requests 巩固深入案例介绍</h2>
<h3 id="（1）简易网页采集器">（1）简易网页采集器</h3>
<ul>
<li>UA 检测</li>
<li>UA 伪装</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UA：User-Agent请求载体的身份标识</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;UA检测：门户网站的服务器会监测对应请求的载体身份标识，</span></span><br><span class="line"><span class="string">如果检测到请求载体身份标识是某一款浏览器,说明该请求时一个正常的请求；</span></span><br><span class="line"><span class="string">但是，如果检测到请求的载体身份不是基于某一款浏览器的，则表示该请求为不正常请求（爬虫）,</span></span><br><span class="line"><span class="string">则服务器很有可能拒绝该次请求&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器，躲过UA检测</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># step1 指定url query</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class="line">    <span class="comment"># 处理url携带的参数 封装到字典中</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;Enter a word:&#x27;</span>)</span><br><span class="line">    param =&#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>:kw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># step2 对指定的url发起请求，对应的url是携带参数的，并且处理过程中处理了参数</span></span><br><span class="line">    response = requests.get(url = url,params = param,headers = headers)</span><br><span class="line">    <span class="comment"># step3</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="comment"># step4</span></span><br><span class="line">    fileName = kw + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding =<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(fileName,<span class="string">&#x27;保存成功！！&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）破解百度翻译">（2）破解百度翻译</h3>
<ul>
<li>post 请求（携带了参数）</li>
<li>响应数据是一组 json 数据</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># step1 指定URL</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step2 进行UA伪装</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step3 post请求参数处理（同get请求类似）</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;Enter a word:\n&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>:word</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step4 请求发送</span></span><br><span class="line">    response = requests.post(url = post_url,data = data,headers = headers)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step5 获取响应数据:json()方法返回的是obj  (如果确认响应数据是json类型--&gt;通过Content-Type分辨，才可以直接用json方法)</span></span><br><span class="line">    dict_obj = response.json()</span><br><span class="line">    <span class="built_in">print</span>(dict_obj)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step6 持久化存储</span></span><br><span class="line">    fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(dict_obj,fp = fp,ensure_ascii = <span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Over!&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）豆瓣电影">（3）豆瓣电影</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>:<span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,	<span class="comment"># 从库中的第几部电影去取</span></span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>:<span class="string">&#x27;20&#x27;</span>	<span class="comment"># 一次取出的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url = url,params = param,headers = headers)</span><br><span class="line">    list_data = response.json()</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(list_data,fp = fp,ensure_ascii = <span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Over!&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-作业—肯德基餐厅查询">3. 作业—肯德基餐厅查询</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    post_url = <span class="string">&#x27;https://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class="line">    keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的城市：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data =&#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;keyword&#x27;</span>: keyword,</span><br><span class="line">        <span class="string">&#x27;pageindex&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url = post_url, data = data, headers = headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    <span class="comment"># page_text = response.text</span></span><br><span class="line">    <span class="comment"># fileName = keyword + &#x27;.html&#x27;</span></span><br><span class="line">    <span class="comment"># with open(fileName, &#x27;w&#x27;, encoding= &#x27;utf-8&#x27;) as fp:</span></span><br><span class="line">    <span class="comment">#     fp.write(page_text)</span></span><br><span class="line">    <span class="comment"># print(fileName, &#x27;Over!&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接打印出来</span></span><br><span class="line">    page = response.json()</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">dict</span> <span class="keyword">in</span> page[<span class="string">&#x27;Table1&#x27;</span>]:</span><br><span class="line">        StoreName = <span class="built_in">dict</span>[<span class="string">&#x27;storeName&#x27;</span>]</span><br><span class="line">        address = <span class="built_in">dict</span>[<span class="string">&#x27;addressDetail&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;StoreName:&#x27;</span> + StoreName, <span class="string">&#x27;address:&#x27;</span> + address + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-综合练习—药监总局">4. 综合练习—药监总局</h2>
<ul>
<li>
<p>爬取国家药品监督管理总局中基于中华人民共和国化妆品生产许可证相关数据（<a href="http://scxk.nmpa.gov.cn:81/xk/%EF%BC%89">http://scxk.nmpa.gov.cn:81/xk/）</a></p>
</li>
<li>
<p>动态加载数据：首页中对应的企业信息是通过 <code>ajax</code> 动态请求到的</p>
</li>
<li>
<p>通过对详情页 url 的观察发现：</p>
<ul>
<li>url 的域名都是一样的，只有携带的参数（id）不一样</li>
<li>id 值可以从首页对应的 <code>ajax</code> 请求到的 <code>json</code> 串中获取</li>
<li>域名和 id 值拼接出一个完整的企业对应的详情页的 url</li>
</ul>
</li>
<li>
<p>详情页的企业详情数据也是动态加载出来的！！！</p>
<ul>
<li>观察后发现，所有 <code>post</code> 请求的 url 都是一样的，只有参数 id 值不同</li>
<li>如果我们可以批量获取多家企业的id后，就可以就 id 和 url 形成一个完整的详情页对应详情数据的 <code>ajax</code> 请求的 url</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    id_list = []  							<span class="comment"># 存储企业的id</span></span><br><span class="line">    all_data_list = []  					<span class="comment"># 存储企业所有的详情数据</span></span><br><span class="line">    <span class="comment"># 批量获取不同企业的id值</span></span><br><span class="line">    url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">    <span class="comment"># 参数的封装</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        page = <span class="built_in">str</span>(page)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: page,</span><br><span class="line">            <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applysn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class="line">    <span class="comment"># 从 json_ids 字典中拿到 list 对应的 value 值，对 value 值列表进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> dic <span class="keyword">in</span> json_ids[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">        id_list.append(dic[<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line">    <span class="comment"># print(id_list,&#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取企业详情数据,也是动态加载出来的，携带一个参数 id，其值可以通过前一步生成的 id列表提取</span></span><br><span class="line">    post_url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        data = &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        json_detail = requests.post(url=post_url, data=data, headers=headers).json()</span><br><span class="line">        <span class="comment">#print(json_detail, &#x27;-------------END----------&#x27;)</span></span><br><span class="line">        all_data_list.append(json_detail )</span><br><span class="line">        all_data_list.append(<span class="string">&#x27;---------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储all_data_list</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./allData.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class="literal">False</span>, indent= <span class="literal">True</span>)  <span class="comment"># indent 自动排版</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Over!&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(3)--数据解析</title>
    <url>/posts/5e6336de/</url>
    <content><![CDATA[<h2 id="1-数据解析概述">1. 数据解析概述</h2>
<ul>
<li>聚焦爬虫：爬取页面中指定的页面内容。
<ul>
<li>编码流程：1. 指定URL → 2. 发起请求 → 3. 获取响应数据 → 4. 数据解析 → 5. 持久化存储</li>
</ul>
</li>
<li>数据解析分类：
<ul>
<li>正则表达式</li>
<li><code>bs4</code> 解析</li>
<li><code>xpath</code> 解析（重点）</li>
</ul>
</li>
<li>数据解析原理概述：解析的局部的文本内容都会在标签对应的属性中进行存储。
<ul>
<li>进行指定标签的定位</li>
<li>标签或者标签对应的属性中存储的数据值进行提取（解析）</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="2-图片数据爬取—正则表达式">2. 图片数据爬取—正则表达式</h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">表示任意单个字符</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">[ ]</td>
<td style="text-align:center">字符集，对单个字符给出取值范围</td>
<td style="text-align:center">[abc]表示a,b,c,[a-z]表示a-z的</td>
</tr>
<tr>
<td style="text-align:center">[^ ]</td>
<td style="text-align:center">非字符集，对单个字符给出排除范围</td>
<td style="text-align:center">[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">前一个字符0次或无限次扩展</td>
<td style="text-align:center">abc* 表示ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">前一个字符1次或无限次扩展</td>
<td style="text-align:center">abc+ 表示abc、abcc、abccc等</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">前一个字符0次或1次扩展</td>
<td style="text-align:center">abc？ 表示ab、abc</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">左右表达式任意一个</td>
<td style="text-align:center">abc|def 表示abc、def</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">{m}</th>
<th style="text-align:center">扩展前一个字符m次</th>
<th style="text-align:center">ab{2}c表示abbc</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">{m,n}</td>
<td style="text-align:center">扩展前一个字符m至n次（含n）</td>
<td style="text-align:center">ab{1，2}c表示abc、abbc</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">匹配字符串开头</td>
<td style="text-align:center">^abc表示abc且在一个字符串的开头</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">匹配字符串结尾</td>
<td style="text-align:center">abc$表示abc且在一个字符串的结尾</td>
</tr>
<tr>
<td style="text-align:center">( )</td>
<td style="text-align:center">分组标记，内部只能使用|操作符</td>
<td style="text-align:center">(abc)表示abc，(abc|def)表示abc、def</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">数字，等价于[0-9]</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">单词字符，等价于[A-Za-z0-9_]</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">re.search()</td>
<td style="text-align:center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td>
</tr>
<tr>
<td style="text-align:center">re.match()</td>
<td style="text-align:center">从字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td style="text-align:center">re.findall()</td>
<td style="text-align:center">搜搜字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td style="text-align:center">re.split()</td>
<td style="text-align:center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td style="text-align:center">re.finditer()</td>
<td style="text-align:center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td>
</tr>
<tr>
<td style="text-align:center">re.sub()</td>
<td style="text-align:center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">re.I</td>
<td style="text-align:center">使匹配对大小写不敏感</td>
</tr>
<tr>
<td style="text-align:center">re.L</td>
<td style="text-align:center">做本地化识别匹配</td>
</tr>
<tr>
<td style="text-align:center">re.M</td>
<td style="text-align:center">多行匹配，影响^和$</td>
</tr>
<tr>
<td style="text-align:center">re.S</td>
<td style="text-align:center">使.匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td style="text-align:center">re.U</td>
<td style="text-align:center">根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</td>
</tr>
<tr>
<td style="text-align:center">re.X</td>
<td style="text-align:center">该标志通过给予你跟灵活的格式以便你将正则表达式写得更易于理解</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">常用的正则表达式</span><br><span class="line"></span><br><span class="line">单字符：</span><br><span class="line"><span class="code">			.	:	除换行以外所有字符</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			[ ]	: 	[aoe]  [a-w] 匹配集合中任意一个字符</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\d	:	数字 [0-9]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\D	:	非数字</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\w	:	数字、字母、下划线、中文</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\W	:	非\w</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\s	 :	所有的空白字符包，包括空格、制表符、换页符等等，等价于[ \f \n \r \t \v ]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\S	:	非空白</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">数量修饰：</span><br><span class="line"><span class="code">			 \*	:	任意多次	&gt;=0</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			\+	:	至少一次	&gt;=1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			?	:	可有可无	0次或者1次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">		&#123;m&#125;	:	固定m次	hello&#123;3,&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">		&#123;m,&#125;	:	至少m次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">		&#123;m,n&#125;	:	m-n次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">边界：</span><br><span class="line"><span class="code">			\$	:	以某某结尾</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">			^	:	以某某开头</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">分组：</span><br><span class="line"><span class="code">			(ab)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">贪婪模式：	.\<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">非贪婪（惰性）模式：	.\*</span>?</span><br><span class="line"></span><br><span class="line">re.I	:	忽略大小写</span><br><span class="line"></span><br><span class="line">re.M	:	多行匹配</span><br><span class="line"></span><br><span class="line">re.S	:	单行匹配</span><br><span class="line"></span><br><span class="line">re.sub	:	正则表达式，替换内容，字符串</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;正则练习&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 提取出python</span></span><br><span class="line">key = <span class="string">&quot;javapythonc++php&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;python&#x27;</span>, key)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取出hello world</span></span><br><span class="line">key = <span class="string">&quot;&lt;html&gt;&lt;h1&gt;&lt;hello world&gt;&lt;h1&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;&lt;h1&gt;(.*)&lt;h1&gt;&#x27;</span>, key)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取170</span></span><br><span class="line">string = <span class="string">&#x27;我喜欢身高为170的女孩’</span></span><br><span class="line"><span class="string">re.findall(&#x27;</span>\d+<span class="string">&#x27;, string)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 提取出http://和https://</span></span><br><span class="line"><span class="string">key = &#x27;</span>http://www.baidu.com <span class="keyword">and</span> https://boob.com<span class="string">&#x27;</span></span><br><span class="line"><span class="string">re.findall(&#x27;</span>https?://<span class="string">&#x27;, key)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 提取出hello</span></span><br><span class="line"><span class="string">key = &#x27;</span>lalala&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;hahah<span class="string">&#x27; 	# 输出&lt;hTml&gt;&lt;hello&gt;&lt;/HtMl&gt;</span></span><br><span class="line"><span class="string">re.findall(&#x27;</span>&lt;[Hh][Tt][mM][lL]&gt;(.*)&lt;/[Hh][Tt][mM][lL]&gt;<span class="string">&#x27;, key)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 提取出hit.</span></span><br><span class="line"><span class="string">key = &#x27;</span>bobo@hit.edu.com<span class="string">&#x27;	# 想要匹配到hit</span></span><br><span class="line"><span class="string">re.findall(&#x27;</span>h.*?\.<span class="string">&#x27;, key)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 匹配sas和saas</span></span><br><span class="line"><span class="string">key = &#x27;</span>sasa <span class="keyword">and</span> sas <span class="keyword">and</span> saaas<span class="string">&#x27;</span></span><br><span class="line"><span class="string">re.findall(&#x27;</span>sa&#123;<span class="number">1</span>,<span class="number">2</span>&#125;s<span class="string">&#x27;, key)</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 如何爬取图片</span></span><br><span class="line">    url = <span class="string">&#x27;https://pic.qiushibaike.com/system/pictures/12409/124098453/medium/YNPHJQC101MS31E1.jpg&#x27;</span></span><br><span class="line">    <span class="comment"># content返回的是二进制形式的图片数据</span></span><br><span class="line">    <span class="comment"># text(字符串)  content(二进制)	json(队形)</span></span><br><span class="line">    img_data = requests.get(url = url).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./qiutu.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(img_data)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-正则解析案例">3. 正则解析案例</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：爬取糗事百科中糗图板块下所有的糗图图片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&lt;div class=&quot;thumb&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;/article/124098472&quot; target=&quot;_blank&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;//pic.qiushibaike.com/system/pictures/12409/124098472/medium/HSN2WWN0TP1VUPNG.jpg&quot; alt=&quot;糗事#124098472&quot; class=&quot;illustration&quot; width=&quot;100%&quot; height=&quot;auto&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个文件夹，保存所有的图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./qiutuLibs&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./qiutuLibs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.qiushibaike.com/imgrank/ &#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line">    <span class="comment"># print(page_text)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用聚焦爬虫将页面中所有的糗图进行解析提取</span></span><br><span class="line">    ex = <span class="string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt=.*?&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    img_src_list = re.findall(ex, page_text, re.S)</span><br><span class="line">    <span class="built_in">print</span>(img_src_list)</span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">        <span class="comment"># 拼接出完整的图片url</span></span><br><span class="line">        src = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">        img_data = requests.get(url = src, headers = headers).content</span><br><span class="line">        <span class="comment"># 生成图片名称</span></span><br><span class="line">        img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        imgPath = <span class="string">&#x27;./qiutuLibs/&#x27;</span> + img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(imgPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">        <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功!&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对上述代码进行进一步处理，使得能够分页爬取图片</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个文件夹，保存所有的图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./qiutuLibs&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./qiutuLibs&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置一个通用的url模板</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.qiushibaike.com/imgrank/page/%d/&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 对应页码的 url</span></span><br><span class="line">        new_url = <span class="built_in">format</span>(url % pageNum)</span><br><span class="line">        headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span></span><br><span class="line">        page_text = requests.get(url=new_url, headers=headers).text</span><br><span class="line">        <span class="comment"># print(page_text)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#使用聚焦爬虫将页面中所有的糗图进行解析提取</span></span><br><span class="line">        ex = <span class="string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt=.*?&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        img_src_list = re.findall(ex, page_text, re.S)</span><br><span class="line">        <span class="built_in">print</span>(img_src_list)</span><br><span class="line">        <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">            <span class="comment"># 拼接出完整的图片url</span></span><br><span class="line">            src = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">            img_data = requests.get(url = src, headers = headers).content</span><br><span class="line">            <span class="comment"># 生成图片名称</span></span><br><span class="line">            img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            imgPath = <span class="string">&#x27;./qiutuLibs/&#x27;</span> + img_name</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(imgPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(img_data)</span><br><span class="line">            <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功!&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-bs4-解析概述">4. bs4 解析概述</h2>
<ul>
<li>
<p>数据解析的原理：</p>
<ul>
<li>
<ol>
<li>标签定位</li>
<li>提取标签、标签属性中存储的数据值</li>
</ol>
</li>
</ul>
</li>
<li>
<p>bs4数据解析的原理：</p>
<ul>
<li>
<ol>
<li>实例化一个<code>BeautifulSoup</code>对象，并且将页面源码数据加载到该对象中</li>
<li>通过调用<code>BeautifulSoup</code>对象中相关的属性或者方法进行标签定位和数据提取</li>
</ol>
</li>
</ul>
</li>
<li>
<p>环境安装：<code>pip install bs4</code>         <code>pip  install  lxml</code></p>
</li>
</ul>
<h2 id="5-bs4-解析具体讲解">5. bs4 解析具体讲解</h2>
<ul>
<li>如何实例化 BeautifulSoup 对象：</li>
<li>导包，<code>from bs4 import BeautifulSoup</code>
<ul>
<li>对象的实例化：
<ul>
<li>（1）将本地的 html 文档中的数据加载到该对象中；</li>
<li>（2）将互联网上获取的页面源码加载到该对象中。</li>
</ul>
</li>
<li>提供的用于数据解析的方法和属性：
<ul>
<li><code>soup.tagName</code>：返回的是文档中第一次出现的 <code>tagName</code> 标签；</li>
<li><code>soup.find(tagName)</code>：可以等同于<code>soup.tagName</code>；也可以进行属性定位；</li>
<li><code>soup.find_all( )</code>：返回符合要求的所有标签；</li>
<li><code>select('某种选择器(id,class,标签...选择器)')</code>返回的是一个列表；层级选择器</li>
</ul>
</li>
<li>获取标签之间的文本数据：<code>soup.a.text/string/get_text( )</code>
<ul>
<li><code>text/get_text( )</code>：可以获取某一个标签中所有的文本内容</li>
<li><code>string</code>：只可以获取该标签下面直系的文本内容</li>
</ul>
</li>
<li>获取标签中的属性值：<code>soup.a['href']</code></li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>测试bs4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>百里守约<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;song&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>李清照<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>苏轼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>柳宗元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.song.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;赵匡胤&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;du&quot;</span>&gt;</span>总为浮云能蔽日,长安不见使人愁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com/meinv.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tang&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;qing&quot;</span>&gt;</span>清明时节雨纷纷,路上行人欲断魂,借问酒家何处有,牧童遥指杏花村<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.163.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;qin&quot;</span>&gt;</span>秦时明月汉时关,万里长征人未还,但使龙城飞将在,不教胡马度阴山<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.126.com&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;qi&quot;</span>&gt;</span>岐王宅里寻常见,崔九堂前几度闻,正是江南好风景,落花时节又逢君<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sina.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;du&quot;</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.dudu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;du&quot;</span>&gt;</span>杜牧<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>杜小月<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>度蜜月<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.haha.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;feng&quot;</span>&gt;</span>凤凰台上凤凰游,凤去台空江自流,吴宫花草埋幽径,晋代衣冠成古丘<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 将本地的html文档中的数据加载到该对象中</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./test.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soup = BeautifulSoup(fp, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(soup)</span></span><br><span class="line">    <span class="comment"># page_text = response.text</span></span><br><span class="line">    <span class="comment"># soup = BeautifulSoup(page_text,&#x27;lxml&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a)  <span class="comment"># soup.tagName 返回的是html中第一次出现的tagName标签</span></span><br><span class="line">    <span class="built_in">print</span>(soup.div)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(soup.find(<span class="string">&#x27;div&#x27;</span>))  <span class="comment"># find(tagName) 等同于 soup.div</span></span><br><span class="line">    <span class="built_in">print</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;song&#x27;</span>))  <span class="comment"># 属性定位</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># 返回符合要求的所有标签（列表）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang&#x27;</span>))  <span class="comment"># 返回的是一个列表</span></span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul &gt; li &gt; a&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># 层级选择器   &gt; 表示一个层级</span></span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul  a&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># 空格表示多个层级</span></span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul  a&#x27;</span>)[<span class="number">0</span>].text)</span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul  a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul  a&#x27;</span>)[<span class="number">0</span>].string)</span><br><span class="line">    <span class="built_in">print</span>(soup.select(<span class="string">&#x27;.tang &gt; ul  a&#x27;</span>)[<span class="number">0</span>][<span class="string">&#x27;href&#x27;</span>])</span><br></pre></td></tr></table></figure></div>
<h2 id="6-bs4-解析案例实战">6. bs4 解析案例实战</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：爬取三国演义小说所有的章节标题和章节内容</span></span><br><span class="line"><span class="comment"># https://www.shicimingju.com/book/sanguoyanyi.html</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 对首页的页面数据进行爬取</span></span><br><span class="line">    headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    response = requests.get(url = url, headers = headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    page_text = response.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在首页中解析出章节的标题和详情页的url</span></span><br><span class="line">    <span class="comment"># 实例化BeautifulSoup对象，需要将页面源码数据加载到该对象中</span></span><br><span class="line">    soup = BeautifulSoup(page_text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 解析章节标题和详情页的url</span></span><br><span class="line">    li_list = soup.select(<span class="string">&#x27;.book-mulu &gt; ul &gt; li&#x27;</span>)</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./sanguo.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        title = li.a.string</span><br><span class="line">        detail_url =<span class="string">&#x27;http://www.shicimingju.com&#x27;</span> + li.a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        <span class="comment"># 对详情页发起请求，解析出章节内容</span></span><br><span class="line">        detail_response = requests.get(url = detail_url, headers = headers)</span><br><span class="line">        detail_response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        detail_page_text = detail_response.text</span><br><span class="line">        <span class="comment"># 解析出详情页中相关的章节内容</span></span><br><span class="line">        detail_soup = BeautifulSoup(detail_page_text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        div_tag = detail_soup.find(<span class="string">&#x27;div&#x27;</span>, class_ = <span class="string">&#x27;chapter_content&#x27;</span>)</span><br><span class="line">        <span class="comment"># 解析到了章节的内容</span></span><br><span class="line">        content = div_tag.text</span><br><span class="line">        fp.write(title + <span class="string">&#x27;:&#x27;</span> + content + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(title, <span class="string">&#x27;爬取成功！&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="7-xpath-解析基础">7. xpath 解析基础</h2>
<ul>
<li>xpath解析：最常用且最便捷高效的一种解析方式。通用性。</li>
<li>xpath解析原理：
<ul>
<li>（1）实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中；</li>
<li>（2）调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li>
</ul>
</li>
<li>环境的安装：<code>pip install lxml</code>       (lxml解析器)</li>
<li>如何实例化一个etree对象：<code>from lxml import etree</code>
<ul>
<li>（1）将本地的html文档中的源码数据加载到etree对象中：<code>etree.parse(filePath)</code></li>
<li>（2）可以将从互联网上获取的源码数据加载到该对象中：<code>etree.HTML('page_text')</code></li>
</ul>
</li>
<li>xpath(‘xpath表达式’)：
<ul>
<li>其中 / 表示从根节点定位或者表示一个层级；</li>
<li>// 表示多个层级或者从任意位置开始定位；</li>
<li>属性定位：<code>tag[@attrName=&quot;attrValue&quot;]</code>；</li>
<li>索引定位：<code>tag[@attrName=&quot;attrValue&quot;]/p[3]</code>，注意索引从1开始</li>
<li>取文本：<code>/text( )</code>  ：获取的是标签中直系的文本内容；<code>//text( )</code>  ：标签中非直系的文本内容（所有的文本内容）</li>
<li>取属性：<code>/@attrName   ==&gt;  img/@src</code></li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 实例化好了一个etree对象，且将被解析的源码加载到了该对象中</span></span><br><span class="line">    tree = etree.parse(<span class="string">&#x27;test.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;/html/body/div&#x27;)</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;/html//div&#x27;)</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;//div&#x27;)</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;//div[@class=&quot;song&quot;]&#x27;)</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;//div[@class=&quot;tang&quot;]//li[5]/a/text()&#x27;)[0]</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;//li[7]//text()&#x27;)</span></span><br><span class="line">    <span class="comment"># r = tree.xpath(&#x27;//div[@class=&quot;tang&quot;]//text()&#x27;)</span></span><br><span class="line">    r = tree.xpath(<span class="string">&#x27;//div[@class=&quot;song&quot;]/img/@src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></div>
<h2 id="8-xpath-实战-58二手房">8. xpath 实战-58二手房</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：爬取58二手房中的房源信息</span></span><br><span class="line"><span class="comment"># 提醒：此处代码与视频课中有差别，原因是视频课拍摄时的网页源码和本人实际学习时网页源码有变化，本人代码于2021/02/26运行正常。</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 爬取页面源码数据</span></span><br><span class="line">    url = <span class="string">&#x27;https://bj.58.com/ershoufang/&#x27;</span></span><br><span class="line">    page_text = requests.get(url = url,headers = headers).text</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据解析</span></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 存储的是标签对象</span></span><br><span class="line">    div_list = tree.xpath(<span class="string">&#x27;//section[@class=&quot;list&quot;]/div&#x27;</span>)</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;58.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">        <span class="comment"># 页面数据的局部解析</span></span><br><span class="line">        title = div.xpath(<span class="string">&#x27;./a/div[2]//h3/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        fp.write(title + <span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------Over!------------------&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="9-xpath-解析案例">9. xpath 解析案例</h2>
<h3 id="（1）4k-图片解析下载">（1）4k 图片解析下载</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：解析下载图片数据 http://pic.netbian.com/4kmeinv/</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://pic.netbian.com/4kmeinv/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment"># 手动设定响应数据的编码格式</span></span><br><span class="line">    <span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">    page_text = response.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析：src的属性值  alt属性</span></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./picLibs&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./picLibs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        img_src = <span class="string">&#x27;http://pic.netbian.com&#x27;</span>+li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        img_name = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 通用处理中文乱码的解决方案</span></span><br><span class="line">        img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(img_name,img_src)</span></span><br><span class="line">        <span class="comment"># 请求图片进行持久化存储</span></span><br><span class="line">        img_data = requests.get(url=img_src, headers=headers).content</span><br><span class="line">        img_path = <span class="string">&#x27;picLibs/&#x27;</span>+img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功！！！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------OVER!---------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）全国城市名称爬取">（2）全国城市名称爬取</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：解析出所有城市名称  https://www.aqistudy.cn/historydata/</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;headers = &#123;</span></span><br><span class="line"><span class="string">    &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    url = &#x27;https://www.aqistudy.cn/historydata/&#x27;</span></span><br><span class="line"><span class="string">    page_text = requests.get(url=url,headers=headers).text</span></span><br><span class="line"><span class="string">    tree = etree.HTML(page_text)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #数据解析</span></span><br><span class="line"><span class="string">    hot_li_list = tree.xpath(&#x27;//div[@class=&quot;bottom&quot;]/ul/li&#x27;)</span></span><br><span class="line"><span class="string">    all_city_names = []</span></span><br><span class="line"><span class="string">    #解析热门城市名字</span></span><br><span class="line"><span class="string">    for li in hot_li_list:</span></span><br><span class="line"><span class="string">        hot_city_names = li.xpath(&#x27;./a/text()&#x27;)[0]</span></span><br><span class="line"><span class="string">        all_city_names.append(hot_city_names)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #解析全部城市名字：</span></span><br><span class="line"><span class="string">    city_names_list = tree.xpath(&#x27;.//div[@class=&quot;bottom&quot;]/ul/div[2]/li&#x27;)</span></span><br><span class="line"><span class="string">    for li in city_names_list:</span></span><br><span class="line"><span class="string">        city_name = li.xpath(&#x27;./a/text()&#x27;)[0]</span></span><br><span class="line"><span class="string">        all_city_names.append(city_name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(all_city_names,len(all_city_names))&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方法，一起解析</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://www.aqistudy.cn/historydata/&#x27;</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 数据解析  解析到热门城市和全部城市对应的a标签</span></span><br><span class="line">    <span class="comment"># 热门城市标签层级div/ul/li/a</span></span><br><span class="line">    <span class="comment"># 全部城市标签层级div/ul/div[2]/li/a</span></span><br><span class="line">    a_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;bottom&quot;]/ul/li/a | //div[@class=&quot;bottom&quot;]/ul/div[2]/li/a &#x27;</span>)</span><br><span class="line">    all_city_names = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">        a_name = a.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        all_city_names.append(a_name)</span><br><span class="line">    <span class="built_in">print</span>(all_city_names, <span class="built_in">len</span>(all_city_names))</span><br></pre></td></tr></table></figure></div>
<h2 id="10-xpath-作业—爬取站长素材中免费简历模板">10. xpath 作业—爬取站长素材中免费简历模板</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取站长素材中免费的简历模板  https://sc.chinaz.com/jianli/free.html</span></span><br><span class="line"><span class="comment"># 代码参考：https://blog.csdn.net/nanke_nk/article/details/108966854</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./jianli&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./jianli&#x27;</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://sc.chinaz.com/jianli/free_%d.html&#x27;</span></span><br><span class="line">    page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;您一共想要爬取多少页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, page):</span><br><span class="line">        <span class="keyword">if</span> pageNum == <span class="number">1</span>:</span><br><span class="line">            new_url = <span class="string">&#x27;https://sc.chinaz.com/jianli/free.html&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_url = <span class="built_in">format</span>(url%pageNum)</span><br><span class="line">        page_text = requests.get(url = new_url, headers = headers).text</span><br><span class="line">        tree = etree.HTML(page_text)</span><br><span class="line">        url_div_list = tree.xpath(<span class="string">&#x27;//*[@id=&quot;container&quot;]/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> url_div_list:</span><br><span class="line">            detail_url = <span class="string">&#x27;https:&#x27;</span> + detail_url.xpath(<span class="string">&#x27;./a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            detail_page_text = requests.get(url = detail_url, headers =headers).text</span><br><span class="line">            tree = etree.HTML(detail_page_text)</span><br><span class="line">            name = tree.xpath(<span class="string">&#x27;//h1/text()&#x27;</span>)[<span class="number">0</span>].encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            download_url = tree.xpath(<span class="string">&#x27;//*[@id=&quot;down&quot;]/div[2]/ul/li[1]/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            file_path = <span class="string">&#x27;jianli/&#x27;</span> + name + <span class="string">&#x27;.rar&#x27;</span></span><br><span class="line">            download_content = requests.get(url = download_url, headers = headers).content</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(download_content)</span><br><span class="line">            <span class="built_in">print</span>(name, <span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------------------OVER!---------------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(4)--验证码</title>
    <url>/posts/814742/</url>
    <content><![CDATA[<h2 id="1-验证码识别简介">1. 验证码识别简介</h2>
<p>验证码和爬虫之间的爱恨情仇：</p>
<ul>
<li>反爬机制：验证码。识别验证码图片中的数据，用于模拟登录操作。</li>
</ul>
<p>识别验证码的操作：</p>
<ul>
<li>人工肉眼识别（不推荐）</li>
<li>第三方自动识别（推荐）</li>
</ul>
<span id="more"></span>
<h2 id="2-云打码使用流程">2. 云打码使用流程</h2>
<!--作者学习期间，该平台已经挂掉，故而使用超级鹰进行代替。同类打码平台可以自行百度选择-->
<ul>
<li>注册：用户中心身份</li>
<li>登录：用户中心身份
<ul>
<li>查询余额，题分是否足够（第一次使用，绑定微信即可免费获赠1000题分；非首次使用，建议小额充值，1元即可）</li>
<li>创建软件 ID —— 用户中心左下角</li>
<li>下载示例代码 —— 开发文档</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, password, soft_id</span>):</span></span><br><span class="line">		self.username = username</span><br><span class="line">		password =  password.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">		self.password = md5(password).hexdigest()</span><br><span class="line">		self.soft_id = soft_id</span><br><span class="line">		self.base_params = &#123;</span><br><span class="line">			<span class="string">&#x27;user&#x27;</span>: self.username,</span><br><span class="line">			<span class="string">&#x27;pass2&#x27;</span>: self.password,</span><br><span class="line">			<span class="string">&#x27;softid&#x27;</span>: self.soft_id,</span><br><span class="line">		&#125;</span><br><span class="line">		self.headers = &#123;</span><br><span class="line">			<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)&#x27;</span>,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">PostPic</span>(<span class="params">self, im, codetype</span>):</span></span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		im: 图片字节</span></span><br><span class="line"><span class="string">		codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">		params = &#123;</span><br><span class="line">			<span class="string">&#x27;codetype&#x27;</span>: codetype,</span><br><span class="line">		&#125;</span><br><span class="line">		params.update(self.base_params)</span><br><span class="line">		files = &#123;<span class="string">&#x27;userfile&#x27;</span>: (<span class="string">&#x27;ccc.jpg&#x27;</span>, im)&#125;</span><br><span class="line">		r = requests.post(<span class="string">&#x27;http://upload.chaojiying.net/Upload/Processing.php&#x27;</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">		<span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">ReportError</span>(<span class="params">self, im_id</span>):</span></span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">		params = &#123;</span><br><span class="line">			<span class="string">&#x27;id&#x27;</span>: im_id,</span><br><span class="line">		&#125;</span><br><span class="line">		params.update(self.base_params)</span><br><span class="line">		r = requests.post(<span class="string">&#x27;http://upload.chaojiying.net/Upload/ReportError.php&#x27;</span>, data=params, headers=self.headers)</span><br><span class="line">		<span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranformImgCode</span>(<span class="params">imgPath,imgType</span>):</span></span><br><span class="line">	chaojiying = Chaojiying_Client(<span class="string">&#x27;此处是账户&#x27;</span>, <span class="string">&#x27;此处是密码&#x27;</span>, <span class="string">&#x27;此处是软件ID&#x27;</span>)	<span class="comment">#用户中心&gt;&gt;软件ID 生成一个替换 </span></span><br><span class="line">	im = <span class="built_in">open</span>(imgPath, <span class="string">&#x27;rb&#x27;</span>).read()	</span><br><span class="line">	<span class="keyword">return</span> chaojiying.PostPic(im,imgType)[<span class="string">&#x27;pic_str&#x27;</span>]	<span class="comment">#1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tranformImgCode(<span class="string">&#x27;./a.jpg&#x27;</span>,<span class="number">1902</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="3-古诗文网验证码识别">3. 古诗文网验证码识别</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 将本部分代码复制到上一节代码之后，因为要调用上述封装的tranformImgCode方法</span></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别验证码图下载</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line">page_text = session.get(url=url, headers=headers).text</span><br><span class="line"><span class="comment"># 解析验证码图片的地址</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">img_src = <span class="string">&#x27;https://so.gushiwen.org&#x27;</span> + tree.xpath(<span class="string">&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 将验证码图片保存本地</span></span><br><span class="line">img_data = session.get(img_src, headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./code.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	fp.write(img_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别验证码</span></span><br><span class="line">code_text = tranformImgCode(<span class="string">&#x27;./code.jpg&#x27;</span>, <span class="number">1902</span>)</span><br><span class="line"><span class="built_in">print</span>(code_text)</span><br><span class="line">login_url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollect.aspx&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">	<span class="string">&#x27;__VIEWSTATE&#x27;</span>: <span class="string">&#x27;f1ECt6+6MPtdTZMJtYOYS/7ww2d/DPy9t8JQcIt1QuOneLTbNQuYqPcCjZNbDAbfb9vj3k6f0M7EKTf0YqElM1k1A5ELwyTvUzBii+9LDRBbIMmc/jb0DJPsYfI=&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: <span class="string">&#x27;C93BE1AE&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;http://so.gushiwen.cn/user/collect.aspx&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;code&#x27;</span>: code_text,  <span class="comment"># 动态变化</span></span><br><span class="line">	<span class="string">&#x27;denglu&#x27;</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment"># 对点击登录按钮发起请求</span></span><br><span class="line">page_text_login = session.post(url=login_url, headers=headers, data=data).text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./gushiwen.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	fp.write(page_text_login)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>
<p>在请求参数中如果看到了一组乱序的请求参数，最好去验证这组请求参数是否为动态变化</p>
<ul>
<li>处理：
<ul>
<li>方式1：常规来讲一般动态变化的请求参数会被隐藏在前台页面中，那么我们就要去前台页面源码中寻找；</li>
<li>方式2：如果前台页面没有的话，我们就可以基于抓包工具进行全局搜索。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>基于百度AI实现的爬虫给功能：</p>
<ul>
<li>图像识别</li>
<li>语音识别&amp;合成</li>
<li>自然语言处理</li>
</ul>
</li>
<li>
<p>使用流程：</p>
<ul>
<li>
<p>点击控制台进行登录</p>
</li>
<li>
<p>选择想要实现的功能</p>
</li>
<li>
<p>实现功能下创建一个 app</p>
</li>
<li>
<p>选择对应的 pythonSDK 文档进行代码实现</p>
<blockquote>
<p>需求：<a href="https://duanziwang.com/">https://duanziwang.com/</a></p>
<p>讲段子王中的段子内容爬取到本地，然后基于语音合成为mp3的音频文件，然后自己搭建一个web服务器，线上实时播放音频文件。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(5)--requests 模块高级</title>
    <url>/posts/7b6c8a34/</url>
    <content><![CDATA[<h2 id="1-模拟登录实现流程梳理">1. 模拟登录实现流程梳理</h2>
<p>模拟登录：爬取基于某些用户的用户信息。</p>
<p>需求：对人人网进行模拟登录</p>
<ul>
<li>点击登录按钮后会发起一个post请求</li>
<li>post请求中会携带登陆之前录入的相关的登录信息（用户名、密码、验证码…）</li>
<li>验证码：每次请求都会动态变化</li>
</ul>
<span id="more"></span>
<h2 id="2-人人网模拟登录">2. 人人网模拟登录</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 验证码的识别,获取验证码图片的文字数据</span></span><br><span class="line"><span class="comment"># 2. 对post请求进行发送</span></span><br><span class="line"><span class="comment"># 3. 对响应数据进行持久化存储</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">url = <span class="string">&#x27;http://www.renren.com/SysHome.do&#x27;</span></span><br><span class="line">page_text = response.get(url = url,headers = headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">code_img_src = tree.xpath(<span class="string">&#x27;//*[@id=&quot;verifyPic_login&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">code_img_data = requests.get(url = code_img_src,headers = headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(code_img_data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 下面需要使用打码平台提供的示例代码进行识别，云打码平台已挂</span></span><br><span class="line"><span class="comment">######了解视频代码使用思路即可，可自行使用其他打码平台实现操作，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求发送</span></span><br><span class="line">login_url = <span class="string">&#x27; &#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url = login_url,headers = headers,data = data)</span><br><span class="line"><span class="built_in">print</span>(response.satus_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login_page_text = response.text</span></span><br><span class="line"><span class="comment"># with open(&#x27;renren.html&#x27;,&#x27;w&#x27;,encoding = &#x27;utf-8&#x27;) #as fp:</span></span><br><span class="line">    fp.write(login_page_text)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;视频UP主的源代码&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码流程：</span></span><br><span class="line"><span class="comment"># 1.验证码的识别，获取验证码图片的文字数据</span></span><br><span class="line"><span class="comment"># 2.对post请求进行发送（处理请求参数）</span></span><br><span class="line"><span class="comment"># 3.对响应数据进行持久化存储</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> CodeClass <span class="keyword">import</span> YDMHttp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 封装识别验证码图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCodeText</span>(<span class="params">imgPath,codeType</span>):</span></span><br><span class="line">    <span class="comment"># 普通用户用户名</span></span><br><span class="line">    username = <span class="string">&#x27;bobo328410948&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 普通用户密码</span></span><br><span class="line">    password = <span class="string">&#x27;bobo328410948&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">    appid = <span class="number">6003</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">    appkey = <span class="string">&#x27;1f4b564483ae5c907a1d34f8e2f2776c&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片文件：即将被识别的验证码图片的路径</span></span><br><span class="line">    filename = imgPath</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></span><br><span class="line">    codetype = codeType</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 超时时间，秒</span></span><br><span class="line">    timeout = <span class="number">20</span></span><br><span class="line">    result = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 检查</span></span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请设置好相关参数再测试&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登陆云打码</span></span><br><span class="line">        uid = yundama.login();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;uid: %s&#x27;</span> % uid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询余额</span></span><br><span class="line">        balance = yundama.balance();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;balance: %s&#x27;</span> % balance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">        cid, result = yundama.decode(filename, codetype, timeout);</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cid: %s, result: %s&#x27;</span> % (cid, result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.对验证码图片进行捕获和识别</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://www.renren.com/SysHome.do&#x27;</span></span><br><span class="line">page_text = requests.get(url=url,headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">code_img_src = tree.xpath(<span class="string">&#x27;//*[@id=&quot;verifyPic_login&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">code_img_data = requests.get(url=code_img_src,headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(code_img_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用云打码提供的示例代码对验证码图片进行识别</span></span><br><span class="line">result = getCodeText(<span class="string">&#x27;code.jpg&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># post请求的发送（模拟登录）</span></span><br><span class="line">login_url = <span class="string">&#x27;http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=2019431046983&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;www.zhangbowudi@qq.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;icode&#x27;</span>: result,</span><br><span class="line">    <span class="string">&#x27;origURL&#x27;</span>: <span class="string">&#x27;http://www.renren.com/home&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;renren.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key_id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;captcha_type&#x27;</span>: <span class="string">&#x27;web_login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;06768edabba49f5f6b762240b311ae5bfa4bcce70627231dd1f08b9c7c6f4375&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rkey&#x27;</span>: <span class="string">&#x27;1028219f2897941c98abdc0839a729df&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3Dgds6TUs9Q1ojOatGda5mVsLKC34AYwc5XiN8OuImHRK%26wd%3D%26eqid%3D8e38ba9300429d7d000000035cedf53a&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=login_url,headers=headers,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login_page_text = response.text</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># with open(&#x27;renren.html&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp:</span></span><br><span class="line"><span class="comment">#     fp.write(login_page_text)</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-模拟登录-cookie-操作">3. 模拟登录 cookie 操作</h2>
<ul>
<li>
<p>需求：爬取当前用户的相关用户信息（个人主页中显示的用户信息）</p>
</li>
<li>
<p>http/https协议：无状态。</p>
<p>没有请求到对应页面数据的原因：发起的第二次基于个人主页页面请求的时候，服务器并不知道该次请求是基于登录状态下的请求。</p>
</li>
<li>
<p>cookie：用来让服务器端记录客户端的相关状态</p>
<ul>
<li>
<p>手动处理：抓包工具获取 <code>Cookie</code> 值，将值封装到 <code>headers</code> 中（不推荐）</p>
</li>
<li>
<p>自动处理：</p>
<p><code>Cookie</code> 值的来源是哪里？模拟登录 <code>post</code> 请求后，由服务器端创建的。</p>
<p><code>session</code>会话对象：1. 可以进行请求的发送；2. 如果请求过程中产生了Cookie，则该Cookie会被自动存储/携带在该session对象中。</p>
<p>创建一个session对象：<code>session = requests.Session( )</code></p>
<p>使用session对象进行模拟登录<code>post</code>请求的发送（Cookie会被存储在session中）</p>
<p>session对象对个人主页对应的get请求进行发送（携带了Cookie）</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####基于前一节代码之上####</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取当前用户的相关用户信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;手动获取Cookie（不推荐） headers = &#123;</span></span><br><span class="line"><span class="string">   ‘&#x27;Cookie&#x27;:&#x27;xxxx&#x27;</span></span><br><span class="line"><span class="string">    &#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">detail_url = <span class="string">&#x27;http://www.renren.com/976279344/profile&#x27;</span></span><br><span class="line">detail_page_test = session.get(url = detail_url,headers = headers).text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bobo.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span> ) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(detail_page_test)</span><br></pre></td></tr></table></figure></div>
<h2 id="4-代理理论讲解">4. 代理理论讲解</h2>
<ul>
<li>代理：破解封 IP 这种反爬机制。</li>
<li>什么是代理？代理服务器。</li>
<li>代理的作用：
<ul>
<li>突破自身 IP 被访问的限制</li>
<li>可以隐藏自身真实的 IP，免受攻击</li>
</ul>
</li>
<li>相关网站：
<ul>
<li><a href="https://www.kuaidaili.com/">快代理</a></li>
<li>西祠代理</li>
<li><a href="http://www.goubanjia.com">www.goubanjia.com</a></li>
</ul>
</li>
<li>代理 ip 的类型：
<ul>
<li>http：只能应用到 http 协议对应的 url 中</li>
<li>https：只能应用到 https 协议对应的 url 中</li>
</ul>
</li>
<li>代理ip的匿名度：
<ul>
<li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实 ip</li>
<li>匿名：知道使用了代理，不知道真实 ip</li>
<li>高匿：不知道使用了代理，也不知道真实 ip</li>
</ul>
</li>
</ul>
<h2 id="5-代理在爬虫中的应用">5. 代理在爬虫中的应用</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">page_text = requests.get(url = url, headers = headers, proxies = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://124.205.155.153:9090&quot;</span>&#125;).text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(6)--高性能异步爬虫</title>
    <url>/posts/52426a5f/</url>
    <content><![CDATA[<h2 id="1-异步爬虫概述">1. 异步爬虫概述</h2>
<ul>
<li>同步：不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。 例如购物系统中更新商品库存，需要用 “行锁” 作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。 简言之，同步意味着有序。</li>
<li>异步：为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。 例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。 简言之，异步意味着无序。</li>
<li>目的：在爬虫中使用异步实现高性能的数据爬取操作。</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14667.rar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14665.rar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202102/jianli14648.rar&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在爬取：&#x27;</span>, url)</span><br><span class="line">    <span class="comment"># get方法是一个阻塞的方法</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_content</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;响应数据的长度为：&#x27;</span>, <span class="built_in">len</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    content = get_content(url)</span><br><span class="line">    parse_content(content)</span><br></pre></td></tr></table></figure></div>
<h2 id="2-多线程and多线程">2. 多线程and多线程</h2>
<p>异步爬虫的方式：</p>
<ul>
<li>多线程，多进程：（不建议）
<ul>
<li>好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行</li>
<li>弊端：无法无限制的开启多线程或者多进程</li>
</ul>
</li>
</ul>
<h2 id="3-线程池and进程池">3. 线程池and进程池</h2>
<ul>
<li>线程池、进程池：（适当使用）
<ul>
<li>好处：可以降低系统对进程或者线程创建和销毁的一个频率，从而很好地降低系统地开销。</li>
<li>弊端：池中线程或进程地数量是有上限的。</li>
</ul>
</li>
</ul>
<h2 id="4-线程池的基本使用">4. 线程池的基本使用</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 使用单线程串行方式执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在下载：&#x27;</span>,<span class="built_in">str</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载成功：&#x27;</span>,<span class="built_in">str</span>)</span><br><span class="line">    </span><br><span class="line">name_list = [<span class="string">&#x27;xiaozi&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">    get_page(name_list[i])</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d second&#x27;</span> % (end_time-start_time))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入线程池模块对应的类</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用线程池方式执行</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在下载：&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载成功：&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;xiaozi&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个线程池对象</span></span><br><span class="line">pool = Pool(<span class="number">4</span>)      <span class="comment"># 线程池开辟4个线程</span></span><br><span class="line"><span class="comment"># 将列表中每一个列表元素传递给get_page进行处理</span></span><br><span class="line">pool.<span class="built_in">map</span>(get_page, name_list)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(end_time - start_time)</span><br></pre></td></tr></table></figure></div>
<h2 id="5-线程池案例应用">5. 线程池案例应用</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：爬取梨视频视频数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 原则：线程池处理的是阻塞且耗时的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 生成一个存放视频的文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./video&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./video&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对下述url发起请求解析出视频详情页的url和视频的名称</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.pearvideo.com/category_5&#x27;</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    li_list = tree.xpath(<span class="string">&#x27;//ul[@id=&quot;listvideoListUl&quot;]/li&#x27;</span>)</span><br><span class="line">urls = []  <span class="comment"># 存储所有视频的链接和文字</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    detail_url = <span class="string">&#x27;https://www.pearvideo.com/&#x27;</span> + li.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    name = li.xpath(<span class="string">&#x27;./div/a/div[2]/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">    <span class="comment"># print(detail_url,name)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对详情页的url发起请求</span></span><br><span class="line">    detail_page_text = requests.get(url=detail_url, headers=headers).text</span><br><span class="line">    <span class="comment"># 从详情页中解析出视频的地址</span></span><br><span class="line">    <span class="comment">#### 视频的方法在2021/02/27 不可使用，梨视频又更改了页面源码，mp4是动态加载出来的，mp4文件经ajax请求得到，需要抓包ajax</span></span><br><span class="line">    <span class="comment">#### 参考 https://www.cnblogs.com/qianhu/p/14027192.html的操作</span></span><br><span class="line">    detail_tree = etree.HTML(detail_page_text)</span><br><span class="line">    name = detail_tree.xpath(<span class="string">&#x27;//*[@id=&quot;detailsbd&quot;]/div[1]/div[2]/div/div[1]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    str_ = <span class="built_in">str</span>(li.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>)[<span class="number">0</span>]).split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    ajax_url = <span class="string">&#x27;https://www.pearvideo.com/videoStatus.jsp?&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;contId&#x27;</span>: str_,</span><br><span class="line">        <span class="string">&#x27;mrd&#x27;</span>: <span class="built_in">str</span>(random.random())</span><br><span class="line">    &#125;</span><br><span class="line">    ajax_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.pearvideo.com/video_&#x27;</span> + str_</span><br><span class="line">    &#125;</span><br><span class="line">    dic_obj = requests.get(url=ajax_url, params=params, headers=ajax_headers).json()</span><br><span class="line">    video_url = dic_obj[<span class="string">&quot;videoInfo&quot;</span>][<span class="string">&#x27;videos&#x27;</span>][<span class="string">&quot;srcUrl&quot;</span>]</span><br><span class="line"></span><br><span class="line">    video_true_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s_list = <span class="built_in">str</span>(video_url).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s_list)):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s_list) - <span class="number">1</span>:</span><br><span class="line">            video_true_url += s_list[i] + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ss_list = s_list[i].split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ss_list)):</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    video_true_url += <span class="string">&#x27;cont-&#x27;</span> + str_ + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> j == <span class="built_in">len</span>(ss_list) - <span class="number">1</span>:</span><br><span class="line">                    video_true_url += ss_list[j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    video_true_url += ss_list[j] + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: video_true_url</span><br><span class="line">    &#125;</span><br><span class="line">    urls.append(dic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_data</span>(<span class="params">dic</span>):</span></span><br><span class="line">    urll = dic[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">    data = requests.get(url=urll, headers=headers).content</span><br><span class="line">    path = <span class="string">&#x27;./video/&#x27;</span> + dic[<span class="string">&#x27;name&#x27;</span>] + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(dic[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;正在下载.......&#x27;</span>)</span><br><span class="line">    <span class="comment"># 持久化存储操作</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(data)</span><br><span class="line">        <span class="built_in">print</span>(dic[<span class="string">&#x27;name&#x27;</span>]+ <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;下载成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用线程池对视频数据进行请求（较为耗时的阻塞操作）</span></span><br><span class="line">pool = Pool(<span class="number">4</span>)</span><br><span class="line">pool.<span class="built_in">map</span>(get_video_data, urls)</span><br><span class="line"></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure></div>
<h2 id="6-协程相关概念回顾">6. 协程相关概念回顾</h2>
<ul>
<li>
<p>协程：英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程。 协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。 协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。 我们可以使用协程来实现异步操作，比如在网络爬虫场景下，我们发出一个请求之后，需要等待一定的时间才能得到响应，但其实在这个等待过程中，程序可以干许多其他的事情，等到响应得到之后才切换回来继续处理，这样可以充分利用 CPU 和其他资源，这就是异步协程的优势。</p>
</li>
<li>
<p>单线程+异步协程：（推荐）</p>
<ul>
<li><code>event_loop：</code>事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。</li>
<li><code>coroutine：</code>协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用，我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即执行，而是返回一个协程对象。</li>
<li><code>task：</code>任务，他是对协程对象的进一步封装，包含了任务的各个状态。</li>
<li><code>future：</code>代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</li>
<li><code>async：</code>定义一个协程。</li>
<li><code>await：</code>用来挂起阻塞方法的执行。</li>
</ul>
</li>
</ul>
<h2 id="7-协程相关操作回顾">7. 协程相关操作回顾</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在请求的url是&#x27;</span>,url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求成功,&#x27;</span>,url)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"><span class="comment"># asyncio修饰的函数，调用之后返回的一个协程对象</span></span><br><span class="line">c = request(<span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># #创建一个事件循环对象</span></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #将协程对象注册到loop中，然后启动loop</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #task的使用</span></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment"># #基于loop创建一个task任务对象</span></span><br><span class="line"><span class="comment"># task = loop.create_task(c)</span></span><br><span class="line"><span class="comment"># print(task)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(task)</span></span><br><span class="line"><span class="comment"># print(task)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #future的使用</span></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment"># task = asyncio.ensure_future(c)</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(task)</span></span><br><span class="line"><span class="comment"># print(task)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback_func</span>(<span class="params">task</span>):</span></span><br><span class="line">    <span class="comment"># result返回的就是任务对象中封装的协程对象对应函数的返回值</span></span><br><span class="line">    <span class="built_in">print</span>(task.result())</span><br><span class="line"><span class="comment"># 绑定回调</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = asyncio.ensure_future(c)</span><br><span class="line"><span class="comment"># 将回调函数绑定到任务对象中</span></span><br><span class="line">task.add_done_callback(callback_func)</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure></div>
<h2 id="8-多任务异步协程实现">8. 多任务异步协程实现</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在下载&#x27;</span>,url)</span><br><span class="line">    <span class="comment"># 在异步协程中如果出现了同步模块相关的代码，那么就无法实现异步</span></span><br><span class="line">    <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="comment"># 当asyncio中遇到阻塞操作，必须手动挂起</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完毕&#x27;</span>,url)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">urls =[</span><br><span class="line">    <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.sougou.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.goubanjia.com&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 任务列表：存放多个任务对象</span></span><br><span class="line">stasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = request(url)</span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    stasks.append(task)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 需要将任务列表封装到wait中</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(stasks))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time()-start)</span><br></pre></td></tr></table></figure></div>
<h2 id="9-aiohttp-模块引出">9. aiohttp 模块引出</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">######未能实现异步进程，还是同步操作</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:1080/bobo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:1080/jay&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:1080/tom&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在下载&#x27;</span>, url)</span><br><span class="line">    <span class="comment"># requests模块发起的请求是基于同步的，不能在异步模块中使用，否则会中断异步操作，必须使用基于异步的网络请求模块进行url的请求发送</span></span><br><span class="line">    <span class="comment"># aiphttp模块引入</span></span><br><span class="line">    response = requests.get(url = url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完毕&#x27;</span>, response.text)</span><br><span class="line"></span><br><span class="line">tasks = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = get_page(url)</span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总耗时：&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure></div>
<h2 id="10-aiohttp-多任务异步协程实现异步爬虫">10. aiohttp + 多任务异步协程实现异步爬虫</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境的安装    pip install aiohttp</span></span><br><span class="line"><span class="comment"># 使用aiohttp模块中的ClientSession</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://www.sougou.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://www.taobao.com&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># get()、post():</span></span><br><span class="line">        <span class="comment"># headers,params/data,proxy=&#x27;http://ip:port&#x27;</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="comment"># text()返回的是字符串形式的响应数据</span></span><br><span class="line">            <span class="comment"># read()返回的是二进制形式的响应数据</span></span><br><span class="line">            <span class="comment"># json()返回的是json对象</span></span><br><span class="line">            <span class="comment"># 注意：在获取响应数据操作之前，一定要使用await手动挂起</span></span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()</span><br><span class="line">            <span class="comment"># print(page_text)</span></span><br><span class="line"></span><br><span class="line">tasks = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = get_page(url)</span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总耗时：&#x27;</span>, end-start)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(7)--动态加载数据处理</title>
    <url>/posts/4562c2a8/</url>
    <content><![CDATA[<h2 id="1-selenium-简介">1. selenium 简介</h2>
<ul>
<li>
<p>问题：<code>selenium</code>模块和爬虫之间具有怎样的关联？</p>
<ul>
<li>便捷地获取网站中动态加载的数据</li>
</ul>
</li>
<li>
<p>便捷实现模拟登录</p>
</li>
<li>
<p>什么是<code>selenium</code>模块？</p>
<p>基于浏览器自动化的一个模块。</p>
</li>
</ul>
<span id="more"></span>
<h2 id="2-selenium-初试">2. selenium 初试</h2>
<p>selenium使用流程：</p>
<ul>
<li>环境安装：<code>pip install selenium</code></li>
<li>下载一个对应浏览器的驱动程序（以谷歌浏览器为例）
<ul>
<li>下载路径：<a href="http://npm.taobao.org/mirrors/chromedriver/%E6%88%96%E8%80%85http://chromedriver.storage.googleapis.com/index.html">http://npm.taobao.org/mirrors/chromedriver/或者http://chromedriver.storage.googleapis.com/index.html</a></li>
<li>驱动程序和浏览器的映射关系：<a href="http://blog.csdn.net/huilan_same/article/details/51896672">http://blog.csdn.net/huilan_same/article/details/51896672</a></li>
<li>实例化一个浏览器对象</li>
<li>编写基于浏览器自动化的操作代码
<ul>
<li>发起请求：<code>get(url)</code></li>
<li>标签定位：<code>find系列方法</code></li>
<li>标签交互：<code>send_keys('xxxxxx')</code></li>
<li>执行js程序：<code>excute_script('jsCode')</code></li>
<li>前进、后退：<code>forward( )、back( )</code></li>
<li>关闭浏览器：<code>quit( )</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># selenium操纵浏览器</span></span><br><span class="line"><span class="comment">#### Tip：作者Chrome是88版本，直接下载88的chromedriver成功运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 实例化一个浏览器对象（传入浏览器的驱动程序）</span></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 让浏览器发起一个指定的url对应请求</span></span><br><span class="line">bro.get(<span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/&#x27;</span>)     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器当前页面的页面源码数据</span></span><br><span class="line">page_text = bro.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析企业名称</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul[@id=&quot;gzlist&quot;]/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    name = li.xpath(<span class="string">&#x27;./dl/@title&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<h2 id="3-selenium-其他自动化操作">3. selenium 其他自动化操作</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">bro.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 标签定位</span></span><br><span class="line">search_input = bro.find_element_by_id(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="comment"># 标签的交互</span></span><br><span class="line">search_input.send_keys(<span class="string">&#x27;iphone&#x27;</span>)</span><br><span class="line"><span class="comment"># 执行一组js程序   相当于F12--Console执行js代码</span></span><br><span class="line">bro.execute_script(<span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">btn = bro.find_element_by_css_selector(<span class="string">&#x27;.btn-search&#x27;</span>)</span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line">bro.get(<span class="string">&#x27;https://baidu.com/&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 回退</span></span><br><span class="line">bro.back()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 前进</span></span><br><span class="line">bro.forward()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<h2 id="4-iframe-处理-动作链">4. iframe 处理+动作链</h2>
<p><code>selenium</code>处理<code>iframe</code>：</p>
<ul>
<li>如果定位的标签存在于iframe标签之中，则必须使用<code>switch_to.frame(id)</code></li>
<li>动作链（拖动）：<code>from selenium.webdriver import ActionChains</code>
<ul>
<li>实例化一个动作链对象：<code>action = ActionChains(bro)</code></li>
<li><code>click_and_hold(div)</code>：长按且点击</li>
<li><code>move_by_offset(x,y)</code></li>
<li><code>perform( )</code>：让动作链立即执行</li>
<li><code>action.release( )</code>：释放动作链对象</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 导入动作链对应的类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bro.get(<span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-example-droppable&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果定位的标签是存在与iframe标签之中的，直接通过find方式会报错，则必须通过另外的操作来进行标签定位</span></span><br><span class="line">bro.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)     <span class="comment">#切换浏览器标签定位的作用域</span></span><br><span class="line">div = bro.find_element_by_id(<span class="string">&#x27;draggable&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动作链</span></span><br><span class="line">action = ActionChains(bro)      <span class="comment">#实例化动作链对象</span></span><br><span class="line"><span class="comment"># 点击并且长按指定的标签</span></span><br><span class="line">action.click_and_hold(div)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="comment">#perform 表示立即执行动作链操作</span></span><br><span class="line">    <span class="comment">#move_by_offset(x,y)   x表示水平方向，y表示竖直方向</span></span><br><span class="line">    action.move_by_offset(<span class="number">11</span>, <span class="number">0</span>).perform()</span><br><span class="line">    sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放动作链</span></span><br><span class="line">action.release()</span><br><span class="line"></span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<h2 id="5-selenium-模拟登录-QQ-空间">5. selenium 模拟登录 QQ 空间</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟登录QQ空间，运行前需要将代码中“QQ号码”和“QQ密码”改写</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">bro.get(<span class="string">&#x27;https://qzone.qq.com/&#x27;</span>)</span><br><span class="line">bro.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a_tag = bro.find_element_by_id(<span class="string">&#x27;switcher_plogin&#x27;</span>)</span><br><span class="line">a_tag.click()</span><br><span class="line"></span><br><span class="line">userName_tag = bro.find_element_by_id(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">password_tag = bro.find_element_by_id(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">userName_tag.send_keys(<span class="string">&#x27;QQ号码&#x27;</span>)</span><br><span class="line">password_tag.send_keys(<span class="string">&#x27;QQ密码&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">btn = bro.find_element_by_id(<span class="string">&#x27;login_button&#x27;</span>)</span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<h2 id="6-无头浏览器-规避操作">6. 无头浏览器+规避操作</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 实现无可视化界面</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment"># 实现规避检测</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现无可视化界面的操作</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现规避检测</span></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何实现让selenium规避被检测到的风险</span></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>, chrome_options=chrome_options,options=option)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无可视化界面（无头浏览器） phantomJs</span></span><br><span class="line">bro.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bro.page_source)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<h2 id="7-超级鹰的基本使用">7. 超级鹰的基本使用</h2>
<p>超级鹰：<a href="https://www.chaojiying.com/about.html">https://www.chaojiying.com/about.html</a></p>
<ul>
<li>注册：普通用户</li>
<li>登录：普通用户</li>
<li>题分查询：充值</li>
<li>软件ID——创建一个软件ID</li>
<li>下载示例代码</li>
</ul>
<h2 id="8-12306-模拟登录">8. 12306 模拟登录</h2>
<p>编码流程：</p>
<ul>
<li>使用<code>selenium</code>打开登录界面</li>
<li>对当前<code>selenium</code>打开的这张界面进行截图</li>
<li>对截取的图片进行局部区域（验证码图片）的裁剪
<ul>
<li>好处：将验证码图片和模拟登录进行一一对应</li>
</ul>
</li>
<li>使用超级鹰识别验证码图片（坐标）</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment">########下述为超级鹰示例代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, password, soft_id</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password =  password.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: self.username,</span><br><span class="line">            <span class="string">&#x27;pass2&#x27;</span>: self.password,</span><br><span class="line">            <span class="string">&#x27;softid&#x27;</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span>(<span class="params">self, im, codetype</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;codetype&#x27;</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">&#x27;userfile&#x27;</span>: (<span class="string">&#x27;ccc.jpg&#x27;</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">&#x27;http://upload.chaojiying.net/Upload/Processing.php&#x27;</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span>(<span class="params">self, im_id</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">&#x27;http://upload.chaojiying.net/Upload/ReportError.php&#x27;</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"><span class="comment">############上述为超级鹰的示例代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用selenium打开登录页面</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">bro.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bro.execute_script(script)</span></span><br><span class="line">bro.get(<span class="string">&#x27;https://kyfw.12306.cn/otn/resources/login.html&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 最大化浏览器窗口</span></span><br><span class="line">bro.maximize_window()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先点击选择  账号登录</span></span><br><span class="line">zhanghao_tag = bro.find_element_by_class_name(<span class="string">&#x27;login-hd-account&#x27;</span>)</span><br><span class="line">zhanghao_tag.click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># save_screenshot就是将当前页面进行截图且保存</span></span><br><span class="line">bro.save_screenshot(<span class="string">&#x27;aa.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定验证码图片对应的左上角和右下角的坐标（裁剪的区域就确定）</span></span><br><span class="line">code_img_ele = bro.find_element_by_class_name(<span class="string">&#x27;touclick-wrapper&#x27;</span>)</span><br><span class="line">location = code_img_ele.location  <span class="comment"># 验证码图片左上角的坐标 x,y</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;location:&#x27;</span>, location)</span><br><span class="line">size = code_img_ele.size  <span class="comment"># 验证码标签对应的长和宽</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size:&#x27;</span>, size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左上角和右下角坐标  #此处 *1.25 原因是作者window电脑默认显示布局为125%（电脑设置--显示--缩放与布局），不乘1.25取不到图片正确位置</span></span><br><span class="line">rangle = (location[<span class="string">&#x27;x&#x27;</span>]*<span class="number">1.25</span>, location[<span class="string">&#x27;y&#x27;</span>]*<span class="number">1.25</span>, (location[<span class="string">&#x27;x&#x27;</span>]+size[<span class="string">&#x27;width&#x27;</span>])*<span class="number">1.25</span>, (location[<span class="string">&#x27;y&#x27;</span>]+size[<span class="string">&#x27;height&#x27;</span>])*<span class="number">1.25</span>)</span><br><span class="line"><span class="comment"># 至此验证码图片区域就确定下来了</span></span><br><span class="line"></span><br><span class="line">i = Image.<span class="built_in">open</span>(<span class="string">&#x27;./aa.png&#x27;</span>)</span><br><span class="line">code_img_name = <span class="string">&#x27;./code.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crop根据指定区域进行图片裁剪</span></span><br><span class="line">frame = i.crop(rangle)</span><br><span class="line">frame.save(code_img_name)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将验证码图片提交给超级鹰进行识别</span></span><br><span class="line"></span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">&#x27;超级🦅账号&#x27;</span>, <span class="string">&#x27;超级🦅密码&#x27;</span>, <span class="string">&#x27;软件ID&#x27;</span>)</span><br><span class="line">im = <span class="built_in">open</span>(<span class="string">&#x27;code.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(chaojiying.PostPic(im, <span class="number">9004</span>)[<span class="string">&#x27;pic_str&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = chaojiying.PostPic(im, <span class="number">9004</span>)[<span class="string">&#x27;pic_str&#x27;</span>]</span><br><span class="line">all_list = []   <span class="comment"># 要存储即将被点击的点的坐标  [[x1,y1],[x2,y2]]</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;|&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">    list_1 = result.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    count_1 = <span class="built_in">len</span>(list_1)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_1):</span><br><span class="line">        xy_list = []</span><br><span class="line">        x = <span class="built_in">int</span>(list_1[i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(list_1[i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">        xy_list.append(x)</span><br><span class="line">        xy_list.append(y)</span><br><span class="line">        all_list.append(xy_list)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(result.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    y = <span class="built_in">int</span>(result.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    xy_list = []</span><br><span class="line">    xy_list.append(x)</span><br><span class="line">    xy_list.append(y)</span><br><span class="line">    all_list.append(xy_list)</span><br><span class="line"><span class="built_in">print</span>(all_list)</span><br><span class="line"><span class="comment"># 遍历列表，使用动作链对每一个列表元素对应的x,y指定的位置进行点击操作</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> all_list:</span><br><span class="line">    x = l[<span class="number">0</span>]</span><br><span class="line">    y = l[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 这里的/1.25，是因为，电脑设置125%，而网页是100%的，所以，要确定网页中对应位置，除以1.25即可</span></span><br><span class="line">    ActionChains(bro).move_to_element_with_offset(code_img_ele, x/<span class="number">1.25</span>, y/<span class="number">1.25</span>).click().perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bro.find_element_by_id(<span class="string">&#x27;J-userName&#x27;</span>).send_keys(<span class="string">&#x27;12306账号&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">bro.find_element_by_id(<span class="string">&#x27;J-password&#x27;</span>).send_keys(<span class="string">&#x27;12306密码&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">bro.find_element_by_id(<span class="string">&#x27;J-login&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 滑块操作，12306检测selenium,,,,滑块总是刷新重试，</span></span><br><span class="line"><span class="comment"># action = ActionChains(bro)</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     slider = bro.find_element_by_css_selector(&#x27;#nc_1_n1z&#x27;)</span></span><br><span class="line"><span class="comment">#     action.click_and_hold(slider)</span></span><br><span class="line"><span class="comment">#     action.move_by_offset(300, 0).perform()</span></span><br><span class="line"><span class="comment">#     time.sleep(15)</span></span><br><span class="line"><span class="comment">#     action.release()</span></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"><span class="comment">#     print(e)</span></span><br><span class="line"></span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(8)--scrapy 框架</title>
    <url>/posts/ae416ec0/</url>
    <content><![CDATA[<h2 id="1-scrapy-框架初识">1. scrapy 框架初识</h2>
<ul>
<li>
<p>什么是框架？</p>
<p>就是一个集成了很多功能并且具有很强通用性的一个项目模板。</p>
</li>
<li>
<p>如何学习框架？</p>
<p>专门学习框架封装的各种功能的详细用法。</p>
</li>
<li>
<p>什么是<code>scrapy</code>？</p>
<p>爬虫中封装好的一个明星框架。</p>
<p>功能：高性能的持久化存储，异步的数据下载，高性能的数据解析，分布式</p>
</li>
</ul>
<span id="more"></span>
<h2 id="2-scrapy-基本使用">2. scrapy 基本使用</h2>
<p>scrapy 框架的基本使用：</p>
<ul>
<li>环境的安装：
<ul>
<li>mac or linux：<code>pip install scrapy</code></li>
<li>windows:
<ul>
<li><code>pip install wheel</code></li>
<li>下载twisted，下载地址：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a></li>
<li>安装twisted：<code>pip install Twisted-20.3.0-cp39-cp39-win_amd64.whl</code></li>
<li><code>pip install pywin32</code></li>
<li><code>pip install scrapy</code></li>
<li>测试：在终端里录入scrapy指令，没有报错即表示安装成功！</li>
</ul>
</li>
</ul>
</li>
<li>创建一个工程：<code>scrapy startproject xxxPro</code></li>
<li><code>cd xxxPro</code></li>
<li>在spiders子目录中创建一个爬虫文件
<ul>
<li><code>scrapy genspider spiderName www.xxx.com</code></li>
</ul>
</li>
<li>执行工程：
<ul>
<li><code>scrapy crawl spiderName</code></li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###firstBlood__first</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    <span class="comment"># 爬虫文件的名称：就是爬虫源文件的一个唯一标识</span></span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    <span class="comment"># 允许的域名：用来限定start_urls列表中哪些url可以进行请求发送</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.baidu.com&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 起始的url列表：该列表中存放的url会被scrapy自动进行请求的发送</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.baidu.com/&#x27;</span>, <span class="string">&#x27;https://www.sogou.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用作于数据解析：response参数表示的就是请求成功后对应的响应对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-scrapy-数据解析操作">3. scrapy 数据解析操作</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;qiubai&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.qiushibaike.com/text/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 解析作者的名称+段子的内容</span></span><br><span class="line">        div_list = response.xpath(<span class="string">&#x27;//div[@id=&quot;col1 old-style-col1&quot;]/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            <span class="comment"># xpath返回的是列表，当时列表元素一定是Selector类型的对象</span></span><br><span class="line">            <span class="comment"># extract可以将Selector对象中data参数存储的字符串提取出来</span></span><br><span class="line">            author = div.xpath(<span class="string">&#x27;./div[1]/a[2]/h2/text()&#x27;</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            <span class="comment"># 列表调用了extract之后。则表示将列表中每一个Selector对象中data对应的字符串提取了出来</span></span><br><span class="line">            content = div.xpath(<span class="string">&#x27;./a[1]/div/span//text()&#x27;</span>).extract()</span><br><span class="line">            content = <span class="string">&#x27;&#x27;</span>.join(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(author,content)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-基于终端指令的持久化存储">4. 基于终端指令的持久化存储</h2>
<p>scrapy 持久化存储：</p>
<ul>
<li>基于终端指令：
<ul>
<li>要求：只可以将 parse 方法的返回值存储到本地的文本文件中</li>
<li>注意：持久化存储对应的文本文件类型只可以为：json、jsonlines、jl、csv、xml、marshal、pickle</li>
<li>指令：<code>scrapy crawl xxx -o filePath</code></li>
<li>好处：简洁高效便捷</li>
<li>缺点：局限性比较强（数据只可以存储到指定后缀的文本文件中）</li>
</ul>
</li>
</ul>
<h2 id="5-基于管道持久化存储操作">5. 基于管道持久化存储操作</h2>
<p>基于管道：</p>
<ul>
<li>编码流程：
<ul>
<li>数据解析</li>
<li>在item类中定义相关的属性</li>
<li>将解析的数据封装到item类型的对象</li>
<li>将item类型的对象提交给管道进行持久化存储的操作</li>
<li>在管道类的process_item中要将其接收到的item对象中存储的数据进行持久化存储操作</li>
<li>在配置文件中开启管道</li>
</ul>
</li>
<li>好处：
<ul>
<li>通用性强。</li>
</ul>
</li>
</ul>
<p>面试题：将爬取到的数据一份存储到本地，一份存储到数据库，如何实现？</p>
<ul>
<li>管道文件中一个管道类对应的是将数据存储到一种平台</li>
<li>爬虫文件提交的 item 只会给管道文件中第一个被执行的管道类接收</li>
<li><code>process_item</code>中的<code>return item</code>表示将 item 传递给下一个即将被执行的管道类</li>
</ul>
<h2 id="6-全站数据爬取">6. 全站数据爬取</h2>
<p>基于 spider 的全站数据爬取：就是将网站中某板块下的全部页码对应的页面数据进行爬取。</p>
<ul>
<li>爬取：校花网明星写真的名称</li>
<li>实现方式：
<ul>
<li>将所有页面的<code>url</code>添加到<code>start_urls</code>列表（不推荐）</li>
<li>自行手动进行请求发送（推荐）</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;------------校花网xiaohua.py----------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaohuaSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;xiaohua&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.521609.com/tuku/mxxz/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成一个通用的url模板(不可变)</span></span><br><span class="line">    url = <span class="string">&#x27;http://www.521609.com/tuku/mxxz/index_%d.html&#x27;</span></span><br><span class="line">    page_num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;/html/body/div[4]/div[3]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            img_name = li.xpath(<span class="string">&#x27;./a/p/text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="built_in">print</span>(img_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.page_num &lt;= <span class="number">28</span>:</span><br><span class="line">            new_url = <span class="built_in">format</span>(self.url%self.page_num)</span><br><span class="line">            self.page_num += <span class="number">1</span></span><br><span class="line">            <span class="comment">#手动请求发送:callback回调函数是专门用作于数据解析</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=new_url,callback=self.parse)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;---------------校花网pipelines.py--------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaohuaproPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;----------------校花网settings.py部分代码---------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="7-五大核心组件">7. 五大核心组件</h2>
<p>五大核心组件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyzhang827/filesimage@main/images/2022/01/05/23354211d021735432927c98f97c955d-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6-4b62c0.png" alt="核心组件"></p>
<ul>
<li>Spiders：
<ul>
<li>产生 URL，对 URL 进行手动发送</li>
<li>进行数据解析</li>
</ul>
</li>
<li>引擎（Scrapy Engine）：
<ul>
<li>数据流处理</li>
<li>触发事务</li>
</ul>
</li>
<li>调度器（Scheduler）：
<ul>
<li>过滤器去重</li>
<li>去重后的请求对象压到队列中</li>
</ul>
</li>
<li>下载器（Downloader）：
<ul>
<li>负责获取页面数据并提供给引擎，而后提供给 Spider</li>
</ul>
</li>
<li>项目管道（Item Pipeline）：
<ul>
<li>负责处理爬虫从网页中抽取的实体，页面被爬虫解析所需的数据存入 item 后，将被发送到管道，经过特定的次序处理数据，最后存入本地文件或者数据库。</li>
</ul>
</li>
</ul>
<h2 id="8-请求传参">8. 请求传参</h2>
<ul>
<li>使用场景：如果爬取解析的数据不在同一张页面中。（深度爬取）</li>
<li>需求：爬取 boss 的岗位名称和岗位描述</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 我尝试着并未有啥结果.......等大佬</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> bossPro.items <span class="keyword">import</span> BossproItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BossSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;boss&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zhipin.com/c100010000/?page=1&amp;ka=page-1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.zhipin.com/c100010000/?page=%d&#x27;</span></span><br><span class="line">    page_num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 回调函数接收item</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        job_desc = response.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div[3]/div/div[2]/div[2]/div[1]/div//text()&#x27;</span>).extract()</span><br><span class="line">        job_desc = <span class="string">&#x27;&#x27;</span>.join(job_desc)</span><br><span class="line">        <span class="built_in">print</span>(job_desc)</span><br><span class="line">        item[<span class="string">&#x27;job_desc&#x27;</span>] = job_desc</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析首页中的岗位名称</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;main&quot;]/div/div[2]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            item = BossproItem()</span><br><span class="line"></span><br><span class="line">            job_name = li.xpath(<span class="string">&#x27;.//div/div[1]/div[1]/div/div[1]/span[1]/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            item[<span class="string">&#x27;job_name&#x27;</span>] = job_name</span><br><span class="line">            <span class="built_in">print</span>(job_name)</span><br><span class="line">            detail_url = <span class="string">&#x27;https://www.zhipin.com&#x27;</span> + li.xpath(<span class="string">&#x27;.//div/div[1]/div[1]/div/div[1]/span[1]/a/@href&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 对详情页发请求获取详情页的页面源码数据</span></span><br><span class="line">            <span class="comment"># 手动请求的发送</span></span><br><span class="line">            <span class="comment"># 请求传参：meta=&#123;&#125;，可以将meta字典传递给请求对应的回调函数</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(detail_url,callback=self.parse_detail,meta=&#123;<span class="string">&#x27;item&#x27;</span>:item&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分页操作</span></span><br><span class="line">        <span class="keyword">if</span> self.page_num &lt;= <span class="number">5</span>:</span><br><span class="line">            new_url = <span class="built_in">format</span>(self.url%self.page_num)</span><br><span class="line">            self.page_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(new_url,callback=self.parse)</span><br></pre></td></tr></table></figure></div>
<h2 id="9-scrapy-图片爬取">9. scrapy 图片爬取</h2>
<p>图片数据爬取之 ImagesPipline：</p>
<ul>
<li>
<p>基于 scrapy 爬取字符串类型的数据和爬取图片类型的数据区别？</p>
<ul>
<li>字符串：只需要基于 xpath 进行解析且提交管道进行持久化存储</li>
<li>图片：xpath 解析出图片的 src 属性值，单独的对图片地址发起请求获取二进制类型的数据</li>
</ul>
</li>
<li>
<p>ImagesPipeline：</p>
<ul>
<li>只需要将 img 的 src 的属性值进行解析，提交到管道，管道就会对图片的 src 进行请求发送获取图片的二进制类型的数据，且还会帮我们进行持久化存储。</li>
</ul>
</li>
<li>
<p>需求：爬取站长素材的高清图片</p>
</li>
<li>
<p>使用流程：</p>
<ul>
<li>数据解析（图片的地址）</li>
<li>将存储图片地址的 item 提交到指定的管道类</li>
<li>在管道文件中自己定制一个基于 ImagesPipeLine 的一个管道类
<ul>
<li><code>get_media_request( )</code></li>
<li><code>file_path</code></li>
<li><code>item_completed</code></li>
</ul>
</li>
<li>在配置文件中操作
<ul>
<li>指定图片存储目录：<code>IMAGES_STORE = './imgs_ZYZhang'</code></li>
<li>指定开启的管道：自定制的管道类</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;----------------爬取站长素材高清图片  img.py-----------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> imgsPro.items <span class="keyword">import</span> ImgsproItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;img&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://sc.chinaz.com/tupian/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        div_list = response.xpath(<span class="string">&#x27;//div[@id=&quot;container&quot;]/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            <span class="comment">#注意：使用伪属性 src2</span></span><br><span class="line">            src = <span class="string">&#x27;https:&#x27;</span> + div.xpath(<span class="string">&#x27;./div/a/img/@src2&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            item = ImgsproItem()</span><br><span class="line">            item[<span class="string">&#x27;src&#x27;</span>] = src</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;----------------------爬取站长素材高清图片  pipelines.py---------------------------&#x27;&#x27;&#x27;</span>            </span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ImgsproPipeline(object):</span></span><br><span class="line"><span class="comment">#     def process_item(self, item, spider):</span></span><br><span class="line"><span class="comment">#         return item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">imgsPileLine</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以根据图片地址进行图片数据的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定图片存储的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        imgName = request.url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> imgName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span>(<span class="params">self, results, item, info</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item <span class="comment"># 返回给下一个即将被执行的管道类</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;---------------------------------爬取站长素材高清图片  items.py-----------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgsproItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;------------------------------爬取站长素材高清图片 setting.py部分代码-------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定图片存储的目录</span></span><br><span class="line">IMAGES_STORE = <span class="string">&#x27;./imgs_ZYZhang&#x27;</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;imgsPro.pipelines.imgsPileLine&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<h2 id="10-中间件">10. 中间件</h2>
<ul>
<li>下载中间件：
<ul>
<li>位置：引擎和下载器之间</li>
<li>作用：批量拦截到整个工程中所有的请求和响应</li>
<li>拦截请求：
<ul>
<li>UA 伪装：<code>process_request</code></li>
<li>代理 IP：<code>process_exception:return request</code></li>
</ul>
</li>
<li>拦截响应：
<ul>
<li>篡改响应数据，响应对象</li>
<li>网易新闻爬取</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="11-网易新闻">11. 网易新闻</h2>
<p>需求：爬取网易新闻的新闻数据（标题和内容）</p>
<ul>
<li>通过网易新闻的首页解析出几大板块对应的详情页的 url（经验证，无动态加载）</li>
<li>每个板块点击后，其中的新闻标题都是动态加载出来的（动态加载）</li>
<li>通过解析出每一条新闻详情页的 url，获取详情页的页面源码，解析出新闻内容</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;-------------------------------网易新闻  wangyi.py------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> wangyiPro.items <span class="keyword">import</span> WangyiproItem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;wangyi&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.cccom&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://news.163.com/&#x27;</span>]</span><br><span class="line">    models_urls = []  <span class="comment">#存储五个板块对应详情页的url</span></span><br><span class="line">    <span class="comment">#解析五大板块对应详情页的url</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#实例化一个浏览器对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bro = webdriver.Chrome(executable_path=<span class="string">&#x27;F:\PythonProjects\爬虫\动态加载数据处理\chromedriver.exe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;index2016_wrap&quot;]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li&#x27;</span>)</span><br><span class="line">        alist = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> alist:</span><br><span class="line">            model_url = li_list[index].xpath(<span class="string">&#x27;./a/@href&#x27;</span>).extract_first()</span><br><span class="line">            self.models_urls.append(model_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#依次对每一个板块对应的页面进行请求</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.models_urls:      <span class="comment">#对每一个板块的url进行请求发送</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url,callback=self.parse_model)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#每一个板块对应的新闻标题相关的内容都是动态加载</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_model</span>(<span class="params">self,response</span>):</span>    <span class="comment">#解析每一个板块页面中对应新闻的标题和新闻详情页的url</span></span><br><span class="line">        <span class="comment"># response.xpath()</span></span><br><span class="line">        div_list = response.xpath(<span class="string">&#x27;/html/body/div/div[3]/div[4]/div[1]/div/div/ul/li/div/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            title = div.xpath(<span class="string">&#x27;./div/div[1]/h3/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            new_detail_url = div.xpath(<span class="string">&#x27;./div/div[1]/h3/a/@href&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            item = WangyiproItem()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line"></span><br><span class="line">            <span class="comment">#对新闻详情页的url发起请求</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=new_detail_url, callback=self.parse_detail, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">self,response</span>):</span>       <span class="comment"># 解析新闻内容</span></span><br><span class="line">        content = response.xpath(<span class="string">&#x27;//*[@id=&quot;content&quot;]/div[2]//text()&#x27;</span>).extract()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(content)</span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;content&#x27;</span>] = content</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closed</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.bro.quit()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;-------------------------------网易新闻  pipelines.py-----------------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiproPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;-------------------------------网易新闻  middlewares.py-------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your spider middleware</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiproDownloaderMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy框架 acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called for each request that goes through the downloader</span></span><br><span class="line">        <span class="comment"># middleware.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this request</span></span><br><span class="line">        <span class="comment"># - or return a Response object</span></span><br><span class="line">        <span class="comment"># - or return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest: process_exception() methods of</span></span><br><span class="line">        <span class="comment">#   installed downloader middleware will be called</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过该方法拦截五大板块对应的响应对象，进行篡改，使其满足需求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span>    <span class="comment">#spider爬虫对象</span></span><br><span class="line">        bro = spider.bro  <span class="comment">#获取了在爬虫类中定义的浏览器对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#挑选出指定的响应对象进行篡改</span></span><br><span class="line">        <span class="comment">#    通过url指定request</span></span><br><span class="line">        <span class="comment">#    通过request指定response</span></span><br><span class="line">        <span class="keyword">if</span> request.url <span class="keyword">in</span> spider.models_urls:</span><br><span class="line">            bro.get(request.url)   <span class="comment">#五个板块对应的url进行请求</span></span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">            page_text = bro.page_source  <span class="comment">#包含了动态加载的新闻数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#response #五大板块对应的响应对象</span></span><br><span class="line">            <span class="comment">#针对定位到的这些response进行篡改</span></span><br><span class="line">            <span class="comment">#实例化一个新的响应对象（符合需求：包含动态加载出的新闻数据），替代原来旧的响应对象</span></span><br><span class="line">            <span class="comment">#如何获取动态加载出的新闻数据？</span></span><br><span class="line">                <span class="comment">#基于selenium便捷的获取动态加载数据</span></span><br><span class="line">            new_response = HtmlResponse(url=request.url, body=page_text, encoding=<span class="string">&#x27;utf-8&#x27;</span>, request=request)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> new_response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#response #其他请求对应的响应对象</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called when a download handler or a process_request()</span></span><br><span class="line">        <span class="comment"># (from other downloader middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this exception</span></span><br><span class="line">        <span class="comment"># - return a Response object: stops process_exception() chain</span></span><br><span class="line">        <span class="comment"># - return a Request object: stops process_exception() chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;-----------------------------网易新闻 setting.py部分代码---------------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#USER_AGENT = &#x27;wangyiPro (+http://www.yourdomain.com)&#x27;</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;wangyiPro.middlewares.WangyiproDownloaderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;wangyiPro.pipelines.WangyiproPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="12-CrawlSpider-的全站数据爬取">12. CrawlSpider 的全站数据爬取</h2>
<p>CrawlSpider：基于 Spider 的一个子类</p>
<ul>
<li>全站数据爬取的方式
<ul>
<li>基于 Spider：手动请求发送</li>
<li>基于 CrawlSpider</li>
</ul>
</li>
<li>CrawlSpider的使用：
<ul>
<li>创建一个工程</li>
<li>cd  XXX</li>
<li>创建爬虫文件（CrawlSpider）
<ul>
<li><code>scrapy  genspider  -t  crawl  xxx   www.xxxx.com</code></li>
<li>链接提取器（LinkExtractor）：根据指定规则（allow=“正则”）进行指定链接的提取</li>
<li>规则解析器（Rule）：将链接提取器提取到的链接进行指定规则（callback）的解析操作</li>
</ul>
</li>
</ul>
</li>
<li>需求：爬取阳光热线网站中的编号，新闻标题，新闻内容，标号
<ul>
<li>分析：爬取的数据没有在同一张页面中</li>
<li>
<ol>
<li>可以使用链接提取器提取所有的页码链接</li>
<li>让链接提取器提取所有的问政详情页链接</li>
</ol>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;---------------------阳光问政    sun.py---------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;网站页面源码跟视频课有改动，建议follow先改False爬一下，不然容易被封IP，有兴趣的可以改改，搞个代理啥的再爬&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> sunPro.items <span class="keyword">import</span> SunproItem, DetailItem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：爬取阳光热线网站中的编号，新闻标题，新闻内容，标号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;sun&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://wz.sun0769.com/political/index/politicsNewest?id=1&amp;page=&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#链接提取器：根据指定规则（allow=&quot;正则&quot;）进行指定链接的提取</span></span><br><span class="line">    link = LinkExtractor(allow=<span class="string">r&#x27;id=1&amp;page=\d+&#x27;</span>)</span><br><span class="line">    link_detail = LinkExtractor(allow=<span class="string">r&#x27;index\?id=\d+&#x27;</span>)</span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment">#规则解析器：将链接提取器提取到的链接进行指定规则（callback）的解析操作</span></span><br><span class="line">        Rule(link, callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment">#follow=True：可以将链接提取器 继续作用到 链接提取器提取到的链接 所对应的页面中</span></span><br><span class="line">        Rule(link_detail, callback=<span class="string">&#x27;parse_detail&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#http://wz.sun0769.com/political/politics/index?id=490505</span></span><br><span class="line">    <span class="comment">#http://wz.sun0769.com/political/politics/index?id=490504</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析新闻编号和新闻的标题</span></span><br><span class="line">    <span class="comment"># 如下两个解析方法中是不可以实现请求传参！</span></span><br><span class="line">    <span class="comment"># 无法将两个解析方法解析的数据存储到同一个item中，可以依次存储到两个item中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 注意：xpath表达式中不可以出现tbody标签</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;/html//div[2]/div[3]/ul[2]/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            new_num = li.xpath(<span class="string">&#x27;./span[1]/text()&#x27;</span>).extract_first()</span><br><span class="line">            new_title = li.xpath(<span class="string">&#x27;./span[3]/a/text()&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            item = SunproItem()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = new_title</span><br><span class="line">            item[<span class="string">&#x27;new_num&#x27;</span>] = new_num</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析新闻内容和新闻编号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        new_id = response.xpath(<span class="string">&#x27;/html//div[3]/div[2]/div[2]/div[1]/span[4]/text()&#x27;</span>).extract_first().strip().replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        new_content = response.xpath(<span class="string">&#x27;/html//div[3]/div[2]/div[2]/div[2]/pre/text()&#x27;</span>).extract()</span><br><span class="line">        new_content = <span class="string">&#x27;&#x27;</span>.join(new_content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(new_id,new_content)</span></span><br><span class="line">        item = DetailItem()</span><br><span class="line">        item[<span class="string">&#x27;content&#x27;</span>] = new_content</span><br><span class="line">        item[<span class="string">&#x27;new_id&#x27;</span>] = new_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;-------------------------------pipelines.py------------------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunproPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment"># 如何判定item的类型</span></span><br><span class="line">        <span class="comment"># 将数据写入数据库时，如何保证数据的一致性</span></span><br><span class="line">        <span class="keyword">if</span> item.__class__.__name__ == <span class="string">&#x27;DetailItem&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&#x27;new_id&#x27;</span>],item[<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(item[<span class="string">&#x27;new_num&#x27;</span>],item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;---------------------------items.py----------------------&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunproItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    new_num = scrapy.Field()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    new_id = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure></div>
<h2 id="13-分布式概述及搭建">13. 分布式概述及搭建</h2>
<p>分布式爬虫：</p>
<ul>
<li>概念：我们需要搭建一个分布式的机群，让其对一组资源进行分布联合爬取。</li>
<li>作用：提升爬取数据的效率</li>
</ul>
<p>如何实现分布式？</p>
<ul>
<li>安装一个 scrapy-redis 的组件</li>
<li>原生的 scrapy 是不可以实现分布式爬虫的，必须要让 crapy-redis 组件一起实现分布式爬虫。</li>
</ul>
<p>为什么原生的 scrapy 不可以实现分布式？</p>
<ul>
<li>调度器不可以被分布式机群共享</li>
<li>管道不可以被分布式机群共享</li>
</ul>
<p>scrapy-redis 组件作用：</p>
<ul>
<li>可以给原生的 scrapy 框架提供可以被共享的<em>管道</em>和<em>调度器</em>。</li>
</ul>
<p>scrapy-redis 实现流程：</p>
<ul>
<li>
<p>创建一个工程</p>
</li>
<li>
<p>创建一个基于 CrawlSpider 的爬虫文件</p>
</li>
<li>
<p>修改当前的爬虫文件：</p>
<ul>
<li>导包：<code>from scrapy_redis.spiders  import  RedisCrawlSpider</code></li>
<li>将 start_urls 和 allowed_domains 进行注释</li>
<li>添加一个新属性：<code>redis_key = '   '</code> 可以被共享的调度器队列的名称</li>
<li>编写数据解析相关的操作</li>
<li>将当前爬虫类的父类修改成 RedisCrawlSpider</li>
</ul>
</li>
<li>
<p>修改配置文件 settings</p>
<ul>
<li>
<p>指定使用可以被共享的管道：</p>
</li>
<li>
<p><code>ITEM_PIPELINES = &#123;'scrapy_redis.pipelines.RedisPipeline': 400 &#125;</code></p>
</li>
<li>
<p>指定调度器：</p>
</li>
<li>
<p>增加了一个去重容器类的配置，作用是用 Redis 的 set 集合来存储请求的指纹数据，从而实现请求去重的持久化</p>
<p><code>DUPEFILTER_CLASS = &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</code></p>
<p>使用scrapy-redis组件自己的调度器</p>
<p><code>SCHEDULER = &quot;scrapy_redis.scheduler.Scheduler&quot;</code></p>
<p>配置调度器是否要持久化，也就是当爬虫结束了，要不要清空 Redis 中请求队列和去重指纹的 set。如果是 True，就表示要持久化存储，就不清数据，否则清空数据</p>
<p><code>SCHEDULER_PERSIST = True</code></p>
</li>
<li>
<p>指定redis服务器</p>
</li>
</ul>
</li>
<li>
<p>redis 相关操作配置：</p>
<ul>
<li>配置 redis 的配置文件：
<ul>
<li>linux 或者 mac：<code>redis.conf</code></li>
<li>windows：<code>redis.windows.conf</code></li>
<li>打开配置文件修改：
<ul>
<li>将<code>bind 127.0.0.1</code>进行注释或删除</li>
<li>关闭保护模式：<code>protected-mode yes</code>改为no</li>
</ul>
</li>
</ul>
</li>
<li>结合着配置文件开启 redis 服务
<ul>
<li>redis-server 配置文件</li>
<li>启动客户端：redis-cli</li>
</ul>
</li>
</ul>
</li>
<li>
<p>执行工程：</p>
<ul>
<li><code>scrapy  runspider  xxx.py</code></li>
</ul>
</li>
<li>
<p>向调度器的队列中放入一个起始的 url：</p>
<ul>
<li>调度器的队列在 redis 的客户端中</li>
<li><code>lpush  xxx  www.xxx.com</code></li>
</ul>
</li>
<li>
<p>爬取到的数据存储在了 redis 的 <code>proName:items</code> 这个数据结构中</p>
</li>
</ul>
<h2 id="14-增量式爬虫">14. 增量式爬虫</h2>
<ul>
<li>概念：监测网站数据更新的情况，只会爬取网站最新更新出来的数据。</li>
<li>分析：
<ul>
<li>指定一个起始 url</li>
<li>基于 CrawlSpider 获取其他页码链接</li>
<li>基于 Rule 将其他页码链接进行请求</li>
<li>从每一个页码对应的页面源码中解析出每一个电影详情页的 URL</li>
<li>核心：检测电影详情页的 url 之前有没有请求过
<ul>
<li>将爬取过的电影详情页的url存储</li>
<li>存储到 redis 的 set 数据结构</li>
</ul>
</li>
<li>对详情页的 url 发起请求，然后解析出电影的名称和简介</li>
<li>进行持久化存储</li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习笔记(9)--异步编程 补充</title>
    <url>/posts/6654cc58/</url>
    <content><![CDATA[<p>为什么要讲？</p>
<ul>
<li>这一部分的知识点不太容易学习（异步非阳塞、 asyncio）</li>
<li>异步相关话题和框架越来越多，例如：tornado、fastapi、django 3.x asgi、aiohttp 都在异步→提升性能</li>
</ul>
<p>如何讲解？</p>
<ul>
<li>第一部分：协程</li>
<li>第二部分：asyncio 模块进行异步编程</li>
<li>第三部分：实战案例</li>
</ul>
<span id="more"></span>
<h2 id="1-协程">1. 协程</h2>
<p>协程不是计算机提供，程序员人为创造。</p>
<p>协程（ Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br></pre></td></tr></table></figure></div>
<p>实现协程的集中方法：</p>
<ul>
<li>greelet，早期模块</li>
<li>yield 关键字</li>
<li>asyncio 装饰器（py3.4 及以后版本）</li>
<li>async、await 关键字（py3.5 及以后版本）</li>
</ul>
<h3 id="（1）greenlet-实现协程">（1）greenlet 实现协程</h3>
<p><code>pip install greenlet</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    gr2.switch()	<span class="comment"># 切换到func2函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    gr2.switch()	<span class="comment"># 切换到func2函数，从上一次执行的位置继续向后执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    gr1.switch()	<span class="comment"># 切换到func1函数，从上一次执行的位置继续向后执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">gr1 = greenlet(func1)</span><br><span class="line">gr2 = greenlet(func2)</span><br><span class="line">gr1.switch()		<span class="comment"># 去执行func1函数</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（2）yield-关键字">（2）yield 关键字</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> func2()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">f1 = func1()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）asyncio-装饰器">（3）asyncio 装饰器</h3>
<p>==遇到IO阻塞自动切换==</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)		<span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)		<span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）async、await-关键字（推荐）">（4）async、await 关键字（推荐）</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)		<span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)		<span class="comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure></div>
<h2 id="2-协程的意义">2. 协程的意义</h2>
<p>在一个线程中，如果遇到 IO 等待的时间，线程不会等待，利用空闲的时间去做其他的事情。</p>
<p>需求：下载三张图片（网络 IO）</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;普通的request方式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始下载：&#x27;</span>, url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file_name = url.rsplit(<span class="string">&#x27;-&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">        file_object.write(response.content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/210228/010301-1614445381005c.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> url_list:</span><br><span class="line">        download_image(item)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;使用aiohttp模块下载    协程方式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">session, url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;发送请求：&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, verify_ssl = <span class="literal">False</span>) <span class="keyword">as</span> response:</span><br><span class="line">        content = <span class="keyword">await</span> response.content.read()</span><br><span class="line">        file_name = url.rsplit(<span class="string">&#x27;-&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">            file_object.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>, url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        url_list = [</span><br><span class="line">            <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/210228/010301-1614445381005c.jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        tasks = [asyncio.create_task(fetch(session, url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># asyncio.run(main())     # 正常运行但是会报错,换成loop方式就ok</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() - start)</span><br></pre></td></tr></table></figure></div>
<h2 id="3-异步编程">3. 异步编程</h2>
<h3 id="（1）事件循环">（1）事件循环</h3>
<p>概念：理解为一个死循环，去检测并执行某些代码。</p>
<div class="highlight-wrap" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 伪代码</span></span><br><span class="line">任务列表 = [任务1 , 任务2 , 任务3 ....]</span><br><span class="line">while True:</span><br><span class="line"><span class="code">	可执行的任务列表，已完成的任务列表--&gt;去任务列表中检测所有的任务，将“可执行”和“已完成”的任务返回</span></span><br><span class="line"><span class="code">	for 就绪任务 in 可执行的任务列表:</span></span><br><span class="line"><span class="code">		执行已就绪的任务</span></span><br><span class="line"><span class="code">    for 已完成的任务 in 已完成的任务列表:</span></span><br><span class="line"><span class="code">    	在任务列表中移除 已完成的任务</span></span><br><span class="line"><span class="code">    如果 任务列表 中的任务都已经完成，则终止循环。</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成或获取一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务task放到 任务列表</span></span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）快速上手">（2）快速上手</h3>
<p>协程函数：定义函数时 <code>async def 函数名</code></p>
<p>协程对象：执行 协程函数 得到的对象</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">result = func()</span><br></pre></td></tr></table></figure></div>
<!--注意：执行协程函数创建协程对象，函数内部代码不会执行！-->
<!--如果想要运行协程函数内部代码，必须要将协程代码交给事件循环来处理。-->
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;快来打我吧！&#x27;</span>)</span><br><span class="line">result = func()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(result)</span><br><span class="line"><span class="comment"># asyncio.run(result)		#python3.7</span></span><br></pre></td></tr></table></figure></div>
<h3 id="（3）await关键字">（3）await关键字</h3>
<p><code>await 可等待的对象(协程对象、Future对象、Task对象)</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例一&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;来玩呀&#x27;</span>)</span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例二&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">others</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行协程函数内部代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成以后再继续往下执行，当前协程挂起时，事件循环可以去执行其他区协程（任务</span></span><br><span class="line">    response = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response)</span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例三&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">others</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行协程函数内部代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一个协程函数中可以有多个await关键字</span></span><br><span class="line">    response1 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response1)</span><br><span class="line"></span><br><span class="line">    response2 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response2)</span><br><span class="line"></span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure></div>
<!--await就是等待对象的值得到结果之后再继续向下走。-->
<h3 id="（4）Task对象">（4）Task对象</h3>
<p><a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html?highlight=task#asyncio.Task">Task对象官方文档</a></p>
<p>主要就是在事件循环中添加多个任务。</p>
<p>Task 用于并发调度协程，<code>通过asyncio.create_task(协程对象)</code> 的方式创建 Task 对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数之外，还可以使用低层级的 <code>loop.create_task()</code> 或者 <code>ensure_future()</code> 函数，不建议手动实例化 Task 对象</p>
<!--注意：asyncio.create_task() 函数在 Python 3.7 中被加入，在Python 3.7之前，可以改用低层级的 asyncio.ensure_future() 函数。-->
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main开始&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建Task对象，将当前执行func函数任务添加到事件循环</span></span><br><span class="line">    task1 = asyncio.create_task(func())</span><br><span class="line">    <span class="comment"># 创建Task对象，将当前执行func函数任务添加到事件循环</span></span><br><span class="line">    task2 = asyncio.create_task(func())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main结束&#x27;</span>)</span><br><span class="line">    <span class="comment"># 当执行某协程遇到IO操作时，会自动华切换执行其他任务</span></span><br><span class="line">    <span class="comment"># 此处的 await 是等待相对应的协程全部执行完毕并获取结果</span></span><br><span class="line">    ret1 = <span class="keyword">await</span> task1</span><br><span class="line">    ret2 = <span class="keyword">await</span> task2</span><br><span class="line">    <span class="built_in">print</span>(ret1,ret2)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main开始&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.create_task(func(), name=<span class="string">&#x27;n1&#x27;</span>),</span><br><span class="line">        asyncio.create_task(func(), name=<span class="string">&#x27;n2&#x27;</span>)</span><br><span class="line">    ]	<span class="comment"># 多个任务，更常使用列表形式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main结束&#x27;</span>)    </span><br><span class="line">    </span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(task_list, timeout=<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line">    </span><br><span class="line">asyncio.run(main())			<span class="comment"># loop事件循环首先创建，然后列表才创建进去</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例3&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用这段代码会报错，因为列表里的代码会立即加到事件循环中去，但是此时事件循环还没有创建</span></span><br><span class="line"><span class="comment"># task_list = [</span></span><br><span class="line"><span class="comment">#     asyncio.create_task(func(), name=&#x27;n1&#x27;),</span></span><br><span class="line"><span class="comment">#     asyncio.create_task(func(), name=&#x27;n2&#x27;)</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line">task_list = [</span><br><span class="line">    func(),</span><br><span class="line">    func()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">done, pending = asyncio.run(asyncio.wait(task_list))</span><br><span class="line"><span class="built_in">print</span>(done)</span><br></pre></td></tr></table></figure></div>
<h3 id="（5）asyncio-Future对象">（5）asyncio.Future对象</h3>
<p><a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html?highlight=future#asyncio.Future">asyncio.Future官方文档</a></p>
<p>Task 对象继承 Future，Task 对象内部 await 结果的处理是基于 Future 对象来的。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前事件循环</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个任务（Future对象），这个任务什么都不干</span></span><br><span class="line">    fut = loop.create_future()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待任务最终的结果（Future对象）,没有结果则会一直等下去。</span></span><br><span class="line">    <span class="keyword">await</span> fut</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">set_after</span>(<span class="params">fut</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    fut.set_result(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前事件循环</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值</span></span><br><span class="line">    <span class="comment"># 即手动设置future任务的最终结果，那么fut就可以结束了</span></span><br><span class="line">    <span class="keyword">await</span> loop.create_task(set_after(fut))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待 future 对象获取最终结果，否则会一直等下去</span></span><br><span class="line">    data = <span class="keyword">await</span> fut</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>
<h3 id="（6）concurrent-futures-Future对象">（6）concurrent.futures.Future对象</h3>
<p><a href="https://docs.python.org/zh-cn/3/library/concurrent.futures.html?highlight=future#module-concurrent.futures">concurrent.futures官方文档</a></p>
<p>使用进程池或者线程池实现异步操作时用到的对象。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> Future</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">value</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers= <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line"><span class="comment">#  pool = ProcessPoolExecutor(max_workers = 5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    fut = pool.submit(func, i)</span><br><span class="line">    <span class="built_in">print</span>(fut)</span><br></pre></td></tr></table></figure></div>
<p>以后写代码或许还有交叉使用。例如：crm项目80%都是属于基于协程异步编程 + MySQL（不支持）【线程或者进程做异步编程】</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="comment"># 某个耗时操作</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;SB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.Run is the default loop&#x27;s executor(默认ThreadPoolExecutor)</span></span><br><span class="line">    <span class="comment"># step1 ：内部调用ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行 func1 函数，并返回一个 concurrent.futures.Future 对象</span></span><br><span class="line">    <span class="comment"># step2 ：调用asyncio.wrap_future 将 concurrent.futures.Future 对象包装为 asyncio.Future 对象</span></span><br><span class="line">    <span class="comment"># 因为 concurrent.futures.Future 对象不支持 await 语法，所以需要包装为 asyncio.Future 对象，才可以使用</span></span><br><span class="line">    fut = loop.run_in_executor(<span class="literal">None</span>, func1)</span><br><span class="line">    result = <span class="keyword">await</span> fut</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;default thread pool&#x27;</span>, result)</span><br><span class="line">    <span class="comment"># 2.Run in a custom thread pool:</span></span><br><span class="line">    <span class="comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span></span><br><span class="line">    <span class="comment"># result = await loop.run_in_executor(pool,func1)</span></span><br><span class="line">    <span class="comment"># print(&#x27;custom thread pool&#x27;,result)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.Run in a custom process pool:</span></span><br><span class="line">    <span class="comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span></span><br><span class="line">    <span class="comment"># result = await loop.run_in_executor(pool,func1)</span></span><br><span class="line">    <span class="comment"># print(&#x27;custom process pool&#x27;,result)</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div>
<h3 id="（7）案例：asyncio-不支持异步的模块">（7）案例：asyncio + 不支持异步的模块</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跟前一节代码一样的效果，但是更耗费资源</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_image</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始下载&#x27;</span>, url)</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># requests模块默认不支持异步操作，所以就使用线程池来配合实现了</span></span><br><span class="line">    future = loop.run_in_executor(<span class="literal">None</span>, requests.get, url)</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> future</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片保存到本地文件</span></span><br><span class="line">    file_name = url.rsplit(<span class="string">&#x27;-&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">        file_object.write(response.content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/210302/000706-1614614826df15.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/200910/200207-1599739327e5a8.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://pic.netbian.com/uploads/allimg/190902/152344-1567409024af8c.jpg&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    tasks = [download_image(url) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line"></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure></div>
<h3 id="（8）异步迭代器">（8）异步迭代器</h3>
<p>什么是异步迭代器？</p>
<p>实现了 <code>__aiter__()</code> 和 <code>__anext__()</code> 方法的对象。<code>__anext__() </code>必须返回一个 <code>awaitable</code> 对象。<code>async for</code> 会处理异步迭代器的 <code>__anext__() </code> 方法所返回的可等待对象，直到其引发一个 <code>StopAsyncIteration</code> 异常。由 <code>PEP 492</code> 引入。</p>
<p>什么是异步可迭代对象？<br>
可在 <code>async for</code> 语句中被使用的对象。必须通过它的 <code>__aiter__()</code> 方法返回一个 <code>asynchronous iterator</code>。由 <code>PEP 492</code> 引入。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义异步迭代器 （同时也是一部可迭代对象）&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">readline</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># await asyncio.sleep(1)</span></span><br><span class="line">        self.count  += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.count == <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__aiter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__anext__</span>(<span class="params">self</span>):</span></span><br><span class="line">        val = <span class="keyword">await</span> self.readline()</span><br><span class="line">        <span class="keyword">if</span> val == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopAsyncIteration</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    obj = Reader()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> item <span class="keyword">in</span> obj:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">asyncio.run( func() )</span><br></pre></td></tr></table></figure></div>
<h3 id="（9）异步上下文管理器">（9）异步上下文管理器</h3>
<p>此种对象通过定义 <code>__aenter__()</code> 和 <code>__aexit__()</code> 方法来对 <code>async with</code> 语句中的环境进行控制。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncContextManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, conn=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.conn = conn</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">do_something</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 异步操作数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aenter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 异步链接数据库</span></span><br><span class="line">        self.conn = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__aexit__</span>(<span class="params">self, exc_type, exc, tb</span>):</span></span><br><span class="line">        <span class="comment"># 异步关闭数据库链接</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncContextManager() <span class="keyword">as</span> f:</span><br><span class="line">        result = <span class="keyword">await</span> f.do_something()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">asyncio.run(func())</span><br></pre></td></tr></table></figure></div>
<h2 id="4-uvloop">4. uvloop</h2>
<p>uvloop 是 asyncio 的事件循环的替代方案。事件循环 &gt; 默认 asyncio 的事件循环。</p>
<p><code>pip install uvloop</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> uvloop</span><br><span class="line">asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写 asyncio 的代码，与之前写的代码一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内部的事件循环自动化会变为 uvloop</span></span><br><span class="line">asyncio.run(...)</span><br></pre></td></tr></table></figure></div>
<!--注意：一个 asgi ->uvicorn 内部默认使用的就是uvloop -->
<h3 id="5-实战案例">5. 实战案例</h3>
<h3 id="（1）异步-redis">（1）异步 redis</h3>
<p>在使用 python 代码操作 redis 时，链接/操作/断开都是网络IO。</p>
<p><code>pip install aioredis</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作者未设置 redis，故此代码未测试</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aioredis</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">address, password</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始执行&#x27;</span>, address)</span><br><span class="line">    <span class="comment"># 网络IO操作：创建 redis 链接</span></span><br><span class="line">    redis = <span class="keyword">await</span> aioredis.create_redis(address, password = password)</span><br><span class="line">    <span class="comment"># 网络IO操作：在 redis 中设置哈希值 car，内部再设三个键值对，即：redis = &#123;car:&#123;key1:1,key2:2,key3:33&#125;&#125;</span></span><br><span class="line">    <span class="keyword">await</span> redis.hmset_dict(<span class="string">&#x27;car&#x27;</span>, key1 = <span class="number">1</span>, key2 = <span class="number">2</span>, key3 = <span class="number">3</span>)</span><br><span class="line">	<span class="comment"># 网络IO操作：去 redis 中获取值</span></span><br><span class="line">    result = <span class="keyword">await</span> redis.hgetall(<span class="string">&#x27;car&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    redis.close()</span><br><span class="line">    <span class="comment"># 网络IO操作：关闭 redis 链接</span></span><br><span class="line">    <span class="keyword">await</span> redis.wait_closed()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>, address)</span><br><span class="line"></span><br><span class="line">asyncio.run(execute(<span class="string">&#x27;redis://47.93.4.198:6379&#x27;</span>, <span class="string">&quot;root!2345&quot;</span>))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aioredis</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">address, password</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始执行&#x27;</span>, address)</span><br><span class="line">    <span class="comment"># 网络IO操作：先去连接 47.93.4.197:6379 遇到IO自动切换任务，去连接 47.93.4.198:6379</span></span><br><span class="line">    redis = <span class="keyword">await</span> aioredis.create_pool(address, password = password)</span><br><span class="line">    <span class="comment"># 网络IO操作：遇到IO自动切换任务</span></span><br><span class="line">    <span class="keyword">await</span> redis.hmset_dict(<span class="string">&#x27;car&#x27;</span>, key1 = <span class="number">1</span>, key2 = <span class="number">2</span>, key3 = <span class="number">3</span>)</span><br><span class="line">	<span class="comment"># 网络IO操作：遇到IO自动切换任务</span></span><br><span class="line">    result = <span class="keyword">await</span> redis.hgetall(<span class="string">&#x27;car&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    redis.close()</span><br><span class="line">    <span class="comment"># 网络IO操作：遇到IO自动切换任务</span></span><br><span class="line">    <span class="keyword">await</span> redis.wait_closed()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>, address)</span><br><span class="line">    </span><br><span class="line">task_list =[</span><br><span class="line">    execute(<span class="string">&#x27;redis://47.93.4.197:6379&#x27;</span>,<span class="string">&#x27;root!2345&#x27;</span>),</span><br><span class="line">    execute(<span class="string">&#x27;redis://47.93.4.198:6379&#x27;</span>,<span class="string">&#x27;root!2345&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure></div>
<h3 id="（2）异步MySQL">（2）异步MySQL</h3>
<p><code>pip3 install aiomysql</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiomysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>():</span></span><br><span class="line">    <span class="comment"># 网络IO操作：连接 MySQL</span></span><br><span class="line">    conn = <span class="keyword">await</span> aiomysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port= <span class="number">3306</span>, user = <span class="string">&#x27;root&#x27;</span>, password = <span class="string">&#x27;123&#x27;</span>,db= <span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line">    <span class="comment"># 网络IO操作：创建 CURSOR</span></span><br><span class="line">    cur = <span class="keyword">await</span> conn.cursor()</span><br><span class="line">	<span class="comment"># 网络IO操作：执行 SQL</span></span><br><span class="line">    <span class="keyword">await</span> cur.execute(<span class="string">&#x27;SELECT Host,User FROM user&#x27;</span>)</span><br><span class="line">    <span class="comment"># 网络IO操作：获取SQL结果</span></span><br><span class="line">    result = <span class="keyword">await</span> cur.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 网络IO操作：关闭 链接</span></span><br><span class="line">    <span class="keyword">await</span> cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">asyncio.run(execute())</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiomysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">host, password</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始&#x27;</span>, host)</span><br><span class="line">    <span class="comment"># 网络IO操作：先连197，遇到IO自动切换，去连198</span></span><br><span class="line">    conn = <span class="keyword">await</span> aiomysql.connect(host = host, port= <span class="number">3306</span>, user = <span class="string">&#x27;root&#x27;</span>, password = password,db= <span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line">    <span class="comment"># 网络IO操作：遇到IO自动切换</span></span><br><span class="line">    cur = <span class="keyword">await</span> conn.cursor()</span><br><span class="line">	<span class="comment"># 网络IO操作：遇到IO自动切换</span></span><br><span class="line">    <span class="keyword">await</span> cur.execute(<span class="string">&#x27;SELECT Host,User FROM user&#x27;</span>)</span><br><span class="line">    <span class="comment"># 网络IO操作：遇到IO自动切换</span></span><br><span class="line">    result = <span class="keyword">await</span> cur.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 网络IO操作：遇到IO自动切换</span></span><br><span class="line">    <span class="keyword">await</span> cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>, host)</span><br><span class="line">task_list =[</span><br><span class="line">    execute(<span class="string">&#x27;47.93.4.197:6379&#x27;</span>,<span class="string">&#x27;root!2345&#x27;</span>),</span><br><span class="line">    execute(<span class="string">&#x27;47.93.4.198:6379&#x27;</span>,<span class="string">&#x27;root!2345&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure></div>
<h3 id="（3）FastAPI框架">（3）FastAPI框架</h3>
<p><code>pip3 install fastapi</code></p>
<p><code>pip3 install uvicorn</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;普通操作接口&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span>&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;luffy:app&quot;</span>,host= <span class="string">&#x27;127.0.0.1&#x27;</span>,port= <span class="number">5000</span>, log_level= <span class="string">&#x27;info&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;示例2&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> aioredis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> aioredis</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="comment"># 创建一个redis的连接池 实际运行时更换自己的redis</span></span><br><span class="line">REDIS_POOL = aioredis.ConnectionPool(<span class="string">&#x27;redis://47.193.14.198:6379&#x27;</span>, password= <span class="string">&#x27;root123&#x27;</span>, minsize = <span class="number">1</span> , maxsize = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;普通操作接口&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span>&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/red&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">red</span>():</span></span><br><span class="line">    <span class="comment"># 异步操作接口</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求来了&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 连接池获取一个连接</span></span><br><span class="line">    conn = <span class="keyword">await</span> REDIS_POOL.acquire()</span><br><span class="line">    redis = Redis(conn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置值</span></span><br><span class="line">    <span class="keyword">await</span> redis.hmset_dict(<span class="string">&#x27;car&#x27;</span>,key1 = <span class="number">1</span>,key2 = <span class="number">2</span>,key3 =<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取值</span></span><br><span class="line">    result = <span class="keyword">await</span> redis.hgetall(<span class="string">&#x27;car&#x27;</span>, encoding =<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#连接归还连接池</span></span><br><span class="line">    REDIS_POOL.release(conn)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;脚本名:app&quot;</span>,host= <span class="string">&#x27;127.0.0.1&#x27;</span>,port= <span class="number">5000</span>, log_level= <span class="string">&#x27;info&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="（4）异步爬虫">（4）异步爬虫</h3>
<p><code>pip3 install aiohttp</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;使用aiohttp模块下载    协程方式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span>(<span class="params">session, url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;发送请求：&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, verify_ssl = <span class="literal">False</span>) <span class="keyword">as</span> response:</span><br><span class="line">        text = <span class="keyword">await</span> response.text()</span><br><span class="line">        file_name = url.rsplit(<span class="string">&#x27;-&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;得到结果：&#x27;</span>, url , <span class="built_in">len</span>(text))</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        url_list = [</span><br><span class="line">            <span class="string">&#x27;https://python.org&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://www.pythonav.com&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        tasks = [asyncio.create_task(fetch(session, url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">        done, pending = <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())    </span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(1)--复杂度及递归</title>
    <url>/posts/5fc41c76/</url>
    <content><![CDATA[<blockquote>
<p>本文档基于<a href="https://www.bilibili.com/video/av332150111?from=search&amp;seid=6537256928008332308&amp;spm_id_from=333.337.0.0">B站视频课程</a></p>
</blockquote>
<h2 id="算法概念">算法概念</h2>
<p><strong>算法（Algorithm）</strong>：一个计算过程，解决问题的办法</p>
<p><strong>Niklaus Wirth</strong> ：“程序 = 数据结构 + 算法“</p>
<h2 id="时间复杂度">时间复杂度</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="comment"># 2 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)        </span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h3 id="算法运行的快慢">算法运行的快慢</h3>
<p>如何体现算法运行的快慢？</p>
<p>不能够使用<strong>时间</strong>来体现算法运行的快慢，因为程序在不同的设备上运行时间也会不同，并且程序中的 n 不同，也会影响程序的运行。所以选择时间复杂度来体现算法运行的快慢。</p>
<p>用时间复杂度来评估算法运行效率，以上述四段代码为例：</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">O(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">O(n)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">O(n²)</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">O(n³)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂度为 O(1)，并不是 O(3)；类似生活中回答几秒，而不是几个一秒;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Algorithm&quot;</span>)</span><br><span class="line"><span class="comment"># 时间复杂度为 O(n²)。并不是 O(n²+n)；类似生活中回答睡觉大概几个小时，而不是具体精确到分钟秒的精度;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记时间复杂度为 O(log₂N) 或者 O(logN)</span></span><br><span class="line"><span class="comment"># 只要循环出现问题规格折半的时候，复杂度式子中会出现 logN</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(n)    </span><br><span class="line">    n = n // <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<h3 id="小结">小结</h3>
<ol>
<li>
<p>时间复杂度是用来估计算法运行时间的一个式子(单位)；</p>
</li>
<li>
<p><strong>一般来说</strong>，时间复杂度高的算法比时间复杂度低的算法慢；</p>
</li>
<li>
<p>常见的时间复杂度(按效率排序)</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">O(<span class="number">1</span>) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n²logn) &lt; O(n³)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>复杂问题的时间复杂度</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">O(n!)	O(<span class="number">2</span>ⁿ)	O(nⁿ)  ...</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h3 id="快速判断算法复杂度">快速判断算法复杂度</h3>
<p>并不是针对所有算法都适用，适用于大多数简单情况。</p>
<ul>
<li>确定问题规格 n</li>
<li>循环减半过程 logn</li>
<li>k 层关于 n 的循环  n<sup>k</sup></li>
</ul>
<p>对于更加复杂的情况，则要根据算法执行过程进行判断。</p>
<h2 id="空间复杂度">空间复杂度</h2>
<p><strong>空间复杂度</strong>：用来评估算法内存占用大小的式子</p>
<p>空间复杂度的表示方式与时间复杂度完全一样：</p>
<ul>
<li>算法使用了几个变量 O(1)</li>
<li>算法使用了长度为 n 的一维列表  O(n)</li>
<li>算法使用了 m 行 n 列的二维列表  O(mn)</li>
</ul>
<p>空间换时间：例如分布式程序。</p>
<h2 id="复习：递归">复习：递归</h2>
<p>递归的两个特点：</p>
<ul>
<li>调用自身</li>
<li>结束条件</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># func1 不合法，没有结束条件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    func1(x-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># func2 不合法，没有结束条件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        func2(x+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># func3 合法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        func3(x-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># func4 合法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        func4(x-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></div>
<h2 id="汉诺塔问题">汉诺塔问题</h2>
<p><img src="https://s2.loli.net/2022/03/27/AT7Io8FVHN5eRnB.png" alt="汉诺塔问题"></p>
<ul>
<li>大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从上往下按照大小顺序摞着64片黄金圆盘。</li>
<li>大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。</li>
<li>在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</li>
<li>64根柱子移动完毕之日，就是世界毁灭之时。</li>
</ul>
<h3 id="分析">分析</h3>
<p>当 n=2 时：</p>
<ol>
<li>把小圆盘从 A 移动到 B</li>
<li>把大圆盘从 A 移动到 C</li>
<li>把小圆盘从 B 移动到 C</li>
</ol>
<p>当 n 个盘时(上面 n-1 个盘子看成一个整体，最下面一个盘子为一个整体)</p>
<ol>
<li>把 n-1 个圆盘从 A 经过 C 移动到 B (原问题的 -1 次的递归问题)</li>
<li>把第 n 个圆盘从 A 移动到 C (因为仅一个盘子，仅一次移动即可)</li>
<li>把 n-1 个圆盘从 B 经过 A 移动到 C</li>
</ol>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span>(<span class="params">n, a, b, c</span>):</span>							<span class="comment"># 把n个圆盘从a经过b移动到c</span></span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        hanoi(n-<span class="number">1</span>, a, c, b)						<span class="comment"># 把n-1个圆盘从a经过c移动到b</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;moving from %s to %s&quot;</span> % (a, c))  <span class="comment"># 把第n个圆盘从a移动到c</span></span><br><span class="line">        hanoi(n-<span class="number">1</span>, b, a, c)						<span class="comment"># 把n-1个圆盘从b经过a移动到c</span></span><br><span class="line">hanoi(<span class="number">3</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)        </span><br></pre></td></tr></table></figure></div>
<ul>
<li>
<p>汉诺塔移动次数的递推式：<br>
$$<br>
H(n) = 2H(n-1) + 1<br>
$$</p>
</li>
<li>
<p>假设婆罗门每秒钟搬运一个盘子，则总共需要 5800 亿年。</p>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(2)--查找</title>
    <url>/posts/20a79595/</url>
    <content><![CDATA[<h2 id="列表查找">列表查找</h2>
<h3 id="概念">概念</h3>
<p><strong>查找</strong>：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</p>
<p><strong>列表查找</strong>：(线性表查找)从列表中查找指定元素</p>
<ul>
<li>输入：列表、待查找元素</li>
<li>输出：元素下标(未找到元素时一般返回 None 或者 -1)</li>
</ul>
<p>内置列表查找函数：index()</p>
<span id="more"></span>
<h3 id="顺序查找-Linear-Search">顺序查找(Linear Search)</h3>
<p><strong>顺序查找</strong>：也叫线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或者搜索到列表的最后一个元素为止。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> value == val:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></div>
<h3 id="二分查找-Binary-Search">二分查找(Binary Search)</h3>
<p><strong>二分查找</strong>：又叫折半查找，从有序列表的初识候选区<code>li[0:n]</code>开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。</p>
<p><img src="https://s2.loli.net/2022/03/27/WgPx41sInqaAMle.png" alt="二分查找"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:		<span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:		<span class="comment"># 待查找的值在 mid 左侧</span></span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:					<span class="comment"># 待查找的值在 mid 右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>：</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(li, <span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>
<p>时间复杂度：<code>O(logn)</code></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cal_time.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s running time: %s secs.&quot;</span> % (func.__name__, t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上述两个 py 文件放在一个文件夹中</span></span><br><span class="line"><span class="keyword">from</span> cal_time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> value == val:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:		<span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:		<span class="comment"># 待查找的值在 mid 左侧</span></span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:					<span class="comment"># 待查找的值在 mid 右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>：</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line">linear_search(li, <span class="number">3890</span>)</span><br><span class="line">binary_search(li, <span class="number">3890</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="index">index()</h3>
<p>内置列表查找函数<code>index()</code>是线性查找。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(3)--排序</title>
    <url>/posts/58ea5bd2/</url>
    <content><![CDATA[<h2 id="列表排序">列表排序</h2>
<h3 id="概念">概念</h3>
<p><strong>排序</strong>：将一组”无序“的记录序列调整为”有序“的记录序列。</p>
<p>常见的排序算法：</p>
<ul>
<li>冒泡排序、选择排序、插入排序</li>
<li>快速排序、堆排序、归并排序</li>
<li>希尔排序、计数排序、基数排序</li>
</ul>
<span id="more"></span>
<h3 id="冒泡排序-Bubble-Sort">冒泡排序(Bubble Sort)</h3>
<ul>
<li>
<p>列表每两个相邻的数，如果前面比后面大，则交换这两个数。</p>
</li>
<li>
<p>一趟排序完成后，则无序区域减少一个数，有序区域增加一个数。</p>
</li>
<li>
<p>代码关键点：趟、无序区范围</p>
</li>
<li>
<p>时间复杂度：<code>O(n²)</code></p>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):	<span class="comment"># 第 i 趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:		<span class="comment"># 改为 &lt; 就是降序列表</span></span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">1000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优化后的冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):	<span class="comment"># 第 i 趟</span></span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:		<span class="comment"># 改为 &lt; 就是降序列表</span></span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">		<span class="built_in">print</span>(li)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="选择排序-Select-Sort">选择排序(Select Sort)</h3>
<ul>
<li>一趟排序记录最小的数，放到第一个位置</li>
<li>再一趟排序记录列表无序区最小的数，放到第二个位置</li>
<li>…</li>
<li>算法关键点：有序区和无序区、无序区最小数的位置</li>
<li>时间复杂度：<code>O(n²)</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort_simple</span>(<span class="params">li</span>):</span></span><br><span class="line">    li_new = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">        min_val = <span class="built_in">min</span>(li)</span><br><span class="line">        li.new.append(min_val)</span><br><span class="line">        li.remove(min_val)</span><br><span class="line">	<span class="keyword">return</span> li_new</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):		<span class="comment"># 第 i 趟</span></span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">		<span class="keyword">if</span> min_loc != i:</span><br><span class="line">   			li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">                          </span><br><span class="line">li = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># print(select_sort_simple(li))</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">select_sort(li)</span><br><span class="line"><span class="comment"># print(select_sort(li))</span></span><br></pre></td></tr></table></figure></div>
<h3 id="插入排序">插入排序</h3>
<ul>
<li>初始时手里(有序区)只有一张牌</li>
<li>每次(从无序区)摸一张牌，插入到手里已经有的牌的正确位置</li>
<li>时间复杂度：<code>O(n²)</code></li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):		<span class="comment"># i 表示摸到的牌的下标</span></span><br><span class="line">        tmp = li[j]</span><br><span class="line">        j = i - <span class="number">1</span>					<span class="comment"># j 指的是手里牌的下标</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">		li[j+<span class="number">1</span>] = tmp</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">        </span><br><span class="line">li = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">insert_sort(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="快速排序">快速排序</h3>
<ul>
<li>快</li>
<li>取一个元素 p (第一个元素)，使元素 p 归位；</li>
<li>列表被 p 分为两部分，左边都比 p 小，右边都比 p 大；</li>
<li>递归完成排序</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/27/1Ic27ntwhQKTaAF.png" alt="快速排序"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:			<span class="comment"># 从右边找出比 tmp 小的数</span></span><br><span class="line">            right -= <span class="number">1</span>					<span class="comment"># 往左走一步</span></span><br><span class="line">		li[left] = li[right]			<span class="comment"># 把右边空值写到左边空位上</span></span><br><span class="line">        <span class="comment"># print(li, &#x27;right&#x27;)</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">		li[right] = li[left]			<span class="comment"># 把左边的值写到右边空位上 </span></span><br><span class="line">		<span class="comment"># print(li, &#x27;left&#x27;)</span></span><br><span class="line">    li[left] = tmp						<span class="comment"># 把 tmp 归位</span></span><br><span class="line">	<span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>, right)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">li = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br><span class="line">quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>快速排序的时间复杂度：<code>O(nlogn)</code></li>
<li>快速排序的问题：递归存在深度问题，消耗系统资源；存在最坏的情况出现的可能，</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cal_time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:			<span class="comment"># 从右边找出比 tmp 小的数</span></span><br><span class="line">            right -= <span class="number">1</span>					<span class="comment"># 往左走一步</span></span><br><span class="line">		li[left] = li[right]			<span class="comment"># 把右边空值写到左边空位上</span></span><br><span class="line">        <span class="comment"># print(li, &#x27;right&#x27;)</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">		li[right] = li[left]			<span class="comment"># 把左边的值写到右边空位上 </span></span><br><span class="line">		<span class="comment"># print(li, &#x27;left&#x27;)</span></span><br><span class="line">    li[left] = tmp						<span class="comment"># 把 tmp 归位</span></span><br><span class="line">	<span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"><span class="comment"># @cal_time 因为函数中存在递归，直接使用会打印很多遍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_quick_sort</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        _quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        _quick_sort(li, mid+<span class="number">1</span>, right)</span><br><span class="line"><span class="meta">@cal_time        </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    _quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li)-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@cal_time    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):	<span class="comment"># 第 i 趟</span></span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:		<span class="comment"># 改为 &lt; 就是降序列表</span></span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">		<span class="built_in">print</span>(li)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line">    </span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line">li1 = copy.deepcopy(li)</span><br><span class="line">li2 = copy.deepcopy(li)</span><br><span class="line"></span><br><span class="line">quick_sort(li)</span><br><span class="line">bubble_sort(li2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line"><span class="built_in">print</span>(li2)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>某度网盘文件下载</title>
    <url>/posts/900e3cc5/</url>
    <content><![CDATA[<h2 id="1-背景">1.背景</h2>
<p>天下苦某度网盘限速久矣！</p>
<span id="more"></span>
<h2 id="2-准备">2.准备</h2>
<h3 id="2-1-脚本准备">2.1 脚本准备</h3>
<p>首先你需要阅读另一篇文章<a href="https://zyzhang827.github.io/posts/2e4158e/">浏览器插件和脚本</a>，需要了解插件和脚本的安装和使用。</p>
<p>然后前往 <a href="https://greasyfork.org/">Greasy Fork</a> 官网，搜索<code>百度网盘简易下载助手</code>，或者直接点击访问<a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">百度网盘简易下载助手(直链下载复活版)</a>.点击安装即可。</p>
<blockquote>
<p>使用过程中，不涉及收费，但是可能需要关注公众号，以获取验证码，介意者请另寻他法。</p>
</blockquote>
<h3 id="2-2-软件准备">2.2 软件准备</h3>
<p>需要准备的一个小软件就是 IDM。但是 IDM 正版是需要收费的，所以我们选择破解版，点击蓝色字体即可跳转至下载链接<a href="https://www.ghxi.com/pcidm.html">Internet Download Manager 6.40.8 绿色特别版</a>，在最下方有下载地址，如果需要密码访问，请输入<code>ghfreedown</code></p>
<p>或者直接点击本文下载链接进行下载。<a href="https://zyzhang.lanzouw.com/iyD75014ekaf">IDM 下载</a>，密码:<code>sdu827</code></p>
<p>下载过程中，记得将电脑所有的杀毒软件以及防火墙关闭，因为软件安装包中含有破解程序，故可能会报毒。</p>
<p>下载完成后，点击<code>绿化与卸载.exe</code>选择绿化，然后打开程序文件夹<code>Bin</code>中的<code>IDMan.exe</code>即为主应用程序。界面如下：</p>
<p><img src="https://s2.loli.net/2022/03/27/pDe3nKhmVCBMjJx.png" alt="image-20220327203055049"></p>
<p>第一次安装，默认按钮的样式可能与我的不同，但功能一致，点击菜单栏的<code>查看/工具栏</code>可以对样式进行更换。</p>
<p><img src="https://s2.loli.net/2022/03/27/geiqx7n1WNvMdu4.png" alt="image-20220327184352097"></p>
<p>使用 IDM 之前，我们需要一些特殊的设置：</p>
<ul>
<li>
<p>打开<code>选项/常规设置</code>，接管浏览器中的勾选记得勾选自己的浏览器类型，一般默认即可。</p>
</li>
<li>
<p><code>选项/文件类型</code>中，<code>自动开始下载以下类型文件</code>的输入框中，缺少一些常见的格式，我们可以进行填充，将其替换掉。</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3GP 7Z AAC ACE AI AIF ALZ APK APP ARC ARJ ASF AVI BH BIN BR BUNDLE BZ BZ2 CDA CSV DIF DLL DMG DOC DOCX EGG EPS EXE FLV GZ GZIP IMG IPA ISO ISZ JAR KEXT LHA LZ LZH LZMA M4A M4V MDB MID MKV MOV MP3 MP4 MPA MPE MPEG MPG MSI MSU MUI OGG OGV PDF PKG PPT PPTX PSD PST PUB QT R0* R1* RA RAR RM RMVB RTF SEA SIT SITX SLDM SLDX TAR TBZ TBZ2 TGZ TIF TIFF TLZ TXZ UDF VOB VSD VSDM VSDX VSS VSSM VST VSTM VSTX WAR WAV WBK WIM WKS WMA WMD WMS WMV WMZ WP5 WPD WPS XLS XLSX XPS XZ Z ZIP ZIPX ZPAQ ZSTD</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><code>选项/下载</code>中，最后一个输入框<code>手动添加下载任务时使用的用户代理(UA)</code>处更换为以下内容</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">netdisk;7.0.3.2;PC;PC-Windows;10.0.17763</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><code>选项/连接</code>中，连接类型选择<code>较高速率连接：</code>，默认最大连接数选择<code>4</code></p>
</li>
</ul>
<p>其他设置保持默认即可。</p>
<p>这里只介绍配合插件下载网盘文件，IDM 其他下载小技巧，感兴趣的可以自行发掘。</p>
<h2 id="3-使用效果">3.使用效果</h2>
<p>首先登陆自己网页版的某度网盘，前边脚本安装成功的话，会多出一个<code>简易下载助手</code>的红色按钮。</p>
<p><img src="https://s2.loli.net/2022/03/27/MlCXjtaeq7KYBhd.png" alt="image-20220327171329337"></p>
<p>并且，右上角可以看到，我的账号并没有开通任何会员的。</p>
<p>接下来，选中某一个文件，然后点击<code>简易下载助手</code>，然后点击<code>点击获取直链</code>，第一次使用可能需要关注公众号，成功获取直链就会出现以下界面。</p>
<p><img src="https://s2.loli.net/2022/03/27/9dGCwL7AzqQIRHF.png" alt="image-20220327171421900"></p>
<p>然后点击<code>复制直链地址</code>，打开 IDM ,找到<code>新建任务</code>，将链接 粘贴进去，点击确定就可以了。</p>
<p><img src="https://s2.loli.net/2022/03/27/MTS6PYr2bjER8dV.png" alt="文件1下载速度示例"></p>
<p><img src="https://s2.loli.net/2022/03/27/pAvCf1O9bDBGsXz.png" alt="文件2下载示例"></p>
<p>下载速度可能会受到账号、网络和文件等多方面的影响，每个人的下载速度都不尽相同。</p>
<p>同理，使用脚本的方法二<code>Aria2</code>下载另一个文件，下载速度如下所示。</p>
<p><img src="https://s2.loli.net/2022/03/27/EMznDeLa2FUIJ1h.png" alt="Aria2下载示例"></p>
<h2 id="特殊说明">特殊说明</h2>
<ul>
<li>
<p>脚本的作者也提到了，也许哪天脚本就会挂掉，所以希望大家多关注 Greasy Fork 上此脚本的更新状况，并且一些存在的问题，作者也会在脚本的详情页说明</p>
</li>
<li>
<p>类似的脚本有很多，但是每个脚本的接口不同，所获取的直链的地址也不同，所以下载速度也不一样，大家也可以自行发掘速度更好的脚本</p>
</li>
<li>
<p>本文通过特殊途径可以使用 IDM，但希望大家有能力的可以多多支持正版 <a href="https://www.internetdownloadmanager.cn/buy">Internet Download Manager Buy</a></p>
</li>
<li>
<p>本文所涉及的所有软件均来自网络，严禁任何形式的商用！！</p>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>乱七八糟</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>百度网盘</tag>
        <tag>IDM</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(4)---一些短链、图床、域名的优化</title>
    <url>/posts/67d6545b/</url>
    <content><![CDATA[<p>博客搭建有一段时间，由于刚刚接触，所以也是一边使用，一边优化。</p>
<h2 id="域名优化">域名优化</h2>
<p>因为我们是基于 github 部署的自己的博客，所以创建的网址大多都是<code>*.github.io</code>的形式，不是很友好，所以我们打算将其更换为自己的域名。</p>
<span id="more"></span>
<p>一些平台都有域名的注册，购买业务，价格不同，域名的等级也不同，像我只是偶尔写写记录一下内容学习的，就不去购买专门的域名了，而是通过<code>freenom</code>这个网站白嫖免费的域名，相比购买的，虽然免费，但是也有缺点，白嫖只能一年，到期前需要去手动再续一年的时间，并且域名的后缀形式比较少，仅有<code>.tk .ml .ga .cf .gq</code>五种。</p>
<p>在<code>freenom</code>网站上申请域名时，注意填写的信息要与自己的 ip 地址相符，不然不易成功，所以，最好挂个梯子，然后找到自己 ip 地址所在地，去网上找个自己 ip 地址所在地的公民信息。</p>
<h2 id="图床优化">图床优化</h2>
<p>在写本文的前两天，突然发现自己在之前的文章中，使用 gitee 插入的图片，全部不显示了，但是打开 gitee 图床项目，文件是正常存在并且可以显示的。原来是 gitee 不知不觉给图片添加了防盗链机制，也就是通过 gitee 项目去访问图片链接是可以正常显示的，而使用外部链接是无法访问到图床中的图片的。</p>
<p>所以，更换了 smms 图床，虽然免费版的有上传和大小的限制，但是对于自己现在已经是足够了，等什么时候不够了再想解决措施吧。</p>
<h2 id="短链优化">短链优化</h2>
<p>在自己博客中发布的文章，如果标题是中文的，那么在实际的文章地址中，就会出现中文，并且分享网址给其他人的时候，中文就会被转义，然后就会变成一长串的字符，很乱并且可读性不高。</p>
<p>解决办法就是使用<code>hexo-abbrlink</code>插件。</p>
<p>首先在博客根目录下运行</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></div>
<p>然后打开博客根目录下的<code>_config.yaml</code>配置文件</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 将配置文件中原本的 permalink 的相关配置注释掉</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title</span></span><br><span class="line"><span class="comment"># permalink_defaults:</span></span><br><span class="line"><span class="comment">### 然后修改位以下内容：</span></span><br><span class="line">permalink: posts/:abbrlink/  </span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32     </span><br><span class="line">  rep: hex        </span><br><span class="line">  drafts: <span class="literal">false</span>   </span><br><span class="line">  auto_category:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span>  </span><br><span class="line">    depth:        </span><br><span class="line">    over_write: <span class="literal">false</span></span><br><span class="line">  auto_title: <span class="literal">false</span> </span><br><span class="line">  auto_date: <span class="literal">false</span> </span><br><span class="line">  force: <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>
<p>其中各项参数的具体含义可以查阅插件作者的<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink 项目主页</a>。</p>
<p>然后重新部署</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></div>
<p>这样设置之后，每篇文章都有属于自己的一串字符来代替，就算以后修改了文章的标题或者时间，只要不修改每篇文章 abbrlink 的值，就不会导致死链。</p>
<h2 id="gulp压缩资源">gulp压缩资源</h2>
<p>随着博客中文件的越来越多，访问速度会逐渐变慢，所以选择使用 gulp 来压缩项目中的 css、js 等文件。</p>
<p>首先，安装 gulp 及其依赖。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp gulp-html-minifier-terser gulp-htmlclean gulp-minify-css gulp-replace gulp-terser --save</span><br></pre></td></tr></table></figure></div>
<p>然后在博客根目录下创建<code>gulpfile.js</code>文件，内容如下：</p>
<blockquote>
<p>注意：</p>
<p>其中 minify_html_jsd 对应 cdn 重定向，链接修改位自己的静态文件仓库</p>
<p>pipe(replcae(…)) 是链接的重定向，可以根据需要自定义</p>
</blockquote>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>);</span><br><span class="line"><span class="comment">// var uglify = require(&#x27;gulp-uglify&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> terser = <span class="built_in">require</span>(<span class="string">&#x27;gulp-terser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> replace = <span class="built_in">require</span>(<span class="string">&#x27;gulp-replace&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line"><span class="keyword">const</span> minify_css = <span class="function">() =&gt;</span> (</span><br><span class="line">    gulp.src([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        <span class="comment">// .pipe(minifycss())</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line"><span class="keyword">const</span> minify_html = <span class="function">() =&gt;</span> (</span><br><span class="line">    gulp.src([<span class="string">&#x27;./public/**/*.html&#x27;</span>,<span class="string">&#x27;!./public/&#123;lib,lib/**&#125;&#x27;</span>,<span class="string">&#x27;!./public/**.xml&#x27;</span>])</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;src=&quot;/js/&#x27;</span>, <span class="string">&#x27;src=&quot;https://zyzhang827.github.io/js/&#x27;</span>))</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;href=&quot;/css/&quot;&#x27;</span>, <span class="string">&#x27;href=&quot;https://zyzhang827.github.io/css/&#x27;</span>))</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;../images/&#x27;</span>, <span class="string">&#x27;https://zyzhang827.github.io/images/&#x27;</span>))</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minify_html_jsd = <span class="function">() =&gt;</span> (</span><br><span class="line">    gulp.src([<span class="string">&#x27;./public/**/*.html&#x27;</span>,<span class="string">&#x27;!./public/&#123;lib,lib/**&#125;&#x27;</span>])</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;src=&quot;/js/&#x27;</span>, <span class="string">&#x27;src=&quot;https://cdn.jsdelivr.net/gh/zyzhang827/zyzhang827.github.io@main/js/&#x27;</span>))</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;href=&quot;/css/&quot;&#x27;</span>, <span class="string">&#x27;href=&quot;https://cdn.jsdelivr.net/gh/zyzhang827/zyzhang827.github.io@main/css/&quot;&#x27;</span>))</span><br><span class="line">        .pipe(replace(<span class="string">&#x27;../images/&#x27;</span>, <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zyzhang827/zyzhang827.github.io@main/images/&#x27;</span>))</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line"><span class="keyword">const</span> minify_js = <span class="function">() =&gt;</span> (</span><br><span class="line">    gulp.src([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>,<span class="string">&#x27;!./public/&#123;lib,lib/**&#125;&#x27;</span>])</span><br><span class="line">        .pipe(terser())</span><br><span class="line">        <span class="comment">// .pipe(uglify())</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">minify_html</span>: minify_html,</span><br><span class="line">    <span class="attr">minify_css</span>: minify_css,</span><br><span class="line">    <span class="attr">minify_js</span>: minify_js,</span><br><span class="line">    <span class="attr">minify_html_jsd</span>: minify_html_jsd</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;one&#x27;</span>, gulp.parallel(</span><br><span class="line">    minify_html,</span><br><span class="line">    minify_css,</span><br><span class="line">    minify_js</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;two&#x27;</span>, gulp.parallel(</span><br><span class="line">    minify_html_jsd,</span><br><span class="line">    minify_css,</span><br><span class="line">    minify_js</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.series(<span class="string">&#x27;one&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(4)--堆排序</title>
    <url>/posts/ef0d6cab/</url>
    <content><![CDATA[<h2 id="堆排序前传–树与二叉树">堆排序前传–树与二叉树</h2>
<h3 id="树">树</h3>
<ul>
<li>树是一种数据结构，比如：目录结构</li>
<li>树可以递归定义的数据结构</li>
</ul>
<span id="more"></span>
<ul>
<li>树是 n 个节点组成的集合：
<ul>
<li>如果 n=0 ，那这是一棵空树</li>
<li>如果 n&gt;0 ，那存在 1 个节点作为树的根节点，其他节点可以分为 m 个集合，每个集合本身又是一棵树。</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/06/CNU5WdHmwgXcz2u.png" alt="树"></p>
<p>一些概念：</p>
<ul>
<li>根节点(A)、叶子节点(B C H I P Q K L M N)</li>
<li>树的深度(高度)：A-E-J-P  4层</li>
<li>节点的度：E 节点的度是 2，F 节点的度是 3</li>
<li>树的度：整个树中最大的节点度，A 的度为 6，树的度就是 6</li>
<li>孩子节点/父节点：E 是 I 的父节点；I 是 E 的孩子节点。</li>
<li>子树：E-I/J-P/Q 五个节点就是一个子树</li>
</ul>
<h3 id="二叉树">二叉树</h3>
<ul>
<li>二叉树就是度不超过 2 的树</li>
<li>每个节点最多有两个孩子节点</li>
<li>两个孩子节点被区分为<u>左孩子节点</u>和<u>右孩子节点</u></li>
</ul>
<p><img src="https://s2.loli.net/2022/04/06/32iBKR9cXoj7GNm.png" alt="二叉树"></p>
<h3 id="完全二叉树">完全二叉树</h3>
<ul>
<li>满二叉树：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。</li>
<li>完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/06/4cuOthHpj5a2EiA.png" alt="满二叉树和完全二叉树"></p>
<h3 id="二叉树的存储方式-表示方式">二叉树的存储方式(表示方式)</h3>
<ul>
<li>链式存储方式</li>
<li>顺序存储方式</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/06/j7XK32IBPpWbwgl.png" alt="顺序存储"></p>
<ul>
<li>父节点和左孩子节点的编号下标有什么关系？
<ul>
<li>0-1 1-3 2-5 3-7 4-9</li>
<li>i → 2i + 1</li>
</ul>
</li>
<li>父节点和右孩子节点的编号下标有什么关系？
<ul>
<li>0-2 1-4 2-6 3-8 4-10</li>
<li>i → 2i + 2</li>
</ul>
</li>
<li>孩子节点找父节点：(i-1)//2</li>
</ul>
<h2 id="堆排序">堆排序</h2>
<ul>
<li>堆：一种特殊的完全二叉树结构
<ul>
<li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li>
<li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/06/rVDfaByYeQO2mlb.png" alt="大根堆和小根堆"></p>
<h3 id="堆的向下调整">堆的向下调整</h3>
<p>假设：节点的左右子树都是堆，但自身不是堆。</p>
<p><img src="https://s2.loli.net/2022/04/06/pK3kHlaFxuIjyb6.png" alt="向下调整前的树结构"></p>
<p>当根节点的左右子树都是堆时，可以通过一次向下的调整来将其变换成一个堆。</p>
<p><img src="https://s2.loli.net/2022/04/06/7Xets4fbZa2MdBU.png" alt="向下调整后的树结构"></p>
<h3 id="堆排序过程">堆排序过程</h3>
<ol>
<li>建立堆；(农村包围城市)</li>
<li>得到堆顶元素，为最大元素；</li>
<li>去掉堆顶，将堆最后一个元素放到堆顶，此时可以通过一次向下调整重新使堆有序；</li>
<li>堆顶元素为第二大元素；</li>
<li>重复步骤 3，直到堆变空。</li>
</ol>
<h3 id="代码实现">代码实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param li: 列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low				<span class="comment"># i 开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>		<span class="comment"># j 开始是左孩子</span></span><br><span class="line">    tmp = li[low]	  	<span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high: 	<span class="comment"># 只要 j 位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]:</span><br><span class="line">            j = j + <span class="number">1</span>	<span class="comment"># 有右孩子且右孩子大，把 j 指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j		<span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:			<span class="comment"># tmp 更大，把 tmp 放到 i 的位置上</span></span><br><span class="line">            li[i] = tmp	<span class="comment"># 把 tmp 放到某一级领导的位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i 代表建立堆时调整部分的根的下标</span></span><br><span class="line">        sift(li, i, n-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 建堆完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i 指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i-<span class="number">1</span>)	<span class="comment"># i-1 是新的 high</span></span><br><span class="line">   </span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line">heap_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="时间复杂度">时间复杂度</h3>
<p><code>O(nlogn)</code></p>
<h3 id="内置模块">内置模块</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line">heapq.heapify(li)	<span class="comment"># 建堆(小根堆)</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(li)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(heapq.heappop(li), end=<span class="string">&quot;,&quot;</span>)  </span><br></pre></td></tr></table></figure></div>
<h3 id="topk问题">topk问题</h3>
<ul>
<li>现在有 n 个数，设计算法得到前 k 个大的数。(k&lt;n)</li>
</ul>
<p>解决思路：</p>
<ul>
<li>排序后切片									<code>O(nlogn)</code></li>
<li>排序 LowB 三人组(冒泡排序、插入排序、选择排序)    <code>O(nk)</code></li>
<li>堆排序思路                                 <code>O(nlogk)</code>
<ul>
<li>取列表前 k 个元素建立一个小根堆。堆顶就是目前第 k 大的数；</li>
<li>依次向后遍历源列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整；</li>
<li>遍历列表所有元素后，倒序弹出堆顶。</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param li: 列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low				<span class="comment"># i 开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>		<span class="comment"># j 开始是左孩子</span></span><br><span class="line">    tmp = li[low]	  	<span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high: 	<span class="comment"># 只要 j 位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &lt; li[j]:</span><br><span class="line">            j = j + <span class="number">1</span>	<span class="comment"># 有右孩子且右孩子大，把 j 指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j		<span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:			<span class="comment"># tmp 更大，把 tmp 放到 i 的位置上</span></span><br><span class="line">            li[i] = tmp	<span class="comment"># 把 tmp 放到某一级领导的位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topk</span>(<span class="params">li, k</span>):</span></span><br><span class="line">    heap = li[<span class="number">0</span>:k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        sift(heap, i, k-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 1.建堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; heap[<span class="number">0</span>]:</span><br><span class="line">            heap[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift(heap, <span class="number">0</span>, k-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        heap[<span class="number">0</span>], heap[i] = heap[i], heap[<span class="number">0</span>]</span><br><span class="line">        sift(heap, <span class="number">0</span>, i-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 3.出数</span></span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line">        </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(topk(li, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="参考链接">参考链接</h2>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/HeapSort.html">Heap Sort</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(5)--归并排序</title>
    <url>/posts/49ef58e9/</url>
    <content><![CDATA[<h2 id="归并排序">归并排序</h2>
<h3 id="归并">归并</h3>
<ul>
<li>假设现在的列表分为两段有序，如何将其合成为一个有序列表</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/07/HnAEQOc5pDMSYrx.png" alt="归并"></p>
<span id="more"></span>
<p><img src="https://s2.loli.net/2022/04/07/fD9u4CKTAk1nxBd.gif" alt="归并实现过程"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">li, low, mid, high</span>):</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:	<span class="comment"># 只要左右两边都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">        	ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while 执行完，肯定有一部分没数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line">    </span><br><span class="line">li = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">merge(li, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="使用归并">使用归并</h3>
<ul>
<li>分解：将列表越分越小，直至分成一个元素</li>
<li>终止条件：一个元素是有序的</li>
<li>合并：将两个有序列表归并，列表越来越大</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/07/ECWeqf936UGVrOs.png" alt="使用归并"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">li, low, mid, high</span>):</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:	<span class="comment"># 只要左右两边都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">        	ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while 执行完，肯定有一部分没数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:		<span class="comment"># 至少有两个元素</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        <span class="comment"># print(li[low:high+1])</span></span><br><span class="line">        merge(li, low, mid, high)</span><br><span class="line">        </span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">mergr_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="复杂度讨论">复杂度讨论</h3>
<p><code>O(nlogn)</code></p>
<h3 id="总结">总结</h3>
<ul>
<li>一般情况下，就运行时间而言：快速排序 &lt; 归并排序 &lt; 堆排序</li>
<li>三种排序的时间复杂度都是<code>O(nlogn)</code></li>
<li>三种排序算法的缺点：
<ul>
<li>快速排序：极端情况下排序效率低</li>
<li>归并排序：需要额外的内存开销</li>
<li>堆排序：在快的排序算法中相对较慢</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">排序方法</th>
<th style="text-align:center">时间复杂最坏情况</th>
<th style="text-align:center">时间复杂平均情况</th>
<th style="text-align:center">时间复杂最好情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
<th style="text-align:center">代码复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">简单</td>
</tr>
<tr>
<td style="text-align:center">直接选择排序</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">简单</td>
</tr>
<tr>
<td style="text-align:center">直接插入排序</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">简单</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(logn)或者O(n)</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">较复杂</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">不稳定</td>
<td style="text-align:center">复杂</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">稳定</td>
<td style="text-align:center">较复杂</td>
</tr>
</tbody>
</table>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(6)--其他排序</title>
    <url>/posts/2edbcf4a/</url>
    <content><![CDATA[<h2 id="希尔排序">希尔排序</h2>
<p>希尔排序(Shell Sort)是一种分组插入排序算法。</p>
<span id="more"></span>
<ul>
<li>首先取一个整数 $d_1=\frac{n}{2}$，将元素分为 $d_1$ 个组，每组相邻两元素之间距离为 $d_1$，在各组内进行直接插入排序；</li>
<li>取第二个整数 $d_2=\frac{d_1}{2}$，重复上述分组排序过程，直到 $d_i=1$，即所有元素在同一组内进行直接插入排序；</li>
<li>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort_gap</span>(<span class="params">li, gap</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j+gap] = tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.shuffle(li)</span><br><span class="line">shell_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<h3 id="时间复杂度">时间复杂度</h3>
<p>希尔排序的时间复杂度跟 gap 的选取有关。</p>
<h2 id="计数排序">计数排序</h2>
<p>对列表进行排序，一直列表中的数范围都在 0 到 100 之间，设计时间复杂度为<code>O(n)</code>的算法。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span>(<span class="params">li, max_count=<span class="number">100</span></span>):</span></span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">count_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<h2 id="桶排序">桶排序</h2>
<ul>
<li>在计数排序中，如果元素的范围比较大(比如在 1 到 1 亿之间)，如何改造算法？</li>
<li>桶排序(Bucket Sort):首先将元素分在不同的桶中，在对每个桶中的元素排序。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/07/BWGMA8EdtmqZxNn.png" alt="Bucket Sort"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">li, n=<span class="number">100</span>, max_num=<span class="number">10000</span></span>):</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]	<span class="comment"># 创建桶</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var // (max_num // n), n-<span class="number">1</span>)		<span class="comment"># i 表示 var 放在几号桶里</span></span><br><span class="line">        buckets[i].append(var)</span><br><span class="line">        <span class="comment"># 保持桶内的排序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">                buckets[i][j], buckets[i][j-<span class="number">1</span>] = buckets[i][j-<span class="number">1</span>], buckets[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">	sorted_li = []    </span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        sorted_li.extend(buc)</span><br><span class="line">	<span class="keyword">return</span> sorted_li</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>)]</span><br><span class="line"><span class="comment"># print(li)</span></span><br><span class="line">li = bucket_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>桶排序的表现取决于数据的分布。也就是需要对不同的数据排序时采取不同的分桶策略；</li>
<li>平均情况时间复杂度：<code>O(n+k)</code></li>
<li>最坏情况时间复杂度：<code>O(n²k)</code></li>
<li>空间复杂度：<code>O(nk)</code></li>
</ul>
<h2 id="基数排序">基数排序</h2>
<ul>
<li>多关键字排序：假如现在有一个员工表，要求按照薪资胖子徐，年龄相同的员工按照年龄排序；</li>
<li>先按照你那零进行排序，再按照薪资进行稳定的排序；</li>
<li>对 32、13、94、52、17、54、93 排序，是否可以看作多关键字排序？</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    max_num = <span class="built_in">max</span>(li)		<span class="comment"># 最大值 99-&gt;2, 888-&gt;3, 10000-&gt;5</span></span><br><span class="line">    it = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">10</span> ** it &lt;= max_num:</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">            digit = (var // <span class="number">10</span> ** it) % <span class="number">10</span></span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.shuffle(li)</span><br><span class="line">radix_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>时间复杂度：<code>O(kn)</code></li>
<li>空间复杂度：<code>O(k+n)</code></li>
<li>k 表示数字位数</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(7)--查找排序习题</title>
    <url>/posts/b2027aed/</url>
    <content><![CDATA[<h2 id="查找排序相关面试题">查找排序相关面试题</h2>
<p>题目来源于 LeetCode</p>
<ol>
<li>
<p>给出两个字符串 s 和 t，判断 t 是否为 s 的重新排列后组成的单词</p>
<p>s = “anagram”, t = “nagaram”, return true</p>
<p>s = “rat”, t = “car”, return false</p>
</li>
</ol>
<span id="more"></span>
<p>​</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span>(<span class="params">self, s, t</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ss = <span class="built_in">list</span>(s)</span><br><span class="line">        tt = <span class="built_in">list</span>(t)</span><br><span class="line">        ss.sort()</span><br><span class="line">        tt.sort()</span><br><span class="line">        <span class="keyword">return</span> ss == tt</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span>(<span class="params">self, s, t</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(<span class="built_in">list</span>(s)) == <span class="built_in">sorted</span>(<span class="built_in">list</span>(t))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span>(<span class="params">self, s, t</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dict1 = &#123;&#125;		<span class="comment"># &#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2&#125;</span></span><br><span class="line">        dict2 = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            dict1[ch] = dict1.get(ch, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> t:</span><br><span class="line">            dict2[ch] = dict2.get(ch, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> dict1 == dict2</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>给定一个 m*n 的二维列表，查找一个数是否存在。列表有下列特性：</li>
</ol>
<ul>
<li>
<p>每一行的列表从左到右已经排序好；</p>
</li>
<li>
<p>每一行第一个数比上一行最后一个数大</p>
<p><img src="https://s2.loli.net/2022/04/08/eUXs1ZSMtP2CITQ.png" alt="image-20220408093201589"></p>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span>(<span class="params">self, matrix, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">if</span> target <span class="keyword">in</span> line:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span>(<span class="params">self, matrix, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        h = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">if</span> h == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        w = <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> w == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = w * h - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            i = mid // w</span><br><span class="line">            j = mid % w</span><br><span class="line">            <span class="keyword">if</span> matrix[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j] &gt; target:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>
<p>给定一个列表和一个整数，设计算法找到两个数的下标。使得两个数之和为给定的整数。保证肯定仅有一个结果。</p>
<p>例如，列表 [1,2,5,4] 与目标整数 3， 1+2=3，结果为 (0,1)</p>
</li>
</ol>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                <span class="keyword">if</span> nums[i] = nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">sorted</span>([i,j])</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">self, li, left, right, val</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> li[mid][<span class="number">0</span>] == val:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> li[mid][<span class="number">0</span>] &gt; val:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_nums = [[num, i] <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums)]</span><br><span class="line">        new_nums.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_nums)):</span><br><span class="line">            a = new_nums[i][<span class="number">0</span>]</span><br><span class="line">            b = target - a</span><br><span class="line">            <span class="keyword">if</span> b &gt;= a:</span><br><span class="line">                j =self.binary_search(new_nums, i+<span class="number">1</span>, <span class="built_in">len</span>(new_nums)-<span class="number">1</span>, b)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = self.binary_search(new_nums, <span class="number">0</span>, i-<span class="number">1</span>, b)</span><br><span class="line">            <span class="keyword">if</span> j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>([new_nums[i][j], new_nums[j][i]])</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(8)--数据结构</title>
    <url>/posts/52aac395/</url>
    <content><![CDATA[<h2 id="数据结构简介">数据结构简介</h2>
<ul>
<li>
<p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成；</p>
</li>
<li>
<p>简单来说，数据结构就是设计数据以何种方式组织并存储再计算机中’</p>
</li>
<li>
<p>比如：列表、集合与字典等都是一种数据结构；</p>
</li>
<li>
<p>N.wirth：”程序 = 数据结构 + 算法“</p>
</li>
</ul>
<span id="more"></span>
<h3 id="分类">分类</h3>
<p>数据结构按照其逻辑结构可以分为线性结构、树结构、图结构</p>
<ul>
<li>线性结构：数据结构中的元素存在一对一的相互关系</li>
<li>树结构：数据结构中的元素存在一对多的相互关系</li>
<li>图结构：数据结构中的元素存在多对多的相互关系</li>
</ul>
<h3 id="列表">列表</h3>
<ul>
<li>列表(其他语言称数组)是一种基本数据类型</li>
<li>关于列表的问题：
<ul>
<li>列表中的元素是如何存储的？</li>
<li>列表的基本操作：按下标查找、插入元素、删除元素…</li>
<li>这些操作的时间复杂度是多少？</li>
</ul>
</li>
<li>扩展：Python 的列表是如何实现的？</li>
</ul>
<h3 id="栈">栈</h3>
<ul>
<li>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或者删除操作的列表</li>
<li>栈的特点：后进先出 LIFO(last-in, first-out)</li>
<li>栈的概念：栈顶、栈底</li>
<li>栈的基本操作：
<ul>
<li>进栈(压栈)：push</li>
<li>出栈：pop</li>
<li>取栈顶：gettop</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/3Y1DMprRHnx7svX.png" alt="栈"></p>
<ul>
<li>使用一般的列表结构即可实现栈
<ul>
<li>进栈：li.append</li>
<li>出栈：li.pop</li>
<li>取栈顶：li[-1]</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, element</span>):</span></span><br><span class="line">        self.stack.append(element)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ln(self.stack) == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stcak.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br></pre></td></tr></table></figure></div>
<h4 id="栈的应用–括号匹配问题">栈的应用–括号匹配问题</h4>
<ul>
<li>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</li>
<li>例如：
<ul>
<li>()()[]{}    匹配</li>
<li>([{()}])    匹配</li>
<li>[](	     不匹配</li>
<li>[(])        不匹配</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brace_match</span>(<span class="params">s</span>):</span></span><br><span class="line">    stack = Stcak()</span><br><span class="line">    match = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;:</span><br><span class="line">            stack.push(ch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> stack.get_top() == match[ch]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:		<span class="comment"># stack.get_top() != match[ch]</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	<span class="keyword">if</span> stack.is_empty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(brace_match(<span class="string">&#x27;[()&#125;()&#123;()[]()&#123;&#125;&#125;]&#x27;</span>))    </span><br><span class="line"><span class="built_in">print</span>(brace_match(<span class="string">&#x27;[&#123;[]]&#x27;</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="队列">队列</h3>
<ul>
<li>队列(Queue)是一个数据集合，仅允许再列表的一端进行插入，另一端进行删除</li>
<li>进行插入的一端称为队尾(rear)，插入动作称为进队或者入队</li>
<li>进行删除的一端称为队头(front)，删除动作称为出队</li>
<li>队列的性质：先进先出(First-in, First-out)</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/B8OhTGPt5lAidbw.png" alt="队列"></p>
<ul>
<li>队列能否用列表简单实现？为什么？</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/hMYwpCiOKG6tkPn.png" alt="队列的实现"></p>
<h4 id="环形队列">环形队列</h4>
<ul>
<li>环形队列：当队尾指针 <code>front == Maxsize - 1</code> 时，再前进一个位置就自动到 0.</li>
<li>队首指针前进 1：<code>front = (front + 1) % MaxSize</code></li>
<li>队尾指针前进 1：<code>rear = (rear + 1) % MaxSize</code></li>
<li>队空条件：<code>rear == front</code></li>
<li>队满条件：<code>(rear + 1) % MaxSize == front</code></li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/gAxCarNzWTpB7GI.png" alt="环形队列"></p>
<h4 id="双向队列">双向队列</h4>
<ul>
<li>双向队列的两端都支持进队和出队操作</li>
<li>双向队列的基本操作：
<ul>
<li>队首进队</li>
<li>队首出队</li>
<li>队尾进队</li>
<li>队尾出队</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/8tQoyHgvsr9uAWe.png" alt="双向队列"></p>
<h4 id="Python队列内置模块">Python队列内置模块</h4>
<ul>
<li>使用方法：<code>from colletions import deque</code>
<ul>
<li>创建队列：<code>queue = deque()</code></li>
<li>进队：<code>append()</code></li>
<li>出队：<code>popleft()</code></li>
<li>双向队列队首进队：<code>qppendleft()</code></li>
<li>双向队列队尾出队：<code>pop()</code></li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">q = deque()</span><br><span class="line">q.append(<span class="number">1</span>)				<span class="comment"># 队尾进队</span></span><br><span class="line"><span class="comment"># print(q.popleft())	# 队首出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于双向队列</span></span><br><span class="line">q.appendleft(<span class="number">1</span>)			<span class="comment"># 队首进队</span></span><br><span class="line">q.pop()					<span class="comment"># 队尾出队</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟 Linux 系统中的 tail 命令</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        q = deque(f, n)</span><br><span class="line">        <span class="keyword">return</span> q</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tail(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="栈和队列的应用–迷宫问题">栈和队列的应用–迷宫问题</h3>
<ul>
<li>给出一个二维列表，表示迷宫(0 表示通道，1 表示围墙)。给出算法，求一条走出迷宫的路径。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/hLNOSuqVQZEB3yk.png" alt="迷宫问题"></p>
<h4 id="栈-深度优先搜索">栈-深度优先搜索</h4>
<ul>
<li>回溯法</li>
<li>思路：从一个节点开始，任意找出下一个能走的点，当找不到能走的点时，退回上一个点寻找是否有其他方向的点；</li>
<li>使用栈存储当前路径</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maze_path</span>(<span class="params">x1, y1, x2, y2</span>):</span></span><br><span class="line">    stack = []</span><br><span class="line">    stack.append((x1, y1))</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(stack) &gt; <span class="number">0</span>):</span><br><span class="line">        curNode = stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            <span class="comment"># 走到终点了</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># x,y 四个方向 x-1,y; x+1,y; x,y</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 如果下一个节点能走</span></span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode)</span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">            stack.pop()</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">maze_path(<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>)    </span><br></pre></td></tr></table></figure></div>
<h4 id="队列-广度优先搜索">队列-广度优先搜索</h4>
<ul>
<li>思路：从一个节点开始，寻找<u>所有</u>接下来能继续走的点，继续不断寻找，直到找到出口</li>
<li>使用队列存储当前正在考虑的点</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_r</span>(<span class="params">path</span>):</span></span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line">        </span><br><span class="line">	realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])		<span class="comment"># 起点</span></span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maze_path_queue</span>(<span class="params">x1,y1,x2,y2</span>):</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((x1,y1,-<span class="number">1</span>))</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.popleft()</span><br><span class="line">        path.append(curNode)</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            <span class="comment"># 终点</span></span><br><span class="line">            print_r(path)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>],nextNode[<span class="number">1</span>], <span class="built_in">len</span>(path)-<span class="number">1</span>))		<span class="comment"># 后续节点进队，记录哪个节点带他来的</span></span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>	<span class="comment"># 标记为已经走过</span></span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">maze_path_queue(<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>)    </span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(9)--链表</title>
    <url>/posts/66ee28b8/</url>
    <content><![CDATA[<h2 id="链表">链表</h2>
<ul>
<li>链表是由一系列节点组成的元素集合。每个节点包含两部分，数据域 item 和指向下一个节点的指针 next。通过节点之间的相互连接，最终串联成一个链表。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/09/xsMo3Rvq7ujJGfp.png" alt="单向链表"></p>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">a = Node(<span class="number">1</span>)</span><br><span class="line">b = Node(<span class="number">2</span>)</span><br><span class="line">c = Node(<span class="number">3</span>)</span><br><span class="line">a.<span class="built_in">next</span> = b</span><br><span class="line">b.<span class="built_in">next</span> = c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">next</span>.<span class="built_in">next</span>.item)</span><br></pre></td></tr></table></figure></div>
<h3 id="创建链表">创建链表</h3>
<h4 id="头插法">头插法</h4>
<p><img src="https://s2.loli.net/2022/04/13/ZcXzVybDiqReHPl.png" alt="头插法"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_linklist_head</span>(<span class="params">li</span>):</span></span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.<span class="built_in">next</span> = head</span><br><span class="line">        head = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_linklist</span>(<span class="params">lk</span>):</span></span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="built_in">print</span>(lk.item, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">lk = create_linklist_head([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print_linklist(lk)</span><br></pre></td></tr></table></figure></div>
<h4 id="尾插法">尾插法</h4>
<p><img src="https://s2.loli.net/2022/04/13/3EwGuy72PVsRYC6.png" alt="尾插法"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_linklist_tail</span>(<span class="params">li</span>):</span></span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_linklist</span>(<span class="params">lk</span>):</span></span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="built_in">print</span>(lk.item, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">lk = create_linklist_tail([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>])</span><br><span class="line">print_linklist(lk)</span><br></pre></td></tr></table></figure></div>
<h3 id="链表节点的插入">链表节点的插入</h3>
<p><img src="https://s2.loli.net/2022/04/13/WZm4i7CtTbOSGsI.png" alt="节点的插入"></p>
<ul>
<li><code>p.next = curNode.next</code></li>
<li><code>curNode.next = p</code></li>
</ul>
<h3 id="链表节点的删除">链表节点的删除</h3>
<ul>
<li><code>p = curNode.next</code></li>
<li><code>curNode.next = curNode.next.next</code></li>
<li><code>del p</code></li>
</ul>
<h3 id="双链表">双链表</h3>
<ul>
<li>双链表的每个节点有两个指针：一个指向后一个节点，另一个指向前一个节点。</li>
<li>如何建立双链表？</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/13/kYrijxyZPN9T1X5.png" alt="双链表"></p>
<h4 id="双链表节点的插入">双链表节点的插入</h4>
<ul>
<li><code>p.next = curNode.next</code></li>
<li><code>curNode.next.prior = p</code></li>
<li><code>p.prior = curNode</code></li>
<li><code>curNode.next = p</code></li>
</ul>
<h4 id="双链表节点的删除">双链表节点的删除</h4>
<ul>
<li><code>p = curNode.next</code></li>
<li><code>curNode.next = p.next</code></li>
<li><code>p.next.prior = curNode</code></li>
<li><code>del p</code></li>
</ul>
<h3 id="链表复杂度分析">链表复杂度分析</h3>
<ul>
<li>顺序表(列表/数组)与链表
<ul>
<li>按元素值查找</li>
<li>按下标查找</li>
<li>在某些元素后插入</li>
<li>删除某些元素</li>
</ul>
</li>
<li>链表在插入和删除的操作上明显快于顺序表</li>
<li>链表的内存可以更加灵活的分配
<ul>
<li>试利用链表重新实现栈和队列</li>
</ul>
</li>
<li>链表这种链式存储的数据结构对树和图的结构有很大的启发性</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(10)--哈希表</title>
    <url>/posts/243fc9d6/</url>
    <content><![CDATA[<h2 id="概念和性质">概念和性质</h2>
<p>哈希表一个通过哈希函数来计算数据存储位置的数据结构，通常支持如下操作：</p>
<ul>
<li><code>insert(key, value):</code>插入键值对(key,value)</li>
<li><code>get(key):</code>如果存在键为 key 的键值对则返回其 value，否则返回空值</li>
<li><code>delete(key):</code>删除键为 key 的键值对</li>
</ul>
<span id="more"></span>
<h3 id="直接寻址表">直接寻址表</h3>
<p><img src="https://s2.loli.net/2022/04/18/8LpQn23jhvlCD9q.png" alt="直接寻址表"></p>
<ul>
<li>当关键字的全域 U 比较小的时候，直接寻址是一种简单而有效的方法。</li>
<li>缺点：
<ul>
<li>当域 U 很大时，需要消耗大量内存，很不实际</li>
<li>如果域 U 很大而实际出现的 key 很少，则大量空间被浪费</li>
<li>无法处理关键字不是数字的情况</li>
</ul>
</li>
</ul>
<h3 id="哈希">哈希</h3>
<ul>
<li>
<p>直接寻址表：key 为 k 的元素放到 k 位置上</p>
</li>
<li>
<p>改进直接寻址表：哈希(Hashing)</p>
<ul>
<li>构建大小为 m 的寻址表 T</li>
<li>key 为 k 的元素放到 h(k) 位置上</li>
<li>h(k) 是一个函数，其将域 U 映射到表 T[0,1,…,m-1]</li>
</ul>
</li>
<li>
<p>哈希表(Hash Table，又称为散列表)，是一种<strong>线性表</strong>的存储结构。哈希表由一个<strong>直接寻址表</strong>和一个<strong>哈希函数</strong>组成。哈希函数 h(k) 将元素关键字 k 作为自变量，返回元素的存储下标。</p>
</li>
<li>
<p>假设有一个长度为 7 的哈希表，哈希函数 h(k)=k%7。元素集合 {14,22,3,5} 的存储方式如下图</p>
<p><img src="https://s2.loli.net/2022/04/18/5AfQmPlIDb39pFu.png" alt="哈希函数举例"></p>
</li>
<li>
<p>由于哈希表的大小是有限的，而要存储的值的总数量是无限的，因此对于任何哈希函数，都会出现两个不同元素映射到同一个位置上的情况，这种情况叫做哈希冲突。</p>
</li>
<li>
<p>比如上图中的 h(k)=k%7, h(0)=h(7)=h(14)=…</p>
</li>
</ul>
<h3 id="解决哈希冲突–开放寻址法">解决哈希冲突–开放寻址法</h3>
<ul>
<li>开放寻址法：如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值
<ul>
<li>线性探查：如果位置 i 被占用，则探查 i+1,i+2,…</li>
<li>二次探查：如果位置 i 被占用，则探查 i+1²,i-1²,i+2²,i-2²,…</li>
<li>二度哈希：有 n 个哈希函数，当使用第 1 个哈希函数 h1 发生冲突时，则尝试使用 h2,h3,…</li>
</ul>
</li>
</ul>
<h3 id="解决哈希冲突–拉链法">解决哈希冲突–拉链法</h3>
<ul>
<li>拉链法：哈希表每个位置都连接一个链表，当冲突发生时，冲突的元素将被加到该位置链表的最后。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/wEqcK6oeDsMmjvC.png" alt="拉链法"></p>
<h3 id="常见哈希函数">常见哈希函数</h3>
<ul>
<li>除法哈希：<code>h(k) = k % m</code></li>
<li>乘法哈希：<code>h(k) = floor(m*(A*key%1))</code></li>
<li>全域哈希：<code>h(k) = ((a*key + b) mod p) mod m   a,b=1,2,...,p-1</code></li>
</ul>
<h2 id="哈希表实现">哈希表实现</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item=<span class="literal">None</span></span>):</span></span><br><span class="line">            self.item = item</span><br><span class="line">            self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkListIterator</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, node</span>):</span></span><br><span class="line">            self.node = node</span><br><span class="line">            </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">if</span> self.node:</span><br><span class="line">                cur_node = self.node</span><br><span class="line">                self.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line">                </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            self.extend(iterable)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        s = LinkList.Node(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = s</span><br><span class="line">            self.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = s</span><br><span class="line">            self.tail = s</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">self, iterable</span>):</span></span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            self.append(obj)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.LinkListIterator(self.head)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;&lt;&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, self)) + <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"> </span><br><span class="line">lk = LinkList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(lk)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> lk:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 类似于集合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size=<span class="number">101</span></span>):</span></span><br><span class="line">        self.size = size</span><br><span class="line">        self.T = [LinkList() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k % self.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        i = self.h(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].find(k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        i = self.h(k)</span><br><span class="line">        <span class="keyword">if</span> self.find(k):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Duplicated Insert.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.T[i].append(k)</span><br><span class="line"></span><br><span class="line">ht = HashTable()</span><br><span class="line"></span><br><span class="line">ht.insert(<span class="number">0</span>)</span><br><span class="line">ht.insert(<span class="number">1</span>)</span><br><span class="line">ht.insert(<span class="number">3</span>)</span><br><span class="line">ht.insert(<span class="number">102</span>)</span><br><span class="line">ht.insert(<span class="number">508</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;,&quot;.join(map(str, ht.T)))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ht.find(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(ht.find(<span class="number">102</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="哈希表的应用">哈希表的应用</h2>
<h3 id="集合与字典">集合与字典</h3>
<ul>
<li>字典与集合都是通过哈希表来实现的
<ul>
<li><code>a = &#123;'name':'Alex', 'age':18, 'gender':'Man'&#125;</code></li>
</ul>
</li>
<li>使用哈希表存储字典，通过哈希函数将字典的键映射为下标。假设<code>h('name')=3,h('age')=1,h('gender')=4</code>，则哈希表存储为<code>[None, 18, None, 'Alex', 'Man']</code></li>
<li>如果发生哈希冲突，则通过拉链法或者开发寻址法解决</li>
</ul>
<h3 id="md5-算法">md5 算法</h3>
<ul>
<li>
<p>MD5(Message-Digest Algorithm 5)<strong>曾经</strong>是密码学中常用的哈希函数，可以把任意长度的数据映射为 128 位的哈希值，其曾经包含如下特征：</p>
<ol>
<li>同样的消息，其 MD5 的值必定相同；</li>
<li>可以快速计算出任意给定消息的 MD5 值；</li>
<li>除非暴力的枚举所有可能的消息，否则不可能从哈希值反推出消息本身；</li>
<li>两条消息之间即使只有微笑的差别，其对应的 MD5 值也应该是完全不同、完全不相关的；</li>
<li>不能在有意义的时间内人工的构造两个不同的消息，使其具有相同的 MD5 值。</li>
</ol>
</li>
<li>
<p>举例：文件的哈希值</p>
<ul>
<li>算出文件的哈希值，若两个文件的哈希值相同，则可认为这两个文件是相同的。因此</li>
<li>用户可以利用它来验证下载的文件是否完整</li>
<li>云存储服务器商可以利用它来判断用户要上传的文件，是否已经存在于服务器上，从而实现妙传的功能，同时避免存储过多相同的文件副本。</li>
</ul>
</li>
</ul>
<h3 id="SHA2-算法">SHA2 算法</h3>
<ul>
<li>
<p>历史上 MD5 和 SHA-1 曾经是使用最为广泛的 cryptographic hash function，但是随着密码学的发展，这两个哈希函数的安全性相继受到了各种挑战。</p>
</li>
<li>
<p>因此现在安全性较重要的场合推荐使用 SHA-2 等新的更加安全的哈希函数。</p>
</li>
<li>
<p>SHA-2 包含了一系列的哈希函数：SHA-224，SHA-256，SHA-384，SHA-512，SHA-512/224，SHA-512/256，其对应的哈希值长度分别为 224，256，384 或者 512 位。</p>
</li>
<li>
<p>SHA-2 具有和 MD5 类似的性质(参见 MD5 算法的特征)</p>
</li>
<li>
<p>举例：</p>
<p>​	例如，在比特币系统中，所有参与者需要共同解决如下问题：对于一个给定的字符串 U，给定的目标哈希值 H，需要计算出一个字符串 V，使得 U+V 的哈希值与 H 的差小于一个给定值 D。此时，只能通过暴力枚举 V 来进行猜测。首先计算出结果的人可以获得一定奖金。而某人首先计算成功的概率与其拥有的计算量成正比，所以其获得的奖金的期望值与其拥有的计算量成正比。</p>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(11)--树与二叉树</title>
    <url>/posts/265f4dd2/</url>
    <content><![CDATA[<h2 id="树的实例：模拟文件系统">树的实例：模拟文件系统</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, <span class="built_in">type</span>=<span class="string">&#x27;dir&#x27;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.children = []</span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">n = Node(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">n2 = Node(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">n.children.append(n2)</span><br><span class="line">n2.parent = n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystemTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.root = Node(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        self.now = self.root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="comment"># name 以 / 结尾</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            name += <span class="string">&quot;/&quot;</span></span><br><span class="line">        node = Node(name)</span><br><span class="line">        self.now.children.append(node)</span><br><span class="line">        node.parent = self.now</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">ls</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.now.children</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cd</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            name += <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;../&quot;</span>:</span><br><span class="line">            self.now = self.now.parent</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.now.children:</span><br><span class="line">            <span class="keyword">if</span> child.name == name:</span><br><span class="line">                self.now = child</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid dir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree = FileSystemTree()</span><br><span class="line">tree.mkdir(<span class="string">&quot;var/&quot;</span>)</span><br><span class="line">tree.mkdir(<span class="string">&#x27;bin/&#x27;</span>)</span><br><span class="line">tree.mkdir(<span class="string">&#x27;usr/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tree.cd(<span class="string">&#x27;bin/&#x27;</span>)</span><br><span class="line">tree.mkdir(<span class="string">&#x27;python/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tree.root.children)</span><br><span class="line"><span class="built_in">print</span>(tree.ls())</span><br></pre></td></tr></table></figure></div>
<span id="more"></span>
<h2 id="二叉树">二叉树</h2>
<p><img src="https://s2.loli.net/2022/04/18/Q3UvKW8itLeqAXI.png" alt="简单二叉树"></p>
<ul>
<li>二叉树的链式存储：将二叉树的节点定义为一个对象，节点之间通过类似链表的链接方式来连接。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = BiTreeNode(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">b = BiTreeNode(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">c = BiTreeNode(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">d = BiTreeNode(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">e = BiTreeNode(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">f = BiTreeNode(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">g = BiTreeNode(<span class="string">&quot;G&quot;</span>)</span><br><span class="line"></span><br><span class="line">e.lchild = a</span><br><span class="line">e.rchild = g</span><br><span class="line">a.rchild = c</span><br><span class="line">c.lchild = b</span><br><span class="line">c.rchild = d</span><br><span class="line">g.rchild = f</span><br><span class="line"></span><br><span class="line">root = e</span><br><span class="line"><span class="built_in">print</span>(root.lchild.rchild.data)</span><br></pre></td></tr></table></figure></div>
<h3 id="二叉树的遍历">二叉树的遍历</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">a = BiTreeNode(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">b = BiTreeNode(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">c = BiTreeNode(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">d = BiTreeNode(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">e = BiTreeNode(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">f = BiTreeNode(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">g = BiTreeNode(<span class="string">&quot;G&quot;</span>)</span><br><span class="line"></span><br><span class="line">e.lchild = a</span><br><span class="line">e.rchild = g</span><br><span class="line">a.rchild = c</span><br><span class="line">c.lchild = b</span><br><span class="line">c.rchild = d</span><br><span class="line">g.rchild = f</span><br><span class="line"></span><br><span class="line">root = e</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">print</span>(root.data, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        pre_order(root.lchild)</span><br><span class="line">        pre_order(root.rchild)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        in_order(root.lchild)</span><br><span class="line">        <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        in_order(root.rchild)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        post_order(root.lchild)</span><br><span class="line">        post_order(root.rchild)</span><br><span class="line">        <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.lchild:</span><br><span class="line">            queue.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild:</span><br><span class="line">            queue.append(node.rchild)        </span><br><span class="line">        </span><br><span class="line">pre_order(root)</span><br><span class="line">in_order(root)</span><br><span class="line">post_order(root)</span><br><span class="line">level_order(root)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>二叉树的遍历方式：
<ul>
<li>前序遍历：EACBDGF</li>
<li>中序遍历：ABCDEGF</li>
<li>后序遍历：BDCAFGE</li>
<li>层次遍历：EAGCFBD</li>
</ul>
</li>
</ul>
<h3 id="二叉搜索树概念">二叉搜索树概念</h3>
<ul>
<li>
<p>二叉搜索树是一棵二叉树并且满足性质：</p>
<p>设 x 是二叉树的一个节点。</p>
<p>如果 y 是 x 左子树的一个节点，那么<code>y.key&lt;=x.key</code>;</p>
<p>如果 y 是 x 右子树的一个节点，那么<code>y.key&gt;=x.key</code>.</p>
<p><img src="https://s2.loli.net/2022/04/18/frUaMewKzdiokG6.png" alt="二叉搜索树"></p>
</li>
</ul>
<h3 id="二叉搜索树的增删查">二叉搜索树的增删查</h3>
<ol>
<li>二叉搜索树的插入</li>
</ol>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">                self.insert_no_rec(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, node, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = BiTreeNode(val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.data:</span><br><span class="line">            node.lchild = self.insert(node.lchild, val)</span><br><span class="line">            node.lchild.parent = node</span><br><span class="line">        <span class="keyword">elif</span> val &gt; node.data:</span><br><span class="line">            node.rchild = self.insert(node.rchild, val)</span><br><span class="line">            node.rchild.parent = node</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:       <span class="comment"># 空树</span></span><br><span class="line">            self.root = BiTreeNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.lchild:</span><br><span class="line">                    p = p.lchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.lchild = BiTreeNode(val)</span><br><span class="line">                    p.lchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.rchild:</span><br><span class="line">                    p = p.rchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.rchild = BiTreeNode(val)</span><br><span class="line">                    p.rchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            self.pre_order(root.lchild)</span><br><span class="line">            self.pre_order(root.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.in_order(root.lchild)</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            self.in_order(root.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.post_order(root.lchild)</span><br><span class="line">            self.post_order(root.rchild)</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)     </span><br><span class="line"></span><br><span class="line">tree = BST([<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>])</span><br><span class="line">tree.pre_order(tree.root)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">tree.in_order(tree.root)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">tree.post_order(tree.root)</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>二叉搜索树的查询</li>
</ol>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">                self.insert_no_rec(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, node, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = BiTreeNode(val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.data:</span><br><span class="line">            node.lchild = self.insert(node.lchild, val)</span><br><span class="line">            node.lchild.parent = node</span><br><span class="line">        <span class="keyword">elif</span> val &gt; node.data:</span><br><span class="line">            node.rchild = self.insert(node.rchild, val)</span><br><span class="line">            node.rchild.parent = node</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:       <span class="comment"># 空树</span></span><br><span class="line">            self.root = BiTreeNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.lchild:</span><br><span class="line">                    p = p.lchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.lchild = BiTreeNode(val)</span><br><span class="line">                    p.lchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.rchild:</span><br><span class="line">                    p = p.rchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.rchild = BiTreeNode(val)</span><br><span class="line">                    p.rchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self, node, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node.data &lt; val:</span><br><span class="line">            <span class="keyword">return</span> self.query(node.rchild, val)</span><br><span class="line">        <span class="keyword">elif</span> node.data &gt; val:</span><br><span class="line">            <span class="keyword">return</span> self.query(node.lchild, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="keyword">if</span> p.data &lt; val:</span><br><span class="line">                p = p.rchild</span><br><span class="line">            <span class="keyword">elif</span> p.data &gt; val:</span><br><span class="line">                p = p.lchild</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            self.pre_order(root.lchild)</span><br><span class="line">            self.pre_order(root.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.in_order(root.lchild)</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            self.in_order(root.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.post_order(root.lchild)</span><br><span class="line">            self.post_order(root.rchild)</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)     </span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>, <span class="number">2</span>))            </span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line">tree = BST(li)</span><br><span class="line"><span class="built_in">print</span>(tree.query_no_rec(<span class="number">4</span>).data)</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>二叉搜索树的删除</li>
</ol>
<ul>
<li>如果要删除的节点是叶子节点：直接删除</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/WLZKD4tEwoUQaHr.png" alt="第一种删除情况"></p>
<ul>
<li>如果要删除的节点只有一个孩子：将此节点的父亲与孩子连接，然后删除该节点</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/rytS4WPaKTOu9mD.png" alt="第二种删除情况"></p>
<ul>
<li>如果要删除的节点有两个孩子：将其右子树的最小节点(该节点最多有一个右孩子)删除，并替换当前节点。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/ilaRtdXe9YBzW7D.png" alt="第三种删除情况"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">                self.insert_no_rec(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:       <span class="comment"># 空树</span></span><br><span class="line">            self.root = BiTreeNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.lchild:</span><br><span class="line">                    p = p.lchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.lchild = BiTreeNode(val)</span><br><span class="line">                    p.lchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.rchild:</span><br><span class="line">                    p = p.rchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.rchild = BiTreeNode(val)</span><br><span class="line">                    p.rchild.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="keyword">if</span> p.data &lt; val:</span><br><span class="line">                p = p.rchild</span><br><span class="line">            <span class="keyword">elif</span> p.data &gt; val:</span><br><span class="line">                p = p.lchild</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.in_order(root.lchild)</span><br><span class="line">            <span class="built_in">print</span>(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            self.in_order(root.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove_node_1</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment"># 第一种删除情况 node 是叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            self.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node == node.parent.lchild:</span><br><span class="line">            node.parent.lchild = <span class="literal">None</span></span><br><span class="line">            node.parent = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove_node_21</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment">#第二种 2.1  node只有一个左孩子</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            self.root = node.lchild</span><br><span class="line">            node.lchild.parent = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.lchild:</span><br><span class="line">            node.parent.lchild = node.lchild</span><br><span class="line">            node.lchild.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.rchild = node.lchild</span><br><span class="line">            node.lchild.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove_node_22</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment"># 情况 2.2 node只有一个右孩子</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            self.root = node.rchild</span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.lchild:</span><br><span class="line">            node.parent.lchild = node.rchild</span><br><span class="line">            node.rchild.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.rchild = node.rchild</span><br><span class="line">            node.rchild.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.root:</span><br><span class="line">            node = self.query_no_rec(val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.lchild <span class="keyword">and</span> <span class="keyword">not</span> node.rchild:</span><br><span class="line">                self.__remove_node_1(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.rchild:</span><br><span class="line">                self.__remove_node_21(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.lchild:</span><br><span class="line">                self.__remove_node_22(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_node = node.rchild</span><br><span class="line">                <span class="keyword">while</span> min_node.lchild:</span><br><span class="line">                    min_node = min_node.lchild</span><br><span class="line">                node.data = min_node.data</span><br><span class="line">                <span class="keyword">if</span> min_node.rchild:</span><br><span class="line">                    self.__remove_node_22(min_node)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.__remove_node_1(min_node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree = BST([<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>])</span><br><span class="line">tree.in_order(tree.root)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">tree.delete(<span class="number">4</span>)</span><br><span class="line">tree.delete(<span class="number">1</span>)</span><br><span class="line">tree.in_order(tree.root)</span><br></pre></td></tr></table></figure></div>
<h3 id="二叉搜索树的效率">二叉搜索树的效率</h3>
<ul>
<li>平均情况下，二叉搜索树进行搜索的时间复杂度为<code>O(lgn)</code></li>
<li>最坏情况下，二叉搜索树可能非常偏斜</li>
<li>解决方案：
<ul>
<li>随机化插入</li>
<li>AVL 树</li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(12)--AVL树</title>
    <url>/posts/92a91713/</url>
    <content><![CDATA[<h2 id="概念">概念</h2>
<ul>
<li>AVL 树：AVL树是一棵自平衡的二叉搜索树</li>
<li>AVL 树具有以下性质：
<ul>
<li>根的左右子树的高度之差的绝对值不能超过 1</li>
<li>根的左右子树都是平衡二叉树</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/qt5rZx4PCQkvbEn.png" alt="平衡因子"></p>
<span id="more"></span>
<h2 id="旋转">旋转</h2>
<p>视频演示网址：<a href="https://www.visualgo.net/en/bst">VISUALGO</a></p>
<ul>
<li>
<p>插入一个节点可能会破坏 AVL 树的平衡，可以通过<strong>旋转</strong>操作来进行修正。</p>
</li>
<li>
<p>插入一个节点后，只有从插入节点到根节点的路径上的节点的平衡可能被改变。我们需要找出第一个破坏了平衡条件的节点，称之为 K。K 的两棵子树的高度差为2.</p>
</li>
<li>
<p>不平衡的出现可能有 4 种情况。</p>
<ul>
<li>不平衡是由于对 K 的右孩子的右子树插入导致的：左旋</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/1sybC3EZSWjQwHB.png" alt="左旋"></p>
<ul>
<li>不平衡是由于对 K 的左孩子的左子树插入导致的：右旋</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/rwm2naFBElTMkHZ.png" alt="右旋"></p>
<ul>
<li>不平衡是由于对 K 的右孩子的左子树插入导致的：右旋-左旋</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/GEKysHQNUiwFnLq.png" alt="右旋-左旋"></p>
<ul>
<li>不平衡是由于对 K 的左孩子的右子树插入导致的：左旋-右旋</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/PawDeu2p8odWqGy.png" alt="左旋-右旋"></p>
</li>
</ul>
<h3 id="旋转实现代码">旋转实现代码</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> BSTNode <span class="keyword">import</span> BiTreeNode, BST</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLNode</span>(<span class="params">BiTreeNode</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        BiTreeNode.__init__(self, data)</span><br><span class="line">        self.bf = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>(<span class="params">BST</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span></span><br><span class="line">        BST.__init__(self, li)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate_left</span>(<span class="params">self, p, c</span>):</span></span><br><span class="line">        s2 = c.lchild</span><br><span class="line">        p.rchild = s2</span><br><span class="line">        <span class="keyword">if</span> s2:</span><br><span class="line">            s2.parent = p</span><br><span class="line"></span><br><span class="line">        c.lchild = p</span><br><span class="line">        p.parent = c</span><br><span class="line"></span><br><span class="line">        p.bf = <span class="number">0</span></span><br><span class="line">        c.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate_right</span>(<span class="params">self, p, c</span>):</span></span><br><span class="line">        s2 = c.rchild</span><br><span class="line">        p.lchild = s2</span><br><span class="line">        <span class="keyword">if</span> s2:</span><br><span class="line">            s2.parent = p</span><br><span class="line">        </span><br><span class="line">        c.rchild = p</span><br><span class="line">        p.parent = c</span><br><span class="line"></span><br><span class="line">        p.bf = <span class="number">0</span></span><br><span class="line">        c.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate_right_left</span>(<span class="params">self, p, c</span>):</span></span><br><span class="line">        g = c.lchild</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># First rotate right</span></span><br><span class="line">        s3 = g.rchild</span><br><span class="line">        c.lchild = s3</span><br><span class="line">        <span class="keyword">if</span> s3:</span><br><span class="line">            s3.parent = c</span><br><span class="line">        g.rchild = c</span><br><span class="line">        c.parent = g</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Then rotate left</span></span><br><span class="line">        s2 = g.lchild</span><br><span class="line">        p.rchild = s2</span><br><span class="line">        <span class="keyword">if</span> s2:</span><br><span class="line">            s2.parent = p</span><br><span class="line">        g.lchild = p</span><br><span class="line">        p.parent = g</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update balance factor</span></span><br><span class="line">        <span class="keyword">if</span> g.bf &gt; <span class="number">0</span>:</span><br><span class="line">            p.bf = -<span class="number">1</span></span><br><span class="line">            c.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> g.bf &lt; <span class="number">0</span>:</span><br><span class="line">            p.bf = <span class="number">0</span></span><br><span class="line">            c.bf = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.bf = <span class="number">0</span></span><br><span class="line">            c.bf = <span class="number">0</span></span><br><span class="line">        g.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate_left_right</span>(<span class="params">self, p, c</span>):</span></span><br><span class="line">        g = c.rchild</span><br><span class="line"></span><br><span class="line">        s2 = g.lchild</span><br><span class="line">        c.rchild = s2</span><br><span class="line">        <span class="keyword">if</span> s2:</span><br><span class="line">            s2.parent = c</span><br><span class="line">        g.lchild = c</span><br><span class="line">        c.parent = g</span><br><span class="line"></span><br><span class="line">        s3 = g.rchild</span><br><span class="line">        p.lchild = s3</span><br><span class="line">        <span class="keyword">if</span> s3:</span><br><span class="line">            s3.parent = p</span><br><span class="line">        g.rchild = p</span><br><span class="line">        p.parent = g</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> g.bf &lt; <span class="number">0</span>:</span><br><span class="line">            p.bf = <span class="number">1</span></span><br><span class="line">            c.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> g.bf &gt; <span class="number">0</span>:</span><br><span class="line">            p.bf = <span class="number">0</span></span><br><span class="line">            c.bf = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.bf = <span class="number">0</span> </span><br><span class="line">            c.bf = <span class="number">0</span></span><br><span class="line">		g.bf = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></div>
<h2 id="插入">插入</h2>
<p>将下列代码复制到上一节代码之后</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_no_rec</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="comment"># same as BST</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            self.root = AVLNode(val)  <span class="comment"># 注意这里的节点对象</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.lchild:</span><br><span class="line">                    p = p.lchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.lchild = AVLNode(val)</span><br><span class="line">                    p.lchild.parent = p</span><br><span class="line">                    node = p.lchild</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.data:</span><br><span class="line">                <span class="keyword">if</span> p.rchild:</span><br><span class="line">                    p = p.rchild</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.rchild = AVLNode(val)</span><br><span class="line">                    p.rchild.parent = p</span><br><span class="line">                    node = p.rchild</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># update balance factor</span></span><br><span class="line">        <span class="keyword">while</span> node.parent:              <span class="comment"># node.parent non-null</span></span><br><span class="line">            <span class="keyword">if</span> node.parent.lchild == node:      <span class="comment"># The pass comes from the left subtree   The left subtree is even heavier</span></span><br><span class="line">                <span class="comment"># update node.parent  bf</span></span><br><span class="line">                <span class="keyword">if</span> node.parent.bf &lt; <span class="number">0</span>:  <span class="comment"># == -1   --&gt;  == -2</span></span><br><span class="line">                    <span class="comment"># rotate， checks which side of the node is depressed</span></span><br><span class="line">                    g = node.parent.parent  <span class="comment"># To join the rotated subtrees</span></span><br><span class="line">                    x = node.parent	<span class="comment"># Root of the subtree before rotation</span></span><br><span class="line">                    <span class="keyword">if</span> node.bf &gt; <span class="number">0</span>:</span><br><span class="line">                        n = self.rotate_left_right(node.parent, node)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        n = self.rotate_right(node.parent, node)</span><br><span class="line">                    <span class="comment"># Remember to connect n with g</span></span><br><span class="line">                <span class="keyword">elif</span> node.parent.bf &gt; <span class="number">0</span>: <span class="comment"># == 1  --&gt; == 0</span></span><br><span class="line">                    node.parent.bf = <span class="number">0</span> </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:       <span class="comment"># ==0 --&gt;  ==-1</span></span><br><span class="line">                    node.parent.bf = -<span class="number">1</span></span><br><span class="line">                    node = node.parent</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:                           <span class="comment"># The pass comes from the right subtree.   The right subtree is even heavier.</span></span><br><span class="line">                <span class="keyword">if</span> node.parent.bf &gt; <span class="number">0</span>:      <span class="comment"># ==1  --&gt;  ==2</span></span><br><span class="line">                    <span class="comment"># rotate， checks which side of the node is depressed</span></span><br><span class="line">                    g = node.parent.parent</span><br><span class="line">                    x = node.parent</span><br><span class="line">                    <span class="keyword">if</span> node.bf &lt; <span class="number">0</span>:</span><br><span class="line">                        n = self.rotate_right_left(node.parent, node)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        n = self.rotate_left(node.parent, node)</span><br><span class="line">                    <span class="comment"># Remember to connect n with g</span></span><br><span class="line">                <span class="keyword">elif</span> node.parent.bf &lt; <span class="number">0</span>:    <span class="comment"># ==-1  --&gt;  ==0</span></span><br><span class="line">                    node.parent.bf = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:                       <span class="comment"># ==0  --&gt;  ==1</span></span><br><span class="line">                    node.parent.bf = <span class="number">1</span></span><br><span class="line">                    node = node.parent</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># To join the rotated subtrees</span></span><br><span class="line">            n.parent = g</span><br><span class="line">            <span class="keyword">if</span> g:       <span class="comment"># g non-null</span></span><br><span class="line">                <span class="keyword">if</span> node.parent == g.lchild:</span><br><span class="line">                    g.lchild = n</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    g.rchild = n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.root = n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">tree = AVLTree([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">tree.pre_order(tree.root)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">tree.in_order(tree.root)                </span><br></pre></td></tr></table></figure></div>
<h2 id="应用">应用</h2>
<ul>
<li>B 树(B-Tree):B 树是一棵自平衡的多路搜索树。常用于数据库的索引。</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/pdAtMqrEJLOSZXg.png" alt="B-Tree"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(13)--贪心算法</title>
    <url>/posts/4c52af8a/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<ul>
<li>贪心算法(又称贪婪算法)是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</li>
<li>贪心算法并不保证会得到最优解，但是在某些问题上贪心算法的解就是最优解。要会判断一个问题能否用贪心算法来计算</li>
</ul>
<span id="more"></span>
<h2 id="找零问题">找零问题</h2>
<ul>
<li>假设商店老板需要找零 n 元钱，钱币的面额有：100 元、50 元、20 元、5 元、1 元，如何找零使得所需钱币的数量最少？</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">t, n</span>):</span></span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(change(t, <span class="number">376</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="背包问题">背包问题</h2>
<ul>
<li>一个小偷在某个商店发现有 n 个商品，第 i 个商品价值 v<sub>i</sub> 元，重 w<sub>i</sub> 千克。他希望拿走的价值尽量高，但他的背包最多只能容纳 W 千克的东西。他应该拿走哪些商品？</li>
<li>0-1 背包：对于一个商品，小偷要么把它完整拿走，要么留下。不能只拿走一部分，或把一个商品拿走多次。(商品为金条)</li>
<li>分数背包：对于一个商品，小偷可以拿走其中任意一部分。(商品为金砂)</li>
</ul>
<p>举例：</p>
<p>​	商品 1：$v_i=60 \qquad w_1=10$</p>
<p>​	商品 2：$v_2=100 \qquad w_2=20$</p>
<p>​	商品 3：$v_3 = 120 \qquad w_3 = 30$</p>
<p>​	背包容量：$W=50$</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分数背包</span></span><br><span class="line">goods = [(<span class="number">60</span>, <span class="number">10</span>),(<span class="number">100</span>,<span class="number">20</span>),(<span class="number">120</span>,<span class="number">30</span>)]    <span class="comment"># (price, weight)</span></span><br><span class="line">goods.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]/x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fractional_backpack</span>(<span class="params">goods, W</span>):</span></span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    total_price = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, (price, weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> W &gt;= weight:</span><br><span class="line">            m[i] = <span class="number">1</span></span><br><span class="line">            total_price += price</span><br><span class="line">            W -= weight</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i] = W / weight</span><br><span class="line">            total_price += m[i] * price</span><br><span class="line">            W = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> total_price, m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fractional_backpack(goods, <span class="number">50</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="数字拼接问题">数字拼接问题</h2>
<ul>
<li>有 n 个非负整数，将其按照字符串拼接的方式拼接成为一个整数。如何拼接可以使得得到的整数最大？</li>
</ul>
<p>例如：32，94，128，1286，6，71 可以拼接出的最大整数为 94716321286128</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line">li = [<span class="number">32</span>, <span class="number">94</span>, <span class="number">128</span>, <span class="number">1286</span>, <span class="number">6</span>, <span class="number">71</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xy_cmp</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x+y &lt; y+x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x+y &gt; y+x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number_join</span>(<span class="params">li</span>):</span></span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number_join(li))</span><br></pre></td></tr></table></figure></div>
<h2 id="活动选择问题">活动选择问题</h2>
<ul>
<li>假设有 n 个活动，这些活动要占用同一片场地，而场地在某时刻只能供一个活动使用。</li>
<li>每个活动都有一个开始时间 s<sub>i</sub> 和结束时间 f<sub>i</sub> (题目中时间以整数表示)，表示活动在 [s<sub>i</sub>, f<sub>i</sub>) 区间占用场地</li>
<li>问：安排哪些活动能够使该场地举办的活动的个数最多？</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/19/evDf2xmKZFyhnU9.png" alt="活动选择问题"></p>
<ul>
<li>贪心结论：最先结束的活动一定是最优解的一部分</li>
<li>证明：假设 a 是所有活动中最先结束的活动，b 是最优解中最先结束的活动。
<ul>
<li>如果 a=b，结论成立。</li>
<li>如果 a!=b，则 b 的结束时间一定晚于 a 的结束时间，则此时用 a 替换掉最优解中的 b，a 一定不与最优解中的其他活动时间重叠，因此替换后的解也是最优解。</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">activities = [(<span class="number">1</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">5</span>),(<span class="number">0</span>,<span class="number">6</span>),(<span class="number">5</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">9</span>),(<span class="number">5</span>,<span class="number">9</span>),(<span class="number">6</span>,<span class="number">10</span>),(<span class="number">8</span>,<span class="number">11</span>),(<span class="number">8</span>,<span class="number">12</span>),(<span class="number">2</span>,<span class="number">14</span>),(<span class="number">12</span>,<span class="number">16</span>)]</span><br><span class="line">activities.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity_selection</span>(<span class="params">a</span>):</span></span><br><span class="line">    res = [a[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> a[i][<span class="number">0</span>] &gt;= res[-<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">            res.append(a[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(activity_selection(activities))</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(14)--动态规划</title>
    <url>/posts/bd68661c/</url>
    <content><![CDATA[<h2 id="从斐波那契数列看动态规划">从斐波那契数列看动态规划</h2>
<ul>
<li>斐波那契数列：$F_n=F_{n-1}+F_{n-2}$</li>
<li>使用递归和非递归的方法来求解斐波那契数列的第 n 项</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Double counting of subproblems</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibnacci(n-<span class="number">1</span>) + fibnacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Idea of dynamic programming --- Optimal substructure(recursion formula)  + Repeating subproblem</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci_no_recurision</span>(<span class="params">n</span>):</span></span><br><span class="line">    f = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            num = f[-<span class="number">1</span>] + f[-<span class="number">2</span>]</span><br><span class="line">            f.append(num)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibnacci(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(fibnacci_no_recurision(<span class="number">100</span>))</span><br></pre></td></tr></table></figure></div>
<h2 id="钢条切割问题">钢条切割问题</h2>
<ul>
<li>某公司出售钢条，出售价格与钢条长度之间的关系如下表：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">长度 i</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">价格 p<sub>i</sub></td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">17</td>
<td style="text-align:center">17</td>
<td style="text-align:center">20</td>
<td style="text-align:center">24</td>
<td style="text-align:center">30</td>
</tr>
</tbody>
</table>
<ul>
<li>问题：现有一段长度为 n 的钢条和上面的价格表，求切割钢条方案，使得总收益最大。</li>
<li>长度为 4 的钢条的所有切割方案如下：(c 方案最优)</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/20/NilF2ZMsICGDnua.png" alt="切割方案"></p>
<ul>
<li>思考：长度为 n 的钢条的不同切割方案有几种？( 2<sup>n-1</sup> )</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">长度 i</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">最大 r<sub>i</sub></td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center">13</td>
<td style="text-align:center">17</td>
<td style="text-align:center">18</td>
<td style="text-align:center">22</td>
<td style="text-align:center">25</td>
<td style="text-align:center">30</td>
</tr>
</tbody>
</table>
<h3 id="递推式">递推式</h3>
<ul>
<li>
<p>设长度为 n 的钢条切割后的最优收益值为 r<sub>n</sub>，可以得出递推式：</p>
<p>$r_n=\text{max}(p_n, r_1+r_{n-1},r_2+r_{n-2},…,r_{n-1}+r_1)$</p>
</li>
<li>
<p>第一个参数 p<sub>n</sub> 表示不切割</p>
</li>
<li>
<p>其他 n-1 个参数分别表示另外 n-1 种不同切割方案，对方案 i=1,2,…,n-1</p>
<ul>
<li>将钢条切割为长度为 i 和 n-i 两段</li>
<li>方案 i 的收益为切割两段的最优收益之和</li>
</ul>
</li>
<li>
<p>考察所有的 i，选择其中收益最大的方案</p>
</li>
</ul>
<h3 id="最优子结构">最优子结构</h3>
<ul>
<li>可以将求解规模为 n 的原问题，划分为规模更小的子问题：完成一次切割后，可以将产生的两段钢条看成两个独立的钢条切割问题。</li>
<li>组合两个子问题的最优解，并在所有可能的两段切割方案中选取组合收益最大的，构成原问题的最优解。</li>
<li>钢条切割满足最优子结构：问题的最优解由相关子问题的最优解组合而成，这些子问题可以独立求解。</li>
<li>钢条切个问题还存在更简单的递归求解方法：
<ul>
<li>从钢条的左边切割下长度为 i 的一段，只对右边剩下的一段继续进行切割，做边的不再切割</li>
<li>递推式简化为 $r_n=\underset{1\leq i \leq n}{\text{max}}(p_i+r_{n-i})$</li>
<li>不做切割的方案就可以描述为：左边一段长度为 n，收益为 p<sub>n</sub>，剩余一段长度为 0，收益为 r<sub>0</sub>=0</li>
</ul>
</li>
</ul>
<h3 id="自顶向下实现">自顶向下实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s running time: %s secs.&quot;</span> % (func.__name__, t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_recursion_1</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = p[n]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            res = <span class="built_in">max</span>(res, cut_rod_recursion_1(p, i) + cut_rod_recursion_1(p, n-i))</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c1</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> cut_rod_recursion_1(p, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_recursion_2</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res= <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, p[i] + cut_rod_recursion_2(p, n-i))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c2</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> cut_rod_recursion_2(p, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1(p, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(c2(p, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></div>
<ul>
<li>为何自顶向下递归实现的效率会这么差？</li>
<li>时间复杂度 O(2<sup>n</sup>)</li>
</ul>
<h3 id="自底向上实现">自底向上实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s running time: %s secs.&quot;</span> % (func.__name__, t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_dp</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            res= <span class="built_in">max</span>(res, p[j] + r[i - j])</span><br><span class="line">        r.append(res)</span><br><span class="line">    <span class="keyword">return</span> r[n]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cut_rod_dp(p, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="重构解">重构解</h3>
<ul>
<li>如何修改动态规划算法，使其不仅输出最优解，还输出最优切割方案？</li>
<li>对每个子问题，保存切割一次时左边切下的长度</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">长度 i</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">价格 p<sub>i</sub></td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">17</td>
<td style="text-align:center">17</td>
<td style="text-align:center">20</td>
<td style="text-align:center">24</td>
<td style="text-align:center">30</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">i</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r[i]</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center">13</td>
<td style="text-align:center">17</td>
<td style="text-align:center">18</td>
<td style="text-align:center">22</td>
<td style="text-align:center">25</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">s[i]</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">10</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_extend</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    s = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res_r = <span class="number">0</span>   <span class="comment"># Maximum price</span></span><br><span class="line">        res_s = <span class="number">0</span>   <span class="comment"># The maximum price corresponds to the length of the left uncut part of the scheme</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j] + r[i - j] &gt; res_r:</span><br><span class="line">                res_r = p[j] + r[i - j]</span><br><span class="line">                res_s = j</span><br><span class="line">        r.append(res_r)</span><br><span class="line">        s.append(res_s)</span><br><span class="line">    <span class="keyword">return</span> r[n], s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rot_solution</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    r, s = cut_rod_extend(p, n)</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        ans.append(s[n])</span><br><span class="line">        n -= s[n]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cut_rot_solution(p, <span class="number">9</span>))</span><br></pre></td></tr></table></figure></div>
<h3 id="动态规划问题关键特征">动态规划问题关键特征</h3>
<ul>
<li>什么问题可以使用动态规划方法？</li>
<li>最优子结构
<ul>
<li>原问题的最优解中涉及多少个子问题</li>
<li>在确定最优解使用哪些子问题时，需要考虑多少种选择</li>
</ul>
</li>
<li>重叠子问题</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(15)--最长公共子序列</title>
    <url>/posts/9641fa75/</url>
    <content><![CDATA[<h2 id="介绍">介绍</h2>
<ul>
<li>
<p>一个序列的子序列是在该序列中删去若干元素后得到的序列。</p>
<p>例如：“ABCD” 和 “BDF” 都是 “ABCDEFG” 的子序列（子序列不要求连续，但相对顺序要一致；子串必须连续）</p>
</li>
<li>
<p>最长公共子序列(LCS)问题：给定两个序列 X 和 Y，求 X 和 Y长度最大的公共子序列。</p>
<p>例如：X=“ABBCBDE”  Y=“DBBCDB”  LCS(X,Y)=“BBCD”</p>
</li>
<li>
<p>应用场景：字符串相似度比对</p>
</li>
</ul>
<span id="more"></span>
<h3 id="LCS-的最优子结构">LCS 的最优子结构</h3>
<p>令 $X=&lt;x_1,x_2,…,x_m&gt;$ 和 $Y=&lt;y_1,y_2,…,y_n&gt;$ 为两个序列，$Z=&lt;z_1,z_2,…,z_k&gt;$ 为 $X$ 和 $Y$ 的任意 LCS。</p>
<ol>
<li>如果 $x_m=y_n$，则 $z_k=x_m=y_n$ 且 $Z_{k-1}$ 是 $X_{m-1}$ 和 $Y_{n-1}$ 的一个 LCS</li>
<li>如果 $x_m \neq y_n$，那么 $z_k \neq x_m$ 意味着 $Z$ 是 $X_{m-1}$ 和 $Y$ 的一个 LCS</li>
<li>如果 $x_m \neq y_n$，那么 $z_k\neq y_n$，意味着 $Z$ 是 $X$ 和 $Y_{n-1}$ 的一个 LCS</li>
</ol>
<ul>
<li>最优解的递推式：</li>
</ul>
<p>​	$c[i,j]=\begin{cases}0 &amp; 若\quad i=0\quad 或 \quad j=0\<br>
c[i-1,j-1]+1 &amp; 若\quad i,j&gt;0\quad 且\quad x_i=y_i \<br>
\text{max}(c[i,j-1],c[i-1,j]) &amp; 若\quad i,j&gt;0\quad 且\quad x_i\neq y_i\end{cases}$</p>
<ul>
<li>其中 $c[i,j]$ 表示 $X_i$ 和 $Y_j$ 的 LCS 长度</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/20/B69pFKyTYOotUsH.png" alt="LCS 最优子结构"></p>
<p>例如：要求 a=“ABCBDAB” 与 b=“BDCABA” 的 LCS：</p>
<ul>
<li>由于最后一位 “B” != “A”</li>
<li>因此 LCS(a,b) 应该来源于 LCS(a[:-1],b) 与 LCS(a,b[:-1]) 中更大的那一个</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_length</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># i j 位置上的字符匹配时，来自于左上方 +1</span></span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j], c[i][j-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(_)</span><br><span class="line">    <span class="keyword">return</span> c[m][n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs_length(<span class="string">&quot;ABCBDAB&quot;</span>, <span class="string">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_length</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># i j 位置上的字符匹配时，来自于左上方 +1</span></span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j], c[i][j-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(_)</span><br><span class="line">    <span class="keyword">return</span> c[m][n]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># i j 位置上的字符匹配时，来自于左上方 +1</span></span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="string">&quot;⬅&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> c[i-<span class="number">1</span>][j] &gt; c[i][j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="string">&quot;⬆&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = c[i][j-<span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="string">&quot;↖&quot;</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_trackback</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="string">&quot;⬅&quot;</span>:</span><br><span class="line">            res.append(x[i-<span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="string">&quot;⬆&quot;</span>:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(res))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs_trackback(<span class="string">&quot;ABCBDAB&quot;</span>, <span class="string">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(16)--欧几里得与RSA算法</title>
    <url>/posts/7bdd8167/</url>
    <content><![CDATA[<h2 id="欧几里得算法">欧几里得算法</h2>
<h3 id="最大公约数">最大公约数</h3>
<ul>
<li>约数：如果整数 a 能被整数 b 整除，那么 a 叫做 b 的倍数，b 叫做 a 的约数</li>
<li>给定两个整数 a，b 两个数的所有公共约数中的最大值即为最大公约数(Greatest Common Divisor, GCD)</li>
<li>例如：12 与 16 的最大公约数是 4</li>
</ul>
<span id="more"></span>
<p>如何计算两个数的最大公约数：</p>
<ul>
<li>欧几里得：辗转相除法(欧几里得算法)  gcd(a,b) = gcd(b, a mod b)
<ul>
<li>$\text{gcd}(60,21)=\text{gcd}(21,18)=\text{gcd}(18,3)=\text{gcd}(3,0)=3$</li>
</ul>
</li>
<li>《九章算术》：更相减损术</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gcd(<span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(gcd2(<span class="number">12</span>, <span class="number">16</span>))</span><br></pre></td></tr></table></figure></div>
<ul>
<li>实现分数的运算</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        x = self.gcd(a, b)</span><br><span class="line">        self.a /= x</span><br><span class="line">        self.b /= x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">        <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">            r = a % b</span><br><span class="line">            a = b </span><br><span class="line">            b = r</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zgs</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">        <span class="comment"># 12  16  -&gt; 4</span></span><br><span class="line">        <span class="comment"># 3*4*4 =48</span></span><br><span class="line">        x = self.gcd(a, b)</span><br><span class="line">        <span class="keyword">return</span> a * b / x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="comment"># 1/12 + 1/20   </span></span><br><span class="line">        a = self.a</span><br><span class="line">        b = self.b</span><br><span class="line">        c = other.a</span><br><span class="line">        d = other.b</span><br><span class="line">        denominator = self.zgs(b, d)</span><br><span class="line">        numerator = a * denominator / b + c * denominator / d</span><br><span class="line">        <span class="keyword">return</span> Fraction(numerator, denominator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d/%d&quot;</span> % (self.a, self.b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Fraction(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">b = Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure></div>
<h2 id="RSA算法">RSA算法</h2>
<h3 id="密码与加密">密码与加密</h3>
<ul>
<li>传统加密：加密算法是秘密的</li>
<li>现代密码系统：加密算法是公开的，密钥是秘密的
<ul>
<li>对称加密</li>
<li>非对称加密</li>
</ul>
</li>
</ul>
<h3 id="RSA加密算法">RSA加密算法</h3>
<ul>
<li>RSA 非对称加密系统
<ul>
<li>公钥：用来加密，是公开的</li>
<li>私钥：用来解密，是私有的</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/20/3V21pQX7egkybIT.png" alt="RSA 加密算法"></p>
<ol>
<li>随机选取两个质数 p 和 q</li>
<li>计算 n = pq</li>
<li>选取一个与 Φ(n) 互质的小奇数 e，Φ(n)=(p-1)(q-1)</li>
<li>对模 Φ(n)，计算 e 的乘法逆元 d，即满足 (e*d) mod Φ(n) = 1</li>
<li>公钥 (e,n)    私钥 (d,n)</li>
</ol>
<ul>
<li>加密过程：c = (m<sup>e</sup>) mod n</li>
<li>解密过程：m = (c<sup>d</sup>) mod n</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构与算法(17)--设计模式与面向对象</title>
    <url>/posts/d7b3f4f7/</url>
    <content><![CDATA[<h2 id="设计模式">设计模式</h2>
<h3 id="介绍">介绍</h3>
<ul>
<li>设计模式：在软件设计中普遍存在(反复出现)的各种问题，所提出的解决方案。每一个设计模式系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计</li>
<li>“四人帮”(Gang of Four, GoF):
<ul>
<li>Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides</li>
</ul>
</li>
<li>《设计模式：可复用面向对象软件的基础》</li>
</ul>
<span id="more"></span>
<h3 id="分类">分类</h3>
<ul>
<li>创建型模式(5)：工厂方法模式、抽象工厂模式、创建者模式、原型模式、单例模式</li>
<li>结构型模式(7)：适配器模式、桥模式、组合模式、装饰模式、外观模式、享元模式、代理模式</li>
<li>行为型模式(11)：解释器模式、责任链模式、命令模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、访问者模式、模板方法模式</li>
</ul>
<h3 id="创建型模式">创建型模式</h3>
<h4 id="简单工厂模式">简单工厂模式</h4>
<ul>
<li>内容：不直接向客户端暴露对象创建的实现细节，二十通过一个工厂类来负责创建产品类的实例。</li>
<li>角色：
<ul>
<li>工厂角色(Creator)</li>
<li>抽象产品角色(Product)</li>
<li>具体产品角色(Concrete Product)</li>
</ul>
</li>
<li>优点：
<ul>
<li>隐藏了对象创建的实现细节</li>
<li>客户端不需要修改代码</li>
</ul>
</li>
<li>缺点：
<ul>
<li>违反了单一职责原则，将创建逻辑集中到一个工厂类里</li>
<li>当添加新产品时，需要修改工厂类代码，违反了开闭原则</li>
</ul>
</li>
</ul>
<h4 id="工厂方法模式">工厂方法模式</h4>
<ul>
<li>内容：定义一个用于创建对象的接口(工厂接口)，让子类巨顶实例化哪一个产品类。</li>
<li>角色：
<ul>
<li>抽象工厂角色(Creator)</li>
<li>具体工厂角色(Concretr Creator)</li>
<li>抽象产品角色(Product)</li>
<li>具体产品角色(Concrete Product)</li>
</ul>
</li>
<li>优点：
<ul>
<li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li>
<li>隐藏了对象创建的实现细节</li>
</ul>
</li>
<li>缺点：
<ul>
<li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li>
</ul>
</li>
</ul>
<h4 id="抽象工厂模式">抽象工厂模式</h4>
<ul>
<li>内容：定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象</li>
<li>例如：生产一部手机，需要手机壳、CPU、操作系统三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象</li>
<li>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</li>
<li>角色：
<ul>
<li>抽象工厂角色(Creator)</li>
<li>具体工厂角色(Concrete Creator)</li>
<li>抽象产品角色(Product)</li>
<li>具体产品角色(Concrete Product)</li>
<li>客户端(Client)</li>
</ul>
</li>
<li>优点：
<ul>
<li>将客户端与类的具体实现相分离</li>
<li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li>
<li>有利于产品的一致性(即产品之间的约束关系)</li>
</ul>
</li>
<li>缺点：
<ul>
<li>难以支持新种类的(抽象)产品</li>
</ul>
</li>
</ul>
<h4 id="建造者模式">建造者模式</h4>
<ul>
<li>内容：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li>
<li>角色：
<ul>
<li>抽象建造者</li>
<li>具体建造者</li>
<li>指挥者</li>
<li>产品</li>
</ul>
</li>
<li>建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要去呗是建造者模式着重一步步构造一个复杂对象，而抽象工厂模式着重于多个系列的产品对象</li>
<li>优点：
<ul>
<li>隐藏了一个产品的内部结构和装配过程</li>
<li>将构造代码于表示代码分开</li>
<li>可以对构造过程进行更加精细的控制</li>
</ul>
</li>
</ul>
<h4 id="单例模式">单例模式</h4>
<ul>
<li>内容：保证一个类只有一个实例，并提供一个访问它的全局访问点</li>
<li>角色：
<ul>
<li>单例(Singleton)</li>
</ul>
</li>
<li>优点：
<ul>
<li>对唯一实例的受控访问</li>
<li>单例相当于全局变量，但防止了命名空间被污染</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            cls._instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params">Singleton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = MyClass(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">b = MyClass(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"><span class="built_in">print</span>(b.a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure></div>
<h3 id="结构型模式">结构型模式</h3>
<h4 id="适配器模式">适配器模式</h4>
<ul>
<li>
<p>内容：将一个类的接口转换成客户希望的另一个接口。适配器莫斯使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作。</p>
</li>
<li>
<p>两种实现方式：</p>
<ul>
<li>类适配器：使用多继承</li>
<li>对象适配器：使用组合</li>
</ul>
</li>
<li>
<p>角色：</p>
<ul>
<li>目标接口</li>
<li>待适配的类</li>
<li>适配器</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>想使用一个已经存在的类，而它的接口不符合你的要求</li>
<li>(对象适配器)想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</li>
</ul>
</li>
</ul>
<h4 id="桥模式">桥模式</h4>
<ul>
<li>内容：将一个事物的两个维度分离，使其都可以独立地变化。</li>
<li>角色：
<ul>
<li>抽象</li>
<li>细化抽象</li>
<li>实现者</li>
<li>具体实现者</li>
</ul>
</li>
<li>应用场景：
<ul>
<li>当事物有两个维度以上的表现，两个维度都可能扩展时</li>
</ul>
</li>
<li>优点：
<ul>
<li>抽象和实现相分离</li>
<li>优秀的扩展能力</li>
</ul>
</li>
</ul>
<h4 id="组合模式">组合模式</h4>
<ul>
<li>内容：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</li>
<li>角色：
<ul>
<li>抽象组件</li>
<li>叶子组件</li>
<li>复合组件</li>
<li>客户端</li>
</ul>
</li>
<li>适用场景
<ul>
<li>表示对象的“部分-整体”的层次结构</li>
<li>希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象</li>
</ul>
</li>
<li>优点：
<ul>
<li>定义了包含基本对象和组合对象的类层次结构</li>
<li>简化客户端代码，即客户端可以一致地使用组合对象和单个对象</li>
<li>更容易增加新类型的组件</li>
</ul>
</li>
</ul>
<h4 id="外观模式">外观模式</h4>
<ul>
<li>
<p>内容：为子系统中的一组接口提供了一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p>
</li>
<li>
<p>角色：</p>
<ul>
<li>外观</li>
<li>子系统类</li>
</ul>
</li>
<li>
<p>优点：</p>
<ul>
<li>减少系统相互依赖</li>
<li>提高了灵活性</li>
<li>提高了安全性</li>
</ul>
</li>
</ul>
<h4 id="代理模式">代理模式</h4>
<ul>
<li>内容：为其他对象提供一种代理以控制对这个对象的访问</li>
<li>应用场景：
<ul>
<li>远程代理：为远程的对象提供代理</li>
<li>虚代理：根据需要创建很大的对象</li>
<li>保护代理：控制对原始对象的访问，用于对象有不同访问权限时</li>
</ul>
</li>
</ul>
<h3 id="行为型模式">行为型模式</h3>
<h4 id="责任链模式">责任链模式</h4>
<ul>
<li>内容：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</li>
<li>角色：
<ul>
<li>抽象处理者</li>
<li>具体处理者</li>
<li>客户端</li>
</ul>
</li>
<li>适用场景：
<ul>
<li>有多个对象可以处理一个请求，哪个对象处理由运行时决定</li>
<li>在不明确接收者的情况下，向多个对象中的一个提交一个请求</li>
</ul>
</li>
<li>优点：
<ul>
<li>降低耦合度：一个对象无需知道是其他哪一个对象处理其请求。</li>
</ul>
</li>
</ul>
<h4 id="观察者模式">观察者模式</h4>
<ul>
<li>
<p>内容：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。观察者模式又称为“发布-订阅”模式</p>
</li>
<li>
<p>角色：</p>
<ul>
<li>抽象主题</li>
<li>具体主题</li>
<li>抽象观察者</li>
<li>具体观察者</li>
</ul>
</li>
<li>
<p>适用场景</p>
<ul>
<li>当一个抽象模型有两方面，其中一个仿麦呢依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。</li>
<li>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变。</li>
<li>当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，你不希望这些对象是紧密耦合的。</li>
</ul>
</li>
<li>
<p>优点：</p>
<ul>
<li>目标和观察者之间的抽象耦合最小</li>
<li>支持广播通信</li>
</ul>
</li>
</ul>
<h4 id="策略模式">策略模式</h4>
<ul>
<li>内容：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可以独立于使用它的客户而变化。</li>
<li>角色：
<ul>
<li>抽象策略</li>
<li>具体策略</li>
<li>上下文</li>
</ul>
</li>
<li>优点：
<ul>
<li>定义了一系列可重用的算法和行为</li>
<li>消除了一些条件语句</li>
<li>可以提供相同行为的不同实现</li>
</ul>
</li>
<li>缺点：
<ul>
<li>客户必须了解不同的策略</li>
</ul>
</li>
</ul>
<h4 id="模板方法模式">模板方法模式</h4>
<ul>
<li>
<p>内容：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤</p>
</li>
<li>
<p>角色：</p>
<ul>
<li>抽象类：定义抽象的原子操作(钩子操作)；实现一个模板方法作为算法的骨架</li>
<li>具体类：实现原子操作</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>一次性实现一个算法的不变的部分</li>
<li>各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复</li>
<li>控制子类扩展</li>
</ul>
</li>
</ul>
<h2 id="面向对象">面向对象</h2>
<ul>
<li>
<p>面向对象的三大特性：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li>
<p>接口：若干抽象方法的集合</p>
<ul>
<li>作用：限制实现接口的类必须按照接口给定的调用方式实现这些方法；对高层模块隐藏了类的内部实现。</li>
</ul>
</li>
</ul>
<h3 id="面向对象设计SOLID原则">面向对象设计SOLID原则</h3>
<ul>
<li>开放封闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</li>
<li>里氏替换原则：所有引用父类的地方必须能透明地使用其子类的对象。</li>
<li>依赖倒置原则：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，要针对接口编程，而不是针对实现编程。</li>
<li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口，即高层模块不应该依赖那些它不需要的接口。</li>
<li>单一职责原则：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>1. Two Sum</title>
    <url>/posts/a2a205d7/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <strong>indices</strong> of the two numbers such that they add up to <code>target</code>.</p>
<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>You can return the answer in any order.</p>
<span id="more"></span>
<h3 id="Example-1">Example 1:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">Output: [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Explanation: Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span>, we <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2">Example 2:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3">Example 3:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">Output: [<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints">Constraints:</h3>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>-10^9 &lt;= target &lt;= 10^9</code></li>
<li>Only one valid answer exists</li>
</ul>
<h3 id="Follow-up">Follow-up:</h3>
<p>Can you come up with an algorithm that is less than <code>O(n2) </code>time complexity?</p>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            j = target - i</span><br><span class="line">            start_index = nums.index(i)</span><br><span class="line">            next_index = start_index + <span class="number">1</span></span><br><span class="line">            temp_nums = nums[next_index: ]</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> temp_nums:</span><br><span class="line">                <span class="keyword">return</span>(nums.index(i), next_index + temp_nums.index(j))</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span>        </span><br><span class="line">        <span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> target - nums[i] <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">                <span class="built_in">dict</span>[nums[i]] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="built_in">dict</span>[target-nums[i]], i]</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        v2idx = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            remain = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> remain <span class="keyword">in</span> v2idx:</span><br><span class="line">                <span class="keyword">return</span> [v2idx[remain], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                v2idx[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Easy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Add Two Numbers</title>
    <url>/posts/da890a1f/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<span id="more"></span>
<h3 id="Example-1">Example 1:</h3>
<p><img src="https://s2.loli.net/2022/05/01/MN7bswf2nz5VLYG.jpg" alt="Example 1"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: l1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], l2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">Output: [<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>]</span><br><span class="line">Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2">Example 2:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: l1 = [<span class="number">0</span>], l2 = [<span class="number">0</span>]</span><br><span class="line">Output: [<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3">Example 3:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: l1 = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], l2 = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>]</span><br><span class="line">Output: [<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints">Constraints</h3>
<ul>
<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span>        </span><br><span class="line">        <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        p = dummy</span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode((l1.val + l2.val + carry) % <span class="number">10</span>)</span><br><span class="line">            carry = (l1.val + l2.val + carry) // <span class="number">10</span></span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l2:</span><br><span class="line">            <span class="keyword">while</span> l2:</span><br><span class="line">                p.<span class="built_in">next</span> = ListNode((l2.val + carry) % <span class="number">10</span>)</span><br><span class="line">                carry = (l2.val + carry) // <span class="number">10</span></span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">                p = p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            <span class="keyword">while</span> l1:</span><br><span class="line">                p.<span class="built_in">next</span> = ListNode((l1.val + carry) % <span class="number">10</span>)</span><br><span class="line">                carry = (l1.val + carry) // <span class="number">10</span></span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">                p = p.<span class="built_in">next</span>     </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            p.<span class="built_in">next</span> = ListNode(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span>        </span><br><span class="line">        re = temp = ListNode(<span class="literal">None</span>)</span><br><span class="line">        add = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> add:</span><br><span class="line">            add += (l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span>) + (l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">            temp.<span class="built_in">next</span> = ListNode(add%<span class="number">10</span>)</span><br><span class="line">            add //= <span class="number">10</span></span><br><span class="line">            temp = temp.<span class="built_in">next</span></span><br><span class="line">            l1 = l1.<span class="built_in">next</span> <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            l2 = l2.<span class="built_in">next</span> <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> re.<span class="built_in">next</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Longest Palindromic Substring</title>
    <url>/posts/2fda2b11/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p>
<span id="more"></span>
<h3 id="Example-1">Example 1:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;babad&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bab&quot;</span></span><br><span class="line">Explanation: <span class="string">&quot;aba&quot;</span> <span class="keyword">is</span> also a valid answer.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2">Example 2:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints">Constraints:</h3>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consist of only digits and English letters.</li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># Two judgment conditions</span></span><br><span class="line">        <span class="comment"># DP</span></span><br><span class="line">        palindrome = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            len1 = <span class="built_in">len</span>(self.getlongestpalindrome(s, i, i))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> len1 &gt; <span class="built_in">len</span>(palindrome):</span><br><span class="line">                palindrome = self.getlongestpalindrome(s, i, i)</span><br><span class="line"></span><br><span class="line">            len2 = <span class="built_in">len</span>(self.getlongestpalindrome(s, i, i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> len2 &gt; <span class="built_in">len</span>(palindrome):</span><br><span class="line">                palindrome = self.getlongestpalindrome(s, i, i+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> palindrome</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getlongestpalindrome</span>(<span class="params">self, s, l, r</span>):</span></span><br><span class="line">        <span class="keyword">while</span> l &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[l] == s[r]:</span><br><span class="line">            l -= <span class="number">1</span></span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s[l+<span class="number">1</span> : r]</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># xxx ba ab xxx</span></span><br><span class="line">        <span class="comment"># xxx aba xxx</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            res = self.helper(s, i, i, res)     <span class="comment"># bab</span></span><br><span class="line">            res = self.helper(s, i, i+<span class="number">1</span>, res)   <span class="comment"># abba</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">self, s, left, right, res</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cur = s[left+<span class="number">1</span>:right]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cur) &gt; <span class="built_in">len</span>(res):</span><br><span class="line">            res = cur </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>6. Zigzag Conversion</title>
    <url>/posts/fb60e303/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure></div>
<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">string convert(string s, <span class="built_in">int</span> numRows);</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;PAYPALISHIRING&quot;</span>, numRows = <span class="number">3</span></span><br><span class="line">Output: <span class="string">&quot;PAHNAPLSIIGYIR&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;PAYPALISHIRING&quot;</span>, numRows = <span class="number">4</span></span><br><span class="line">Output: <span class="string">&quot;PINALSIGYAHRPI&quot;</span></span><br><span class="line">Explanation:</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;A&quot;</span>, numRows = <span class="number">1</span></span><br><span class="line">Output: <span class="string">&quot;A&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consists of English letters (lower-case and upper-case), <code>','</code> and <code>'.'</code>.</li>
<li><code>1 &lt;= numRows &lt;= 1000</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">self, s: <span class="built_in">str</span>, numRows: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> numRows &lt;= <span class="number">1</span> <span class="keyword">or</span> numRows &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        zigzag = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(numRows)]</span><br><span class="line"></span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> achar <span class="keyword">in</span> s:</span><br><span class="line">            zigzag[row] += achar</span><br><span class="line">            <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">                step = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> row == numRows - <span class="number">1</span>:</span><br><span class="line">                step = -<span class="number">1</span></span><br><span class="line">            row = row + step</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(zigzag)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Longest Substring Without Repeating Characters</title>
    <url>/posts/c5a2b098/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p>
<span id="more"></span>
<h3 id="Example-1">Example 1:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">Output: <span class="number">3</span></span><br><span class="line">Explanation: The answer <span class="keyword">is</span> <span class="string">&quot;abc&quot;</span>, <span class="keyword">with</span> the length of <span class="number">3.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2">Example 2:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;bbbbb&quot;</span></span><br><span class="line">Output: <span class="number">1</span></span><br><span class="line">Explanation: The answer <span class="keyword">is</span> <span class="string">&quot;b&quot;</span>, <span class="keyword">with</span> the length of <span class="number">1.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3">Example 3:</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;pwwkew&quot;</span></span><br><span class="line">Output: <span class="number">3</span></span><br><span class="line">Explanation: The answer <span class="keyword">is</span> <span class="string">&quot;wke&quot;</span>, <span class="keyword">with</span> the length of <span class="number">3.</span></span><br><span class="line">Notice that the answer must be a substring, <span class="string">&quot;pwke&quot;</span> <span class="keyword">is</span> a subsequence <span class="keyword">and</span> <span class="keyword">not</span> a substring.</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints">Constraints:</h3>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 10^4</code></li>
<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        start = -<span class="number">1</span></span><br><span class="line">        <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">        <span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="comment"># s[i] in dict</span></span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> <span class="built_in">dict</span> <span class="keyword">and</span> <span class="built_in">dict</span>[s[i]] &gt; start:</span><br><span class="line">                start = <span class="built_in">dict</span>[s[i]]</span><br><span class="line">                <span class="built_in">dict</span>[s[i]] = i            </span><br><span class="line">            <span class="comment"># s[i] not in dict</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">dict</span>[s[i]] = i</span><br><span class="line">                <span class="keyword">if</span> i - start &gt; <span class="built_in">max</span>:</span><br><span class="line">                    <span class="built_in">max</span> = i - start</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Reverse Integer</title>
    <url>/posts/5585a24b/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2^31, 2^31 - 1]</code>, then return <code>0</code>.</p>
<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = <span class="number">123</span></span><br><span class="line">Output: <span class="number">321</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = -<span class="number">123</span></span><br><span class="line">Output: -<span class="number">321</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = <span class="number">120</span></span><br><span class="line">Output: <span class="number">21</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>-2^&#123;31&#125; &lt;= x &lt;= 2^&#123;31&#125; - 1</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># -2147483648 ~ 2147483647</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># return the absolute value of a number</span></span><br><span class="line">        a = <span class="built_in">abs</span>(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(a != <span class="number">0</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            a = 123</span></span><br><span class="line"><span class="string">            num = 0</span></span><br><span class="line"><span class="string">            First iteration  a = 12  num = 3</span></span><br><span class="line"><span class="string">            Second iteration a = 1   num = 32</span></span><br><span class="line"><span class="string">            Third iteration  a = 0   num = 321</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            temp = a % <span class="number">10</span></span><br><span class="line">            a = a // <span class="number">10</span></span><br><span class="line">            num = num * <span class="number">10</span> + temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> num &lt;= <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">and</span> -num &gt;= -<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">31</span>):</span><br><span class="line">            <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>8. String to Integer(atoi)</title>
    <url>/posts/487581ab/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>请你来实现一个<code>myAtoi(string s)</code>函数，使其能将字符串转换成一个 32 位有符号整数(similar to C/C++'s <code>atoi</code> function).</p>
<p>函数<code>myAtoi(string s)</code>的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为<code>'+'</code>还是 <code>'-'</code>，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>
<li>将前面步骤读入的这些数字转换为整数 (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>).如果没有读入数字，则整数为<code>0</code> 。必要时更改符号（从步骤 2 开始） (from step 2).</li>
<li>如果整数数超过 32 位有符号整数范围 <code>[-2^31, 2^31 - 1]</code>, 需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>-2^31</code> 的整数应该被固定为 <code>-2^31</code>, 大于 <code>2^31 - 1</code> 的整数应该被固定为 <code>2^31 - 1</code>.</li>
<li>返回整数作为最终结果。</li>
</ol>
<span id="more"></span>
<p><strong>Note:</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>' '</code> .</li>
<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li>
</ul>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;42&quot;</span></span><br><span class="line">Output: <span class="number">42</span></span><br><span class="line">Explanation: The underlined characters are what <span class="keyword">is</span> read <span class="keyword">in</span>, the caret <span class="keyword">is</span> the current reader position.</span><br><span class="line">Step <span class="number">1</span>: <span class="string">&quot;42&quot;</span> (no characters read because there <span class="keyword">is</span> no leading whitespace)</span><br><span class="line">         ^</span><br><span class="line">Step <span class="number">2</span>: <span class="string">&quot;42&quot;</span> (no characters read because there <span class="keyword">is</span> neither a <span class="string">&#x27;-&#x27;</span> nor <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">         ^</span><br><span class="line">Step <span class="number">3</span>: <span class="string">&quot;42&quot;</span> (<span class="string">&quot;42&quot;</span> <span class="keyword">is</span> read <span class="keyword">in</span>)</span><br><span class="line">           ^</span><br><span class="line">The parsed integer <span class="keyword">is</span> <span class="number">42.</span></span><br><span class="line">Since <span class="number">42</span> <span class="keyword">is</span> <span class="keyword">in</span> the <span class="built_in">range</span> [-<span class="number">2</span>^<span class="number">31</span>, <span class="number">2</span>^<span class="number">31</span> - <span class="number">1</span>], the final result <span class="keyword">is</span> <span class="number">42.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;   -42&quot;</span></span><br><span class="line">Output: -<span class="number">42</span></span><br><span class="line">Explanation:</span><br><span class="line">Step <span class="number">1</span>: <span class="string">&quot;   -42&quot;</span> (leading whitespace <span class="keyword">is</span> read <span class="keyword">and</span> ignored)</span><br><span class="line">            ^</span><br><span class="line">Step <span class="number">2</span>: <span class="string">&quot;   -42&quot;</span> (<span class="string">&#x27;-&#x27;</span> <span class="keyword">is</span> read, so the result should be negative)</span><br><span class="line">             ^</span><br><span class="line">Step <span class="number">3</span>: <span class="string">&quot;   -42&quot;</span> (<span class="string">&quot;42&quot;</span> <span class="keyword">is</span> read <span class="keyword">in</span>)</span><br><span class="line">               ^</span><br><span class="line">The parsed integer <span class="keyword">is</span> -<span class="number">42.</span></span><br><span class="line">Since -<span class="number">42</span> <span class="keyword">is</span> <span class="keyword">in</span> the <span class="built_in">range</span> [-<span class="number">2</span>^<span class="number">31</span>, <span class="number">2</span>^<span class="number">31</span> - <span class="number">1</span>], the final result <span class="keyword">is</span> -<span class="number">42.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;4193 with words&quot;</span></span><br><span class="line">Output: <span class="number">4193</span></span><br><span class="line">Explanation:</span><br><span class="line">Step <span class="number">1</span>: <span class="string">&quot;4193 with words&quot;</span> (no characters read because there <span class="keyword">is</span> no leading whitespace)</span><br><span class="line">         ^</span><br><span class="line">Step <span class="number">2</span>: <span class="string">&quot;4193 with words&quot;</span> (no characters read because there <span class="keyword">is</span> neither a <span class="string">&#x27;-&#x27;</span> nor <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">         ^</span><br><span class="line">Step <span class="number">3</span>: <span class="string">&quot;4193 with words&quot;</span> (<span class="string">&quot;4193&quot;</span> <span class="keyword">is</span> read <span class="keyword">in</span>; reading stops because the <span class="built_in">next</span> character <span class="keyword">is</span> a non-digit)</span><br><span class="line">             ^</span><br><span class="line">The parsed integer <span class="keyword">is</span> <span class="number">4193.</span></span><br><span class="line">Since <span class="number">4193</span> <span class="keyword">is</span> <span class="keyword">in</span> the <span class="built_in">range</span> [-<span class="number">2</span>^<span class="number">31</span>, <span class="number">2</span>^<span class="number">31</span> - <span class="number">1</span>], the final result <span class="keyword">is</span> <span class="number">4193.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>0 &lt;= s.length &lt;= 200</code></li>
<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>' '</code>, <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.</li>
</ul>
<h2 id="Solution">Solution</h2>
<p>题目涉及很多边界，这是需要注意的，其他只需要按照上面的算法从前到后写出来即可。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s : </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        s = s.lstrip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s: </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&quot;+&quot;</span> <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            sign = <span class="number">1</span> <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&quot;+&quot;</span> <span class="keyword">else</span>  -<span class="number">1</span> </span><br><span class="line">            s = s[<span class="number">1</span>:]</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s : </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            digit = <span class="built_in">ord</span>(s[i])-<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> digit&lt;<span class="number">0</span> <span class="keyword">or</span> digit&gt;<span class="number">9</span>: <span class="keyword">break</span></span><br><span class="line">            result = result * <span class="number">10</span> + digit</span><br><span class="line">    </span><br><span class="line">        result *= sign</span><br><span class="line">        <span class="keyword">if</span> result&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> result <span class="keyword">if</span> result&lt;=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)-<span class="number">1</span> <span class="keyword">else</span> <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result <span class="keyword">if</span> result&gt;-<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>) <span class="keyword">else</span> -<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Regular Expression Matching</title>
    <url>/posts/6358f960/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>给你一个字符串 <code>s</code> 和一个字符规律 <code>p</code>，请你来实现一个支持 <code>'.'</code> 和 <code>'*'</code> 的正则表达式匹配。</p>
<ul>
<li><code>'.'</code> 匹配任意单个字符</li>
<li><code>'*'</code> 匹配零个或多个前面的那一个元素</li>
</ul>
<p>所谓匹配，是要涵盖<strong>整个</strong>字符串 <code>s</code> 的，而不是部分字符串。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span>, p = <span class="string">&quot;a&quot;</span></span><br><span class="line">Output: false</span><br><span class="line">Explanation: <span class="string">&quot;a&quot;</span> does <span class="keyword">not</span> match the entire string <span class="string">&quot;aa&quot;</span>.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span>, p = <span class="string">&quot;a*&quot;</span></span><br><span class="line">Output: true</span><br><span class="line">Explanation: <span class="string">&#x27;*&#x27;</span> means zero <span class="keyword">or</span> more of the preceding element, <span class="string">&#x27;a&#x27;</span>. Therefore, by repeating <span class="string">&#x27;a&#x27;</span> once, it becomes <span class="string">&quot;aa&quot;</span>.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ab&quot;</span>, p = <span class="string">&quot;.*&quot;</span></span><br><span class="line">Output: true</span><br><span class="line">Explanation: <span class="string">&quot;.*&quot;</span> means <span class="string">&quot;zero or more (*) of any character (.)&quot;</span>.</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>1 &lt;= s.length &lt;= 20</code></li>
<li><code>1 &lt;= p.length &lt;= 30</code></li>
<li><code>s</code> contains only lowercase English letters.</li>
<li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and <code>'*'</code>.</li>
<li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li>
</ul>
<h2 id="Solution">Solution</h2>
<p><img src="https://s2.loli.net/2022/05/03/3cXimOGIKElCaHe.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/05/03/oce4ZjXdv59hpfJ.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/05/03/neRrVOy1iGW5jlc.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/05/03/TkzmCy246c5gXFR.png" alt=""></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        cache = [[<span class="literal">False</span>]*(<span class="built_in">len</span>(s)+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p)+<span class="number">1</span>)]</span><br><span class="line">        cache[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(p)):</span><br><span class="line">            cache[i+<span class="number">1</span>][<span class="number">0</span>] = cache[i-<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">and</span> p[i] == <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">                <span class="keyword">if</span> p[i] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    cache[i+<span class="number">1</span>][j+<span class="number">1</span>] = cache[i][j+<span class="number">1</span>] <span class="keyword">or</span> cache[i-<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> p[i-<span class="number">1</span>] == s[j] <span class="keyword">or</span> p[i-<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                        cache[i+<span class="number">1</span>][j+<span class="number">1</span>] |= cache[i+<span class="number">1</span>][j]</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cache[i+<span class="number">1</span>][j+<span class="number">1</span>] =cache[i][j] <span class="keyword">and</span> (p[i] == s[j] <span class="keyword">or</span> p[i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cache[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        s = <span class="string">&quot; &quot;</span> + s</span><br><span class="line">        p = <span class="string">&quot; &quot;</span> + p</span><br><span class="line"></span><br><span class="line">        M = <span class="built_in">len</span>(s)</span><br><span class="line">        N = <span class="built_in">len</span>(p)</span><br><span class="line"></span><br><span class="line">        dp = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">            dp.append([<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)])</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="keyword">if</span> s[m] == p[n] <span class="keyword">or</span> p[n] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> m-<span class="number">1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> n-<span class="number">1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                        dp[m][n] = dp[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[n] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    dp[m][n] = dp[m][n-<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">if</span> p[n-<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> s[m] == p[n-<span class="number">1</span>]:</span><br><span class="line">                        dp[m][n] = dp[m][n] <span class="keyword">or</span> dp[m-<span class="number">1</span>][n] <span class="keyword">or</span> dp[m-<span class="number">1</span>][n-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[M-<span class="number">1</span>][N-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Hard</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Container With Most Water</title>
    <url>/posts/d778649/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p>
<p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p><strong>说明：你不能倾斜容器。</strong></p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<p><img src="https://s2.loli.net/2022/05/03/pTe4kDsEWzRfKjb.jpg" alt="img"></p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: height = [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: height = [1,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>n == height.length</code></li>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>0 &lt;= height[i] &lt;= 10^4</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        res, l, r = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(height)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> l &gt; r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">min</span>(height[l], height[r])*(r-l))</span><br><span class="line">            <span class="keyword">if</span> height[l] &lt; height[r]:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            water = <span class="built_in">min</span>(height[left], height[right]) * (right - left)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> water &gt; result:</span><br><span class="line">                result = water</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>12. Integer to Roman</title>
    <url>/posts/ef5c8377/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>罗马数字包含以下七种字符：<code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure></div>
<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 <code>1</code>。<code>12</code> 写做 <code>XII</code> ，即为 <code>X + II</code>。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX + V + II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 <code>4</code> 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 <code>1</code> 在数字 <code>5</code> 的左边，所表示的数等于大数 <code>5</code> 减小数 <code>1</code> 得到的数值 <code>4</code>。同样地，数字 <code>9</code> 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给你一个整数，将其转为罗马数字。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="number">3</span></span><br><span class="line">Output: <span class="string">&quot;III&quot;</span></span><br><span class="line">Explanation: <span class="number">3</span> <span class="keyword">is</span> represented <span class="keyword">as</span> <span class="number">3</span> ones.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="number">58</span></span><br><span class="line">Output: <span class="string">&quot;LVIII&quot;</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="number">1994</span></span><br><span class="line">Output: <span class="string">&quot;MCMXCIV&quot;</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> <span class="keyword">and</span> IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>1 &lt;= num &lt;= 3999</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        cache = &#123;</span><br><span class="line">            <span class="number">1000</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">            <span class="number">900</span>: <span class="string">&quot;CM&quot;</span>,</span><br><span class="line">            <span class="number">500</span>: <span class="string">&quot;D&quot;</span>,</span><br><span class="line">            <span class="number">400</span>: <span class="string">&quot;CD&quot;</span>,</span><br><span class="line">            <span class="number">100</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="number">90</span>: <span class="string">&quot;XC&quot;</span>,</span><br><span class="line">            <span class="number">50</span>: <span class="string">&quot;L&quot;</span>,</span><br><span class="line">            <span class="number">40</span>: <span class="string">&quot;XL&quot;</span>,</span><br><span class="line">            <span class="number">10</span>: <span class="string">&quot;X&quot;</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">&quot;IX&quot;</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">&quot;V&quot;</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">&quot;IV&quot;</span>,</span><br><span class="line">            <span class="number">1</span>: <span class="string">&quot;I&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cache:</span><br><span class="line">            count = num // i</span><br><span class="line">            <span class="keyword">if</span> count:</span><br><span class="line">                res += count * cache[i]</span><br><span class="line">                num %= i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        ref = &#123;</span><br><span class="line">            <span class="string">&quot;I&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;V&quot;</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;X&quot;</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>:<span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;C&quot;</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;D&quot;</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="string">&quot;M&quot;</span>:<span class="number">1000</span>,</span><br><span class="line">            <span class="string">&quot;IV&quot;</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;IX&quot;</span>:<span class="number">9</span>,</span><br><span class="line">            <span class="string">&quot;XL&quot;</span>:<span class="number">40</span>,</span><br><span class="line">            <span class="string">&quot;XC&quot;</span>:<span class="number">90</span>,</span><br><span class="line">            <span class="string">&quot;CD&quot;</span>:<span class="number">400</span>,</span><br><span class="line">            <span class="string">&quot;CM&quot;</span>:<span class="number">900</span></span><br><span class="line">        &#125;</span><br><span class="line">        sorted_ref = <span class="built_in">sorted</span>(ref.keys(), key=ref.get, reverse=<span class="literal">True</span>)</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sorted_ref:</span><br><span class="line">            <span class="keyword">while</span> num &gt;= ref[i]:</span><br><span class="line">                res += i</span><br><span class="line">                num -= ref[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        values = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        numerals = [<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;CD&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;XC&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;XL&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;IX&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;IV&#x27;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line"></span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(values)):</span><br><span class="line">            <span class="keyword">while</span> num &gt;= values[i]:</span><br><span class="line">                num -= values[i]</span><br><span class="line">                result += numerals[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>9. Palindrome Number</title>
    <url>/posts/99155633/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is palindrome integer.</p>
<p>An integer is a <strong>palindrome</strong> when it reads the same backward as forward.</p>
<ul>
<li>For example, <code>121</code> is a palindrome while <code>123</code> is not.</li>
</ul>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = <span class="number">121</span></span><br><span class="line">Output: true</span><br><span class="line">Explanation: <span class="number">121</span> reads <span class="keyword">as</span> <span class="number">121</span> <span class="keyword">from</span> left to right <span class="keyword">and</span> <span class="keyword">from</span> right to left.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = -<span class="number">121</span></span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -<span class="number">121.</span> From right to left, it becomes <span class="number">121</span>-. Therefore it <span class="keyword">is</span> <span class="keyword">not</span> a palindrome.</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: x = <span class="number">10</span></span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 <span class="keyword">from</span> right to left. Therefore it <span class="keyword">is</span> <span class="keyword">not</span> a palindrome.</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>-2^&#123;31&#125; &lt;= x &lt;= 2^&#123;31&#125; - 1</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        a = <span class="built_in">abs</span>(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(a != <span class="number">0</span>):</span><br><span class="line">            temp = a % <span class="number">10</span></span><br><span class="line">            num = num * <span class="number">10</span> + temp</span><br><span class="line">            a = a // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> x == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Easy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Roman to Integer</title>
    <url>/posts/17f2eb28/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure></div>
<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 <code>1</code> 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X + II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX + V + II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 <code>4</code> 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 <code>1</code> 在数字 <code>5</code> 的左边，所表示的数等于大数 <code>5</code> 减小数 <code>1</code> 得到的数值 <code>4</code> 。同样地，数字 <code>9</code> 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V (5)</code> 和 <code>X (10)</code> 的左边，来表示 <code>4</code> 和 <code>9</code>。</li>
<li><code>X</code> 可以放在 <code>L (50)</code> 和 <code>C (100)</code> 的左边，来表示 <code>40</code> 和 <code>90</code>。</li>
<li><code>C</code> 可以放在 <code>D (500)</code> 和 <code>M (1000)</code> 的左边，来表示 <code>400</code> 和 <code>900</code>。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;III&quot;</span></span><br><span class="line">Output: <span class="number">3</span></span><br><span class="line">Explanation: III = <span class="number">3.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;LVIII&quot;</span></span><br><span class="line">Output: <span class="number">58</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;MCMXCIV&quot;</span></span><br><span class="line">Output: <span class="number">1994</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> <span class="keyword">and</span> IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>1 &lt;= s.length &lt;= 15</code></li>
<li><code>s</code> contains only the characters <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code>.</li>
<li>It is <strong>guaranteed</strong> that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        ref = &#123;</span><br><span class="line">            <span class="string">&quot;I&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;V&quot;</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;X&quot;</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>:<span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;C&quot;</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;D&quot;</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="string">&quot;M&quot;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = ref[s[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            prev = s[i-<span class="number">1</span>]</span><br><span class="line">            cur = s[i]</span><br><span class="line">            <span class="keyword">if</span> prev <span class="keyword">and</span> ref[prev] &lt; ref[cur]:</span><br><span class="line">                res += (ref[cur] - <span class="number">2</span>*ref[prev])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += ref[cur]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        numeral_map = &#123;</span><br><span class="line">            <span class="string">&quot;I&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;V&quot;</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;X&quot;</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>:<span class="number">50</span>,</span><br><span class="line">            <span class="string">&quot;C&quot;</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;D&quot;</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="string">&quot;M&quot;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> numeral_map[s[i]] &gt; numeral_map[s[i-<span class="number">1</span>]]:</span><br><span class="line">                result += numeral_map[s[i]] - <span class="number">2</span> * numeral_map[s[i-<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += numeral_map[s[i]]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Easy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Longest Common Prefix</title>
    <url>/posts/3b0a0f54/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">Output: <span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: strs = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">Output: <span class="string">&quot;&quot;</span></span><br><span class="line">Explanation: There <span class="keyword">is</span> no common prefix among the <span class="built_in">input</span> strings.</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>1 &lt;= strs.length &lt;= 200</code></li>
<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>
<li><code>strs[i]</code> consists of only lower-case English letters.</li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        res = <span class="built_in">min</span>(strs, key=<span class="built_in">len</span>)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">                <span class="keyword">if</span> s[j] != res[j]:</span><br><span class="line">                    res = res[:j]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sets = <span class="built_in">set</span>(string[i] <span class="keyword">for</span> string <span class="keyword">in</span> strs)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(sets) == <span class="number">1</span>:</span><br><span class="line">                    result += sets.pop()</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Easy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>15. 3Sum</title>
    <url>/posts/c7561acd/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a</code>，<code>b</code>，<code>c</code> ，使得 <code>a + b + c = 0 ？</code>请你找出所有和为 <code>0</code> 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>]</span><br><span class="line">Output: [</span><br><span class="line">    [-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-3"><strong>Example 3:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">0</span>]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<p><img src="https://s2.loli.net/2022/05/05/PGvkJMlQ98wbXSV.png" alt="image-20220505163450315"></p>
<p><img src="https://s2.loli.net/2022/05/05/obdJ5tpHWneuBjl.png" alt="image-20220505163501988"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">list</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            target = -nums[i]</span><br><span class="line">            cache = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[j] <span class="keyword">in</span> cache:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span> <span class="keyword">or</span> res[-<span class="number">1</span>] != [nums[i], target-nums[j], nums[j]]:</span><br><span class="line">                        res.append([nums[i], target-nums[j], nums[j]])</span><br><span class="line">                cache.add(target-nums[j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">list</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cur, l, r = nums[i], i+<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                tsum = cur + nums[l] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> tsum &gt; <span class="number">0</span>:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> tsum &lt; <span class="number">0</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span> <span class="keyword">or</span> [cur, nums[l], nums[r]] != res[-<span class="number">1</span>]:</span><br><span class="line">                        res.append([cur, nums[l], nums[r]])</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>16. 3Sum Closest</title>
    <url>/posts/5b9d40f1/</url>
    <content><![CDATA[<h2 id="Description">Description</h2>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums </code>和 一个目标值 <code>target</code>。请你从 <code>nums</code> 中选出三个整数，使它们的和与 <code>target</code> 最接近。</p>
<p>返回这三个数的和。</p>
<p>假定每组输入只存在恰好一个解。</p>
<span id="more"></span>
<h3 id="Example-1"><strong>Example 1:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">4</span>], target = <span class="number">1</span></span><br><span class="line">Output: <span class="number">2</span></span><br><span class="line">Explanation: The <span class="built_in">sum</span> that <span class="keyword">is</span> closest to the target <span class="keyword">is</span> <span class="number">2.</span> (-<span class="number">1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>).</span><br></pre></td></tr></table></figure></div>
<h3 id="Example-2"><strong>Example 2:</strong></h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], target = <span class="number">1</span></span><br><span class="line">Output: <span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Constraints"><strong>Constraints:</strong></h3>
<ul>
<li><code>3 &lt;= nums.length &lt;= 1000</code></li>
<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>-10^4 &lt;= target &lt;= 10^4</code></li>
</ul>
<h2 id="Solution">Solution</h2>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res = <span class="built_in">sum</span>(nums[:<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            l, r = i+<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                cur = nums[i] + nums[l] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(cur-target) &lt; <span class="built_in">abs</span>(res-target):</span><br><span class="line">                    res = cur</span><br><span class="line">                <span class="keyword">if</span> cur &gt; target:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> cur &lt; target:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2022/05/05/UGwXiEvTbRPkVN2.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/05/05/iEYOr5MNqGQHyR6.png" alt=""></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res = <span class="built_in">sum</span>(nums[:<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">1</span> <span class="keyword">and</span> nums[i] == nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            l, r = i+<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[r-<span class="number">1</span>] + nums[r] &lt;= target:</span><br><span class="line">                l = r - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] + nums[l] + nums[l+<span class="number">1</span>] &gt;= target:</span><br><span class="line">                r = l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                cur = nums[i] + nums[l] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(cur-target) &lt; <span class="built_in">abs</span>(res-target):</span><br><span class="line">                    res = cur</span><br><span class="line">                <span class="keyword">if</span> cur &gt; target:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> cur &lt; target:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>LeetCode</category>
        <category>Medium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(1)--加密算法</title>
    <url>/posts/198cf4b1/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1hY411P7g7">https://www.bilibili.com/video/BV1hY411P7g7</a></p>
</blockquote>
<h2 id="加密方式">加密方式</h2>
<ul>
<li>加密在前端开发和爬虫中是经常遇到的，掌握加密算法并且可以将加密的密文进行解密破解，且加密算法的熟练和剖析有助于帮助我们实现高效的 js 逆向，但我们基于爬虫的使用考虑所以不必去深究加密的具体实现方式</li>
<li>常见的加密算法基本分为几类：
<ul>
<li>线性散列算法（签名算法）MD5</li>
<li>对称性加密算法 AES DES</li>
<li>非对称性加密算法 RSA</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="MD5-加密">MD5 加密</h3>
<ul>
<li>MD5 是一种被广泛使用的线性散列算法，可以产生一个 128 位(16 字节)的散列值(hash value)，用于确保信息传输完整的一致性，且加密之后产生的是一个固定长度(32 位或 16 位)的数据。</li>
<li>解密：
<ul>
<li>常规来说，MD5 是不存在解密的。但是理论上 MD5 是可以进行反向暴力破解的。暴力破解的大致原理就是用很多不用的数据进行加密后跟已有的加密数据进行对比，由此来寻找规律。理论上只要数据量足够庞大，MD5 是可以被破解的，但是要注意，破解 MD5 是需要考虑破解的成本(时间和机器性能)。假设破解当前的 MD5 密码需要目前计算能力最优秀的计算机工作 100 年才能破解完成，那么当前的 MD5 密码就是安全的。</li>
<li>增加破解的成本的方法
<ul>
<li>使用一段无意义且随机的私钥进行 MD5 加密会生成一个加密串，我们暂时称之为串 1</li>
<li>将要加密的数据跟串 1 拼接，再进行一次 MD5，这是会生成串 2</li>
<li>将串 2 再次进行 MD5 加密，这时生成的串 3 就是我们加密后的数据</li>
</ul>
</li>
<li>在注册账号时的密码一般都是用的 MD5 加密</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hashCode = md5(<span class="string">&quot;i am bobo!&quot;</span>);</span></span><br><span class="line"><span class="javascript">        alert(hashCode)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="DES-AES-加密">DES/AES 加密</h3>
<ul>
<li>DES 全称为 Data Encryption Standard，即数据加密标准，是一种使用密钥加密的算法。该加密算法是一种对称加密方式，其加密运算、解密运算需要使用的是同样的密钥(一组字符串)即可。</li>
<li>注意：
<ul>
<li>现在用 AES 标准来替代原先的 DES</li>
<li>AES 和 DES 的区别：
<ul>
<li>加密后密文长度不同：
<ul>
<li>DES 加密后密文长度是 8 的整数倍</li>
<li>AES 加密后密文长度是 16 的整数倍</li>
</ul>
</li>
<li>应用场景的不同：
<ul>
<li>企业级开发使用 DES 足够安全</li>
<li>如果要求高使用 AES</li>
</ul>
</li>
<li>DES 和 AES 切换只需要修改<code>CryptoJS.AES &lt;==&gt; CryptoJS.DES</code></li>
</ul>
</li>
<li>使用 DES/AES 进行数据交互时要求双方都拥有相同的私钥</li>
<li>破解方法：
<ul>
<li>暴力破解</li>
<li>DES 如果使用 56 位的密钥，则可能的密钥数量是 2 的 56 次方个，只要计算足够强大是可以破解的</li>
</ul>
</li>
<li>DES 算法的入口参数有三个：
<ul>
<li>Key、Data、Mode、padding
<ul>
<li>Key 为 7 个字节共 56 位，是 DES 算法的工作密钥</li>
<li>Data 为 8 个字节 64 位，是要被加密或者被破解的数据</li>
<li>Mode 为 DES 的工作方式</li>
<li>padding 为填充模式，如果加密后密文长度如果达不到指定整数倍(8 个字节、16 个字节)，填充对应字符</li>
<li>padding 的赋值固定为<code>CryptoJS.pad.Pkcs7</code>即可</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aseKey = <span class="string">&quot;12345678&quot;</span>     <span class="comment">// 定制密钥 长度必须为 8/16/32位</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="string">&quot;i am bobo,who are you ?&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 加密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> encrypt = CryptoJS.DES.encrypt(message, CryptoJS.enc.Utf8.parse(aseKey),&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mode</span>: CryptoJS.mode.ECB,</span></span><br><span class="line"><span class="javascript">            <span class="attr">padding</span>: CryptoJS.pad.Pkcs7</span></span><br><span class="line"><span class="javascript">        &#125;).toString();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        alert(encrypt);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 解密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> decrypt = CryptoJS.DES.decrypt(encrypt, CryptoJS.enc.Utf8.parse(aseKey),&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">mode</span>: CryptoJS.mode.ECB,</span></span><br><span class="line"><span class="javascript">            <span class="attr">padding</span>: CryptoJS.pad.Pkcs7</span></span><br><span class="line"><span class="javascript">        &#125;).toString(CryptoJS.enc.Utf8);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        alert(decrypt);     <span class="comment">// 我是一个密码</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="RSA-加密">RSA 加密</h3>
<ul>
<li>RSA 加密：
<ul>
<li>是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用</li>
</ul>
</li>
<li>非对称加密算法：
<ul>
<li>非对称加密算法需要两个密钥：
<ul>
<li>公开密钥（publicKey）</li>
<li>私有密钥（privateKey）</li>
<li>公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫做非对称加密算法</li>
</ul>
</li>
</ul>
</li>
<li>注意：
<ul>
<li>使用时都是使用公钥加密使用私钥解密，公钥可以公开，私钥自己保留</li>
<li>算法强度复杂，安全性依赖于算法与密钥，但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快</li>
</ul>
</li>
<li>使用流程和场景介绍
<ul>
<li>通过公钥加密，使用私钥解密。私钥是通过公钥计算生成的。假设 ABC 三方之间相互要进行加密通信，大家相互之间使用公钥进行信息加密，信息读取时使用各自对应的私钥进行信息解密</li>
<li>用户输入的支付密码会通过 RSA 加密</li>
</ul>
</li>
<li>公钥私钥生成方式：
<ul>
<li>公私钥可以在线生成：<a href="http://web.chacuo.net/netrsakeypair">http://web.chacuo.net/netrsakeypair</a></li>
</ul>
</li>
</ul>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jsencrypt/3.0.0-beta.1/jsencrypt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 公钥</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> PUBLIC_KEY = <span class="string">&#x27;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtC4HfAgbpbjzI/cGyi8KZwULy2uHRP4pKw5ZlsbWgDXT1CDcg3pd6fnFhPNNIhpl7AoxCLgfjVREuSqF1OPkx8ebJSMHHq3Oav2ilM2uSisBcsC5EeiPbTdMDA8unrazLJtYqA7xjhW929H7TPY9s3kPZAQzn6vZ9I0pfLaLxhQIDAQAB-----END PUBLIC KEY-----&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 私钥</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> PRIVATE_KEY = <span class="string">&#x27;-----BEGIN PRIVATE KEY-----MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAK0Lgd8CBuluPMj9wbKLwpnBQvLa4dE/ikrDlmWxtaANdPUINyDel3p+cWE800iGmXsCjEIuB+NVES5KoXU4+THx5slIwcerc5q/aKUza5KKwFywLkR6I9tN0wMDy6etrMsm1ioDvGOFb3b0ftM9j2zeQ9kBDOfq9n0jSl8tovGFAgMBAAECgYAuiujMbYQkZtUMjkv51ONrbXKvVTXljPyKLV8XTRv3x4bMnQAO5C/D75xZNf3yBNnlHwNQjYbrmya617HjkIZdel6MM5AiJZrgY+nSTUd+mY/Sx2T6GjSHE/HaM/KlISgjkjLGXfsQeykryi2iB47CLmWdY+OpzVf0LUl7Kr0soQJBANcBsWYRCXUs0Uu8G/gIJ4eJsI4jN88PdIw9/VEkTwiqUamOb3MirZGtinuJeIyeTXkL99Pc+aKSSRE84Vz6ed0CQQDOCbKsAXtHTB3zYz++Ri9Dbcwjjp9KprQoaD7DJ3utZnEIMHgNYJWbFYUTslsYVd+qWf9kVLj0HfJ+sOZOXZ/JAkEArx+N4tiVn381qj45ebkKmXco+1zsJBcuktwa7HBqf2Bay4RceqcQQMvdM+ow6jg2WhXJciNWoXgNU6EG3riVcQJBAIg3YSjW0eoRKLwAoePqAtVRgeUAJc/05qbQRK5BLEM3twLzCGvPrxkY4SJkiFVOcNDvLynl2WGLawbXbWvh+gECQQDCcsHipcB2iGfEuMpzryOUVmsXm5nr4Dab4k6eDiQ6dejU6Nd4yvsVfviVMdgbcvFlSUgQ+J6WREp5sPEDR1wZ-----END PRIVATE KEY-----&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用公钥加密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();                  <span class="comment">// 实例化加密对象</span></span></span><br><span class="line"><span class="javascript">        encrypt.setPublicKey(PUBLIC_KEY);               <span class="comment">// 设置公钥</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> encrypted = encrypt.encrypt(<span class="string">&#x27;hello bobo!&#x27;</span>); <span class="comment">// 对指定数据进行加密</span></span></span><br><span class="line"><span class="javascript">        alert(encrypted)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用私钥解密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span></span><br><span class="line"><span class="javascript">        decrypt.setPrivateKey(PRIVATE_KEY);             <span class="comment">// 设置私钥</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uncrypted = decrypt.decrypt(encrypted);     <span class="comment">// 解密</span></span></span><br><span class="line"><span class="javascript">        alert(uncrypted);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="base64-伪加密">base64 伪加密</h3>
<ul>
<li>Base64 是一种用 64 个字符来表示任意二进制数据的方法。base64 是一种编码方式而不是加密算法，只是看上去像是加密而已</li>
<li>Base64 使用 A–Z, a–z, 0–9, +, / 这 64 个字符实现对数据进行加密</li>
</ul>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">// 创建Base64对象</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> Base64=&#123;<span class="attr">_keyStr</span>:<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>,<span class="attr">encode</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;&quot;</span>;<span class="keyword">var</span> n,r,i,s,o,u,a;<span class="keyword">var</span> f=<span class="number">0</span>;e=Base64._utf8_encode(e);<span class="keyword">while</span>(f&lt;e.length)&#123;n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n&gt;&gt;<span class="number">2</span>;o=(n&amp;<span class="number">3</span>)&lt;&lt;<span class="number">4</span>|r&gt;&gt;<span class="number">4</span>;u=(r&amp;<span class="number">15</span>)&lt;&lt;<span class="number">2</span>|i&gt;&gt;<span class="number">6</span>;a=i&amp;<span class="number">63</span>;<span class="keyword">if</span>(<span class="built_in">isNaN</span>(r))&#123;u=a=<span class="number">64</span>&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNaN</span>(i))&#123;a=<span class="number">64</span>&#125;t=t+<span class="built_in">this</span>._keyStr.charAt(s)+<span class="built_in">this</span>._keyStr.charAt(o)+<span class="built_in">this</span>._keyStr.charAt(u)+<span class="built_in">this</span>._keyStr.charAt(a)&#125;<span class="keyword">return</span> t&#125;,<span class="attr">decode</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;&quot;</span>;<span class="keyword">var</span> n,r,i;<span class="keyword">var</span> s,o,u,a;<span class="keyword">var</span> f=<span class="number">0</span>;e=e.replace(<span class="regexp">/[^A-Za-z0-9+/=]/g</span>,<span class="string">&quot;&quot;</span>);<span class="keyword">while</span>(f&lt;e.length)&#123;s=<span class="built_in">this</span>._keyStr.indexOf(e.charAt(f++));o=<span class="built_in">this</span>._keyStr.indexOf(e.charAt(f++));u=<span class="built_in">this</span>._keyStr.indexOf(e.charAt(f++));a=<span class="built_in">this</span>._keyStr.indexOf(e.charAt(f++));n=s&lt;&lt;<span class="number">2</span>|o&gt;&gt;<span class="number">4</span>;r=(o&amp;<span class="number">15</span>)&lt;&lt;<span class="number">4</span>|u&gt;&gt;<span class="number">2</span>;i=(u&amp;<span class="number">3</span>)&lt;&lt;<span class="number">6</span>|a;t=t+<span class="built_in">String</span>.fromCharCode(n);<span class="keyword">if</span>(u!=<span class="number">64</span>)&#123;t=t+<span class="built_in">String</span>.fromCharCode(r)&#125;<span class="keyword">if</span>(a!=<span class="number">64</span>)&#123;t=t+<span class="built_in">String</span>.fromCharCode(i)&#125;&#125;t=Base64._utf8_decode(t);<span class="keyword">return</span> t&#125;,<span class="attr">_utf8_encode</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;e=e.replace(<span class="regexp">/rn/g</span>,<span class="string">&quot;n&quot;</span>);<span class="keyword">var</span> t=<span class="string">&quot;&quot;</span>;<span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">0</span>;n&lt;e.length;n++)&#123;<span class="keyword">var</span> r=e.charCodeAt(n);<span class="keyword">if</span>(r&lt;<span class="number">128</span>)&#123;t+=<span class="built_in">String</span>.fromCharCode(r)&#125;<span class="keyword">else</span> <span class="keyword">if</span>(r&gt;<span class="number">127</span>&amp;&amp;r&lt;<span class="number">2048</span>)&#123;t+=<span class="built_in">String</span>.fromCharCode(r&gt;&gt;<span class="number">6</span>|<span class="number">192</span>);t+=<span class="built_in">String</span>.fromCharCode(r&amp;<span class="number">63</span>|<span class="number">128</span>)&#125;<span class="keyword">else</span>&#123;t+=<span class="built_in">String</span>.fromCharCode(r&gt;&gt;<span class="number">12</span>|<span class="number">224</span>);t+=<span class="built_in">String</span>.fromCharCode(r&gt;&gt;<span class="number">6</span>&amp;<span class="number">63</span>|<span class="number">128</span>);t+=<span class="built_in">String</span>.fromCharCode(r&amp;<span class="number">63</span>|<span class="number">128</span>)&#125;&#125;<span class="keyword">return</span> t&#125;,<span class="attr">_utf8_decode</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;&quot;</span>;<span class="keyword">var</span> n=<span class="number">0</span>;<span class="keyword">var</span> r=c1=c2=<span class="number">0</span>;<span class="keyword">while</span>(n&lt;e.length)&#123;r=e.charCodeAt(n);<span class="keyword">if</span>(r&lt;<span class="number">128</span>)&#123;t+=<span class="built_in">String</span>.fromCharCode(r);n++&#125;<span class="keyword">else</span> <span class="keyword">if</span>(r&gt;<span class="number">191</span>&amp;&amp;r&lt;<span class="number">224</span>)&#123;c2=e.charCodeAt(n+<span class="number">1</span>);t+=<span class="built_in">String</span>.fromCharCode((r&amp;<span class="number">31</span>)&lt;&lt;<span class="number">6</span>|c2&amp;<span class="number">63</span>);n+=<span class="number">2</span>&#125;<span class="keyword">else</span>&#123;c2=e.charCodeAt(n+<span class="number">1</span>);c3=e.charCodeAt(n+<span class="number">2</span>);t+=<span class="built_in">String</span>.fromCharCode((r&amp;<span class="number">15</span>)&lt;&lt;<span class="number">12</span>|(c2&amp;<span class="number">63</span>)&lt;&lt;<span class="number">6</span>|c3&amp;<span class="number">63</span>);n+=<span class="number">3</span>&#125;&#125;<span class="keyword">return</span> t&#125;&#125;</span></span><br><span class="line"><span class="javascript">		 </span></span><br><span class="line"><span class="javascript">		<span class="comment">// 定义字符串</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> string = <span class="string">&#x27;i am bobo!&#x27;</span>;</span></span><br><span class="line"><span class="javascript">		 </span></span><br><span class="line"><span class="javascript">		<span class="comment">// 加密</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> encodedString = Base64.encode(string);</span></span><br><span class="line"><span class="javascript">		alert(encodedString); </span></span><br><span class="line"><span class="javascript">		 </span></span><br><span class="line"><span class="javascript">		<span class="comment">// 解密</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> decodedString = Base64.decode(encodedString);</span></span><br><span class="line"><span class="javascript">		alert(decodedString); </span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="拓展：https加密">拓展：https加密</h3>
<ul>
<li>
<p>https 是基于 http 和 SSL/TLS 实现的一个协议，可以保证在网络上传输的数据都是加密的，从而保证数据安全</p>
</li>
<li>
<p>http 协议是不安全的</p>
<ul>
<li>
<p>在 http是诞生之前，所有网站都使用 http 协议，而 http 协议在数据传输过程中都是明文，所以可能存在数据泄露和篡改</p>
<p><img src="https://s2.loli.net/2022/05/08/vMQTWDi8OjEduNf.png" alt="数据传输"></p>
</li>
</ul>
</li>
<li>
<p>使用对称秘钥进行数据加密</p>
<ul>
<li>为了防止数据泄露和篡改，对数据进行加密，生成一个对称密码，将对称秘钥分别交给浏览器和服务器端，他们之间传输的数据都适用对称秘钥进行加密和解密</li>
</ul>
</li>
<li>
<p>请求和响应流程如下：</p>
<ul>
<li>客户端使用对称秘钥对请求进行加密，并发送给服务端。</li>
<li>服务端接收到密文之后，使用对称秘钥对密文进行解密，然后处理请求。 最后再使用对称秘钥把要返回的内容再次加密，返回给客户端。</li>
<li>客户端接收到密文之后，使用对称秘钥进行解密，并获取最终的响应内容。</li>
</ul>
</li>
<li>
<p>如此一来，数据传输都是密文，解决了明文传输数据的问题。但是，这么干有bug。</p>
<ul>
<li>浏览器如何获取对称秘钥？</li>
<li>每个客户端的对称秘钥相同，浏览器能拿到对称秘钥，那么黑客也可以拿到，所以，数据加密也就没有意义了。</li>
</ul>
</li>
<li>
<p>动态对称秘钥和非对称秘钥</p>
<ul>
<li>为了解决对称秘钥动态性以及让客户端和服务端安全的获取对称秘钥，可以引入非对称秘钥机制。</li>
<li>如此一来，解决了动态对称秘钥和数据加密的问题，因为每个用户的对称秘钥都是随机生成且传输的过程中都使用公钥加密（公钥加密的数据只有私钥能解密），所有黑客无法截获对称秘钥。而数据传输是通过对称秘钥加密过的，所以黑客即使能获取数据也无法去解密看到真实的内容。 看似无懈可击，但是，这么干还是又bug。</li>
<li>如果黑客在 【步骤2】劫持，黑客把自己的公钥返回给客客户端，那么客户端会使用黑客的公钥来加密对称秘钥，黑客在【步骤6】截获请求，使用自己的私钥获取对称秘钥，后面过程全都会完蛋…</li>
</ul>
</li>
<li>
<p>CA证书的应用</p>
<ul>
<li>使用 ca 证书可以解决黑客劫持的问题</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/05/08/frciSpLaeyhM6FE.png" alt=""></p>
<ul>
<li>如此一来，就解决了黑客劫持的问题，因为即使黑客劫持后的给浏览器即使返回了证书也无法通过校验，同时浏览器也会提示错误信息。</li>
<li>以上就是 https 的实现原理，https 可以保证数据安全，但由过程需要反复加密解密所有访问速度会有所下降（鱼和熊掌不能兼得）。</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(2)--微信公众号平台</title>
    <url>/posts/8c2409e0/</url>
    <content><![CDATA[<h2 id="微信公众号平台-js-算法逆向">微信公众号平台 js 算法逆向</h2>
<h3 id="准备">准备</h3>
<ul>
<li>js 调试工具
<ul>
<li><a href="https://jsfiddle.net">https://jsfiddle.net</a></li>
<li>将获取密码的函数命名<code>getPwd</code></li>
</ul>
</li>
<li>PyExecJs
<ul>
<li>实现使用 Python 执行 js 代码</li>
<li>环境的安装：
<ul>
<li>node.js 开发环境</li>
<li><code>pip install PyExecJs</code></li>
</ul>
</li>
</ul>
</li>
<li>js 算法改写初探
<ul>
<li>根据抓包工具可以看出密码密文为 32 位，加密算法为 md5</li>
<li>打断点进行代码调试</li>
<li>代码调试时如果发现缺失部分变量，一般定义其为空字典</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="代码实现">代码实现</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = (<span class="number">65535</span> &amp; e) + (<span class="number">65535</span> &amp; t);</span><br><span class="line">  <span class="keyword">return</span> (e &gt;&gt; <span class="number">16</span>) + (t &gt;&gt; <span class="number">16</span>) + (n &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">16</span> | <span class="number">65535</span> &amp; n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">e, t, n, o, r, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p((t = p(p(t, e), p(o, i))) &lt;&lt; r | t &gt;&gt;&gt; <span class="number">32</span> - r, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">e, t, n, o, r, i, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a(t &amp; n | ~t &amp; o, e, t, r, i, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">e, t, n, o, r, i, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a(t &amp; o | n &amp; ~o, e, t, r, i, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">e, t, n, o, r, i, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a(t ^ n ^ o, e, t, r, i, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">e, t, n, o, r, i, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a(n ^ (t | ~o), e, t, r, i, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  e[t &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; t % <span class="number">32</span>,</span><br><span class="line">    e[<span class="number">14</span> + (t + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = t;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> n, o, r, d, i = <span class="number">1732584193</span>, s = -<span class="number">271733879</span>, a = -<span class="number">1732584194</span>, c = <span class="number">271733878</span>, u = <span class="number">0</span>; u &lt; e.length; u += <span class="number">16</span>)</span><br><span class="line">    i = l(n = i, o = s, r = a, d = c, e[u], <span class="number">7</span>, -<span class="number">680876936</span>),</span><br><span class="line">    c = l(c, i, s, a, e[u + <span class="number">1</span>], <span class="number">12</span>, -<span class="number">389564586</span>),</span><br><span class="line">    a = l(a, c, i, s, e[u + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>),</span><br><span class="line">    s = l(s, a, c, i, e[u + <span class="number">3</span>], <span class="number">22</span>, -<span class="number">1044525330</span>),</span><br><span class="line">    i = l(i, s, a, c, e[u + <span class="number">4</span>], <span class="number">7</span>, -<span class="number">176418897</span>),</span><br><span class="line">    c = l(c, i, s, a, e[u + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>),</span><br><span class="line">    a = l(a, c, i, s, e[u + <span class="number">6</span>], <span class="number">17</span>, -<span class="number">1473231341</span>),</span><br><span class="line">    s = l(s, a, c, i, e[u + <span class="number">7</span>], <span class="number">22</span>, -<span class="number">45705983</span>),</span><br><span class="line">    i = l(i, s, a, c, e[u + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>),</span><br><span class="line">    c = l(c, i, s, a, e[u + <span class="number">9</span>], <span class="number">12</span>, -<span class="number">1958414417</span>),</span><br><span class="line">    a = l(a, c, i, s, e[u + <span class="number">10</span>], <span class="number">17</span>, -<span class="number">42063</span>),</span><br><span class="line">    s = l(s, a, c, i, e[u + <span class="number">11</span>], <span class="number">22</span>, -<span class="number">1990404162</span>),</span><br><span class="line">    i = l(i, s, a, c, e[u + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>),</span><br><span class="line">    c = l(c, i, s, a, e[u + <span class="number">13</span>], <span class="number">12</span>, -<span class="number">40341101</span>),</span><br><span class="line">    a = l(a, c, i, s, e[u + <span class="number">14</span>], <span class="number">17</span>, -<span class="number">1502002290</span>),</span><br><span class="line">    i = m(i, s = l(s, a, c, i, e[u + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>), a, c, e[u + <span class="number">1</span>], <span class="number">5</span>, -<span class="number">165796510</span>),</span><br><span class="line">    c = m(c, i, s, a, e[u + <span class="number">6</span>], <span class="number">9</span>, -<span class="number">1069501632</span>),</span><br><span class="line">    a = m(a, c, i, s, e[u + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>),</span><br><span class="line">    s = m(s, a, c, i, e[u], <span class="number">20</span>, -<span class="number">373897302</span>),</span><br><span class="line">    i = m(i, s, a, c, e[u + <span class="number">5</span>], <span class="number">5</span>, -<span class="number">701558691</span>),</span><br><span class="line">    c = m(c, i, s, a, e[u + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>),</span><br><span class="line">    a = m(a, c, i, s, e[u + <span class="number">15</span>], <span class="number">14</span>, -<span class="number">660478335</span>),</span><br><span class="line">    s = m(s, a, c, i, e[u + <span class="number">4</span>], <span class="number">20</span>, -<span class="number">405537848</span>),</span><br><span class="line">    i = m(i, s, a, c, e[u + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>),</span><br><span class="line">    c = m(c, i, s, a, e[u + <span class="number">14</span>], <span class="number">9</span>, -<span class="number">1019803690</span>),</span><br><span class="line">    a = m(a, c, i, s, e[u + <span class="number">3</span>], <span class="number">14</span>, -<span class="number">187363961</span>),</span><br><span class="line">    s = m(s, a, c, i, e[u + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>),</span><br><span class="line">    i = m(i, s, a, c, e[u + <span class="number">13</span>], <span class="number">5</span>, -<span class="number">1444681467</span>),</span><br><span class="line">    c = m(c, i, s, a, e[u + <span class="number">2</span>], <span class="number">9</span>, -<span class="number">51403784</span>),</span><br><span class="line">    a = m(a, c, i, s, e[u + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>),</span><br><span class="line">    i = f(i, s = m(s, a, c, i, e[u + <span class="number">12</span>], <span class="number">20</span>, -<span class="number">1926607734</span>), a, c, e[u + <span class="number">5</span>], <span class="number">4</span>, -<span class="number">378558</span>),</span><br><span class="line">    c = f(c, i, s, a, e[u + <span class="number">8</span>], <span class="number">11</span>, -<span class="number">2022574463</span>),</span><br><span class="line">    a = f(a, c, i, s, e[u + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>),</span><br><span class="line">    s = f(s, a, c, i, e[u + <span class="number">14</span>], <span class="number">23</span>, -<span class="number">35309556</span>),</span><br><span class="line">    i = f(i, s, a, c, e[u + <span class="number">1</span>], <span class="number">4</span>, -<span class="number">1530992060</span>),</span><br><span class="line">    c = f(c, i, s, a, e[u + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>),</span><br><span class="line">    a = f(a, c, i, s, e[u + <span class="number">7</span>], <span class="number">16</span>, -<span class="number">155497632</span>),</span><br><span class="line">    s = f(s, a, c, i, e[u + <span class="number">10</span>], <span class="number">23</span>, -<span class="number">1094730640</span>),</span><br><span class="line">    i = f(i, s, a, c, e[u + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>),</span><br><span class="line">    c = f(c, i, s, a, e[u], <span class="number">11</span>, -<span class="number">358537222</span>),</span><br><span class="line">    a = f(a, c, i, s, e[u + <span class="number">3</span>], <span class="number">16</span>, -<span class="number">722521979</span>),</span><br><span class="line">    s = f(s, a, c, i, e[u + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>),</span><br><span class="line">    i = f(i, s, a, c, e[u + <span class="number">9</span>], <span class="number">4</span>, -<span class="number">640364487</span>),</span><br><span class="line">    c = f(c, i, s, a, e[u + <span class="number">12</span>], <span class="number">11</span>, -<span class="number">421815835</span>),</span><br><span class="line">    a = f(a, c, i, s, e[u + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>),</span><br><span class="line">    i = g(i, s = f(s, a, c, i, e[u + <span class="number">2</span>], <span class="number">23</span>, -<span class="number">995338651</span>), a, c, e[u], <span class="number">6</span>, -<span class="number">198630844</span>),</span><br><span class="line">    c = g(c, i, s, a, e[u + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>),</span><br><span class="line">    a = g(a, c, i, s, e[u + <span class="number">14</span>], <span class="number">15</span>, -<span class="number">1416354905</span>),</span><br><span class="line">    s = g(s, a, c, i, e[u + <span class="number">5</span>], <span class="number">21</span>, -<span class="number">57434055</span>),</span><br><span class="line">    i = g(i, s, a, c, e[u + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>),</span><br><span class="line">    c = g(c, i, s, a, e[u + <span class="number">3</span>], <span class="number">10</span>, -<span class="number">1894986606</span>),</span><br><span class="line">    a = g(a, c, i, s, e[u + <span class="number">10</span>], <span class="number">15</span>, -<span class="number">1051523</span>),</span><br><span class="line">    s = g(s, a, c, i, e[u + <span class="number">1</span>], <span class="number">21</span>, -<span class="number">2054922799</span>),</span><br><span class="line">    i = g(i, s, a, c, e[u + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>),</span><br><span class="line">    c = g(c, i, s, a, e[u + <span class="number">15</span>], <span class="number">10</span>, -<span class="number">30611744</span>),</span><br><span class="line">    a = g(a, c, i, s, e[u + <span class="number">6</span>], <span class="number">15</span>, -<span class="number">1560198380</span>),</span><br><span class="line">    s = g(s, a, c, i, e[u + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>),</span><br><span class="line">    i = g(i, s, a, c, e[u + <span class="number">4</span>], <span class="number">6</span>, -<span class="number">145523070</span>),</span><br><span class="line">    c = g(c, i, s, a, e[u + <span class="number">11</span>], <span class="number">10</span>, -<span class="number">1120210379</span>),</span><br><span class="line">    a = g(a, c, i, s, e[u + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>),</span><br><span class="line">    s = g(s, a, c, i, e[u + <span class="number">9</span>], <span class="number">21</span>, -<span class="number">343485551</span>),</span><br><span class="line">    i = p(i, n),</span><br><span class="line">    s = p(s, o),</span><br><span class="line">    a = p(a, r),</span><br><span class="line">    c = p(c, d);</span><br><span class="line">  <span class="keyword">return</span> [i, s, a, c]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = <span class="number">0</span>; n &lt; <span class="number">32</span> * e.length; n += <span class="number">8</span>)</span><br><span class="line">    t += <span class="built_in">String</span>.fromCharCode(e[n &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; n % <span class="number">32</span> &amp; <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t, n = [];</span><br><span class="line">  <span class="keyword">for</span> (n[(e.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">    t = <span class="number">0</span>; t &lt; n.length; t += <span class="number">1</span>)</span><br><span class="line">    n[t] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">8</span> * e.length; t += <span class="number">8</span>)</span><br><span class="line">    n[t &gt;&gt; <span class="number">5</span>] |= (<span class="number">255</span> &amp; e.charCodeAt(t / <span class="number">8</span>)) &lt;&lt; t % <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t, n = <span class="string">&quot;0123456789abcdef&quot;</span>, o = <span class="string">&quot;&quot;</span>, r = <span class="number">0</span>; r &lt; e.length; r += <span class="number">1</span>)</span><br><span class="line">    t = e.charCodeAt(r),</span><br><span class="line">    o += n.charAt(t &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + n.charAt(<span class="number">15</span> &amp; t);</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c(s(u(e = d(e)), <span class="number">8</span> * e.length))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n, e = d(e),</span><br><span class="line">    t = d(t),</span><br><span class="line">    o = u(e),</span><br><span class="line">    r = [],</span><br><span class="line">    i = [];</span><br><span class="line">  <span class="keyword">for</span> (r[<span class="number">15</span>] = i[<span class="number">15</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">    <span class="number">16</span> &lt; o.length &amp;&amp; (o = s(o, <span class="number">8</span> * e.length)),</span><br><span class="line">    n = <span class="number">0</span>; n &lt; <span class="number">16</span>; n += <span class="number">1</span>)</span><br><span class="line">    r[n] = <span class="number">909522486</span> ^ o[n],</span><br><span class="line">    i[n] = <span class="number">1549556828</span> ^ o[n];</span><br><span class="line">  <span class="keyword">return</span> e = s(r.concat(u(t)), <span class="number">512</span> + <span class="number">8</span> * t.length),</span><br><span class="line">    c(s(i.concat(e), <span class="number">640</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t ? n ? i(t, e) : o(i(t, e)) : n ? r(e) : o(r(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 实例化一个对象</span></span><br><span class="line">node = execjs.get()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. js 源文件的编译</span></span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;./逆向/wechat.js&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 执行 js 函数</span></span><br><span class="line">funcName = <span class="string">&quot;getPwd(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(3)--Steam密码加密逆向</title>
    <url>/posts/7e44d4f1/</url>
    <content><![CDATA[<h2 id="Steam登陆">Steam登陆</h2>
<h3 id="页面分析">页面分析</h3>
<ul>
<li>
<p>url：<a href="https://store.steampowered.com/login?redir=&amp;redir_ssl=1">https://store.steampowered.com/login?redir=&amp;redir_ssl=1</a></p>
</li>
<li>
<p>根据抓包工具获取的信息<code>getrsakey</code>和<code>dologin</code>两个请求包</p>
<ul>
<li><code>getrsakey</code>见名知意，加密算法为 rsa 算法</li>
<li><code>dologin</code>携带账号密码进行登陆，且存在<code>donotcache</code>和<code>rsatimestamp</code>两个未知参数</li>
<li>对于未知参数，可以选择多次抓包进行对比，看是否动态变化；或者可以先不携带进行请求，不成功再考虑位置参数的变化情况</li>
</ul>
</li>
<li>
<p>针对<code>password</code>全文搜索结果太多，可以考虑精确搜索<code>password:</code>或者<code>password :</code>或者<code>password=</code>或者<code>password =</code>，这样搜索出来的结果比较少，便于分析</p>
</li>
<li>
<p>通过搜索<code>password =</code>找到相关加密代码如下：</p>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encryptedPassword = RSA.encrypt(password, pubKey);</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<span id="more"></span>
<h3 id="js-调试">js 调试</h3>
<ul>
<li>只复制<code>pubKey</code>和<code>encryptedPassword</code>两个函数定义没有语法错误但是运行出错，因为其中涉及到的<code>RSA</code>的相关方法没有定义；</li>
<li>找到<code>RSA.getPublicKey</code>和<code>RSA.encrypt</code>相关定义，发现其都在一个<code>rsa.js</code>文件中，可见其中内容均为<code>RSA</code>的相关操作，所以全部复制；</li>
<li>然后调试<code>results</code>未定义，所以直接修改传入<code>mod</code>和<code>exp</code>的值，并返回<code>encryptedPassword</code></li>
<li>继续调试报错缺少<code>BigInteger</code>的定义，所以搜索函数定义，复制过来，依然报错<code>this</code>，所以将<code>BigInteger</code>函数定义所在的 js 文件直接全部复制过来</li>
<li>继续调试报错<code>navigator</code>未定义，因为其为 js 的内置对象，当遇到内置对象未定义的时候，直接将其定义为<code>this</code></li>
<li>然后将最后自定义的<code>getPwd</code>中设置动态的<code>mod</code>和<code>exp</code>，将其设置为传入参数即可。</li>
</ul>
<p>最终调试代码如下：</p>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">navigator = <span class="built_in">this</span>;</span><br><span class="line"><span class="comment">// Copyright (c) 2005  Tom Wu</span></span><br><span class="line"><span class="comment">// All Rights Reserved.</span></span><br><span class="line"><span class="comment">// See &quot;LICENSE&quot; for details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2003-2005  Tom Wu</span></span><br><span class="line"><span class="comment"> * All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining</span></span><br><span class="line"><span class="comment"> * a copy of this software and associated documentation files (the</span></span><br><span class="line"><span class="comment"> * &quot;Software&quot;), to deal in the Software without restriction, including</span></span><br><span class="line"><span class="comment"> * without limitation the rights to use, copy, modify, merge, publish,</span></span><br><span class="line"><span class="comment"> * distribute, sublicense, and/or sell copies of the Software, and to</span></span><br><span class="line"><span class="comment"> * permit persons to whom the Software is furnished to do so, subject to</span></span><br><span class="line"><span class="comment"> * the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be</span></span><br><span class="line"><span class="comment"> * included in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS-IS&quot; AND WITHOUT WARRANTY OF ANY KIND, </span></span><br><span class="line"><span class="comment"> * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY </span></span><br><span class="line"><span class="comment"> * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,</span></span><br><span class="line"><span class="comment"> * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER</span></span><br><span class="line"><span class="comment"> * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF</span></span><br><span class="line"><span class="comment"> * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT</span></span><br><span class="line"><span class="comment"> * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * In addition, the following condition applies:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * All redistributions must retain an intact copy of this copyright notice</span></span><br><span class="line"><span class="comment"> * and disclaimer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Basic JavaScript BN library - subset useful for RSA encryption.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bits per digit</span></span><br><span class="line"><span class="keyword">var</span> dbits;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript engine analysis</span></span><br><span class="line"><span class="keyword">var</span> canary = <span class="number">0xdeadbeefcafe</span>;</span><br><span class="line"><span class="keyword">var</span> j_lm = ((canary &amp; <span class="number">0xffffff</span>) == <span class="number">0xefcafe</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BigInteger</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;number&quot;</span> == <span class="keyword">typeof</span> a) <span class="built_in">this</span>.fromNumber(a, b, c);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="literal">null</span> &amp;&amp; <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> a) <span class="built_in">this</span>.fromString(a, <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">this</span>.fromString(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return new, unset BigInteger</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nbi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// am: Compute w_j += (x*this_i), propagate carries,</span></span><br><span class="line"><span class="comment">// c is initial carry, returns final carry.</span></span><br><span class="line"><span class="comment">// c &lt; 3*dvalue, x &lt; 2*dvalue, this_i &lt; dvalue</span></span><br><span class="line"><span class="comment">// We need to select the fastest one that works in this environment.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// am1: use a single mult and divide to get the high bits,</span></span><br><span class="line"><span class="comment">// max digit bits should be 26 because</span></span><br><span class="line"><span class="comment">// max internal value = 2*dvalue^2-2*dvalue (&lt; 2^53)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">am1</span>(<span class="params">i, x, w, j, c, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v = x * <span class="built_in">this</span>[i++] + w[j] + c;</span><br><span class="line">    c = <span class="built_in">Math</span>.floor(v / <span class="number">0x4000000</span>);</span><br><span class="line">    w[j++] = v &amp; <span class="number">0x3ffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// am2 avoids a big mult-and-extract completely.</span></span><br><span class="line"><span class="comment">// Max digit bits should be &lt;= 30 because we do bitwise ops</span></span><br><span class="line"><span class="comment">// on values up to 2*hdvalue^2-hdvalue-1 (&lt; 2^31)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">am2</span>(<span class="params">i, x, w, j, c, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xl = x &amp; <span class="number">0x7fff</span>,</span><br><span class="line">    xh = x &gt;&gt; <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> l = <span class="built_in">this</span>[i] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">this</span>[i++] &gt;&gt; <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">var</span> m = xh * l + h * xl;</span><br><span class="line">    l = xl * l + ((m &amp; <span class="number">0x7fff</span>) &lt;&lt; <span class="number">15</span>) + w[j] + (c &amp; <span class="number">0x3fffffff</span>);</span><br><span class="line">    c = (l &gt;&gt;&gt; <span class="number">30</span>) + (m &gt;&gt;&gt; <span class="number">15</span>) + xh * h + (c &gt;&gt;&gt; <span class="number">30</span>);</span><br><span class="line">    w[j++] = l &amp; <span class="number">0x3fffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Alternately, set max digit bits to 28 since some</span></span><br><span class="line"><span class="comment">// browsers slow down when dealing with 32-bit numbers.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">am3</span>(<span class="params">i, x, w, j, c, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xl = x &amp; <span class="number">0x3fff</span>,</span><br><span class="line">    xh = x &gt;&gt; <span class="number">14</span>;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> l = <span class="built_in">this</span>[i] &amp; <span class="number">0x3fff</span>;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">this</span>[i++] &gt;&gt; <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">var</span> m = xh * l + h * xl;</span><br><span class="line">    l = xl * l + ((m &amp; <span class="number">0x3fff</span>) &lt;&lt; <span class="number">14</span>) + w[j] + c;</span><br><span class="line">    c = (l &gt;&gt; <span class="number">28</span>) + (m &gt;&gt; <span class="number">14</span>) + xh * h;</span><br><span class="line">    w[j++] = l &amp; <span class="number">0xfffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j_lm &amp;&amp; (navigator.appName == <span class="string">&quot;Microsoft Internet Explorer&quot;</span>)) &#123;</span><br><span class="line">  BigInteger.prototype.am = am2;</span><br><span class="line">  dbits = <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j_lm &amp;&amp; (navigator.appName != <span class="string">&quot;Netscape&quot;</span>)) &#123;</span><br><span class="line">  BigInteger.prototype.am = am1;</span><br><span class="line">  dbits = <span class="number">26</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// Mozilla/Netscape seems to prefer am3</span></span><br><span class="line">  BigInteger.prototype.am = am3;</span><br><span class="line">  dbits = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger.prototype.DB = dbits;</span><br><span class="line">BigInteger.prototype.DM = ((<span class="number">1</span> &lt;&lt; dbits) - <span class="number">1</span>);</span><br><span class="line">BigInteger.prototype.DV = (<span class="number">1</span> &lt;&lt; dbits);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BI_FP = <span class="number">52</span>;</span><br><span class="line">BigInteger.prototype.FV = <span class="built_in">Math</span>.pow(<span class="number">2</span>, BI_FP);</span><br><span class="line">BigInteger.prototype.F1 = BI_FP - dbits;</span><br><span class="line">BigInteger.prototype.F2 = <span class="number">2</span> * dbits - BI_FP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Digit conversions</span></span><br><span class="line"><span class="keyword">var</span> BI_RM = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> BI_RC = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> rr, vv;</span><br><span class="line">rr = <span class="string">&quot;0&quot;</span>.charCodeAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (vv = <span class="number">0</span>; vv &lt;= <span class="number">9</span>; ++vv) BI_RC[rr++] = vv;</span><br><span class="line">rr = <span class="string">&quot;a&quot;</span>.charCodeAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (vv = <span class="number">10</span>; vv &lt; <span class="number">36</span>; ++vv) BI_RC[rr++] = vv;</span><br><span class="line">rr = <span class="string">&quot;A&quot;</span>.charCodeAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (vv = <span class="number">10</span>; vv &lt; <span class="number">36</span>; ++vv) BI_RC[rr++] = vv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int2char</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> BI_RM.charAt(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intAt</span>(<span class="params">s, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = BI_RC[s.charCodeAt(i)];</span><br><span class="line">  <span class="keyword">return</span> (c == <span class="literal">null</span>) ? -<span class="number">1</span> : c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) copy this to r</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpCopyTo</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) r[i] = <span class="built_in">this</span>[i];</span><br><span class="line">  r.t = <span class="built_in">this</span>.t;</span><br><span class="line">  r.s = <span class="built_in">this</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) set from integer value x, -DV &lt;= x &lt; DV</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpFromInt</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.t = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">this</span>.s = (x &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="built_in">this</span>[<span class="number">0</span>] = x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; -<span class="number">1</span>) <span class="built_in">this</span>[<span class="number">0</span>] = x + DV;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">this</span>.t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return bigint initialized to value</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nbv</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  r.fromInt(i);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) set from string and radix</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpFromString</span>(<span class="params">s, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> k;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">16</span>) k = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">8</span>) k = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">256</span>) k = <span class="number">8</span>; <span class="comment">// byte array</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">2</span>) k = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">32</span>) k = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">4</span>) k = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fromRadix(s, b);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.t = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.s = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> i = s.length,</span><br><span class="line">    mi = <span class="literal">false</span>,</span><br><span class="line">    sh = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = (k == <span class="number">8</span>) ? s[i] &amp; <span class="number">0xff</span> : intAt(s, i);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.charAt(i) == <span class="string">&quot;-&quot;</span>) mi = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mi = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (sh == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sh + k &gt; <span class="built_in">this</span>.DB) &#123;</span><br><span class="line">      <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= (x &amp; ((<span class="number">1</span> &lt;&lt; (<span class="built_in">this</span>.DB - sh)) - <span class="number">1</span>)) &lt;&lt; sh;</span><br><span class="line">      <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = (x &gt;&gt; (<span class="built_in">this</span>.DB - sh));</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= x &lt;&lt; sh;</span><br><span class="line">    sh += k;</span><br><span class="line">    <span class="keyword">if</span> (sh &gt;= <span class="built_in">this</span>.DB) sh -= <span class="built_in">this</span>.DB;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">8</span> &amp;&amp; (s[<span class="number">0</span>] &amp; <span class="number">0x80</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sh &gt; <span class="number">0</span>) <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= ((<span class="number">1</span> &lt;&lt; (<span class="built_in">this</span>.DB - sh)) - <span class="number">1</span>) &lt;&lt; sh;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.clamp();</span><br><span class="line">  <span class="keyword">if</span> (mi) BigInteger.ZERO.subTo(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) clamp off excess high words</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpClamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">this</span>.t &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] == c) --<span class="built_in">this</span>.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return string representation in given radix</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnToString</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.negate().toString(b);</span><br><span class="line">  <span class="keyword">var</span> k;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">16</span>) k = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">8</span>) k = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">2</span>) k = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">32</span>) k = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">4</span>) k = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">this</span>.toRadix(b);</span><br><span class="line">  <span class="keyword">var</span> km = (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>,</span><br><span class="line">    d, m = <span class="literal">false</span>,</span><br><span class="line">    r = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    i = <span class="built_in">this</span>.t;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">this</span>.DB - (i * <span class="built_in">this</span>.DB) % k;</span><br><span class="line">  <span class="keyword">if</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="built_in">this</span>.DB &amp;&amp; (d = <span class="built_in">this</span>[i] &gt;&gt; p) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      m = <span class="literal">true</span>;</span><br><span class="line">      r = int2char(d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p &lt; k) &#123;</span><br><span class="line">        d = (<span class="built_in">this</span>[i] &amp; ((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>)) &lt;&lt; (k - p);</span><br><span class="line">        d |= <span class="built_in">this</span>[--i] &gt;&gt; (p += <span class="built_in">this</span>.DB - k);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        d = (<span class="built_in">this</span>[i] &gt;&gt; (p -= k)) &amp; km;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          p += <span class="built_in">this</span>.DB;</span><br><span class="line">          --i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (d &gt; <span class="number">0</span>) m = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (m) r += int2char(d);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m ? r : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) -this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnNegate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  BigInteger.ZERO.subTo(<span class="built_in">this</span>, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) |this|</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnAbs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) ? <span class="built_in">this</span>.negate() : <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return + if this &gt; a, - if this &lt; a, 0 if equal</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnCompareTo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">this</span>.s - a.s;</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">this</span>.t;</span><br><span class="line">  r = i - a.t;</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> ((r = <span class="built_in">this</span>[i] - a[i]) != <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns bit length of the integer x</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nbits</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="number">1</span>,</span><br><span class="line">    t;</span><br><span class="line">  <span class="keyword">if</span> ((t = x &gt;&gt;&gt; <span class="number">16</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    x = t;</span><br><span class="line">    r += <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((t = x &gt;&gt; <span class="number">8</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    x = t;</span><br><span class="line">    r += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((t = x &gt;&gt; <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    x = t;</span><br><span class="line">    r += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((t = x &gt;&gt; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    x = t;</span><br><span class="line">    r += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((t = x &gt;&gt; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    x = t;</span><br><span class="line">    r += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return the number of bits in &quot;this&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnBitLength</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.t &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.DB * (<span class="built_in">this</span>.t - <span class="number">1</span>) + nbits(<span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] ^ (<span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this &lt;&lt; n*DB</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpDLShiftTo</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) r[i + n] = <span class="built_in">this</span>[i];</span><br><span class="line">  <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) r[i] = <span class="number">0</span>;</span><br><span class="line">  r.t = <span class="built_in">this</span>.t + n;</span><br><span class="line">  r.s = <span class="built_in">this</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this &gt;&gt; n*DB</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpDRShiftTo</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; <span class="built_in">this</span>.t; ++i) r[i - n] = <span class="built_in">this</span>[i];</span><br><span class="line">  r.t = <span class="built_in">Math</span>.max(<span class="built_in">this</span>.t - n, <span class="number">0</span>);</span><br><span class="line">  r.s = <span class="built_in">this</span>.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this &lt;&lt; n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpLShiftTo</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bs = n % <span class="built_in">this</span>.DB;</span><br><span class="line">  <span class="keyword">var</span> cbs = <span class="built_in">this</span>.DB - bs;</span><br><span class="line">  <span class="keyword">var</span> bm = (<span class="number">1</span> &lt;&lt; cbs) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> ds = <span class="built_in">Math</span>.floor(n / <span class="built_in">this</span>.DB),</span><br><span class="line">    c = (<span class="built_in">this</span>.s &lt;&lt; bs) &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">    i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    r[i + ds + <span class="number">1</span>] = (<span class="built_in">this</span>[i] &gt;&gt; cbs) | c;</span><br><span class="line">    c = (<span class="built_in">this</span>[i] &amp; bm) &lt;&lt; bs;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = ds - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) r[i] = <span class="number">0</span>;</span><br><span class="line">  r[ds] = c;</span><br><span class="line">  r.t = <span class="built_in">this</span>.t + ds + <span class="number">1</span>;</span><br><span class="line">  r.s = <span class="built_in">this</span>.s;</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this &gt;&gt; n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpRShiftTo</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">  r.s = <span class="built_in">this</span>.s;</span><br><span class="line">  <span class="keyword">var</span> ds = <span class="built_in">Math</span>.floor(n / <span class="built_in">this</span>.DB);</span><br><span class="line">  <span class="keyword">if</span> (ds &gt;= <span class="built_in">this</span>.t) &#123;</span><br><span class="line">    r.t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> bs = n % <span class="built_in">this</span>.DB;</span><br><span class="line">  <span class="keyword">var</span> cbs = <span class="built_in">this</span>.DB - bs;</span><br><span class="line">  <span class="keyword">var</span> bm = (<span class="number">1</span> &lt;&lt; bs) - <span class="number">1</span>;</span><br><span class="line">  r[<span class="number">0</span>] = <span class="built_in">this</span>[ds] &gt;&gt; bs;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = ds + <span class="number">1</span>; i &lt; <span class="built_in">this</span>.t; ++i) &#123;</span><br><span class="line">    r[i - ds - <span class="number">1</span>] |= (<span class="built_in">this</span>[i] &amp; bm) &lt;&lt; cbs;</span><br><span class="line">    r[i - ds] = <span class="built_in">this</span>[i] &gt;&gt; bs;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (bs &gt; <span class="number">0</span>) r[<span class="built_in">this</span>.t - ds - <span class="number">1</span>] |= (<span class="built_in">this</span>.s &amp; bm) &lt;&lt; cbs;</span><br><span class="line">  r.t = <span class="built_in">this</span>.t - ds;</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this - a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpSubTo</span>(<span class="params">a, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    c = <span class="number">0</span>,</span><br><span class="line">    m = <span class="built_in">Math</span>.min(a.t, <span class="built_in">this</span>.t);</span><br><span class="line">  <span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">    c += <span class="built_in">this</span>[i] - a[i];</span><br><span class="line">    r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">    c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">    c -= a.s;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">      c += <span class="built_in">this</span>[i];</span><br><span class="line">      r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">      c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">    &#125;</span><br><span class="line">    c += <span class="built_in">this</span>.s;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    c += <span class="built_in">this</span>.s;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.t) &#123;</span><br><span class="line">      c -= a[i];</span><br><span class="line">      r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">      c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">    &#125;</span><br><span class="line">    c -= a.s;</span><br><span class="line">  &#125;</span><br><span class="line">  r.s = (c &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &lt; -<span class="number">1</span>) r[i++] = <span class="built_in">this</span>.DV + c;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0</span>) r[i++] = c;</span><br><span class="line">  r.t = i;</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this * a, r != this,a (HAC 14.12)</span></span><br><span class="line"><span class="comment">// &quot;this&quot; should be the larger one if appropriate.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpMultiplyTo</span>(<span class="params">a, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">this</span>.abs(),</span><br><span class="line">    y = a.abs();</span><br><span class="line">  <span class="keyword">var</span> i = x.t;</span><br><span class="line">  r.t = i + y.t;</span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) r[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; y.t; ++i) r[i + x.t] = x.am(<span class="number">0</span>, y[i], r, i, <span class="number">0</span>, x.t);</span><br><span class="line">  r.s = <span class="number">0</span>;</span><br><span class="line">  r.clamp();</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s != a.s) BigInteger.ZERO.subTo(r, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this^2, r != this (HAC 14.16)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpSquareTo</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">this</span>.abs();</span><br><span class="line">  <span class="keyword">var</span> i = r.t = <span class="number">2</span> * x.t;</span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) r[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.t - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = x.am(i, x[i], r, <span class="number">2</span> * i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ((r[i + x.t] += x.am(i + <span class="number">1</span>, <span class="number">2</span> * x[i], r, <span class="number">2</span> * i + <span class="number">1</span>, c, x.t - i - <span class="number">1</span>)) &gt;= x.DV) &#123;</span><br><span class="line">      r[i + x.t] -= x.DV;</span><br><span class="line">      r[i + x.t + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r.t &gt; <span class="number">0</span>) r[r.t - <span class="number">1</span>] += x.am(i, x[i], r, <span class="number">2</span> * i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  r.s = <span class="number">0</span>;</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)</span></span><br><span class="line"><span class="comment">// r != q, this != m.  q or r may be null.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpDivRemTo</span>(<span class="params">m, q, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pm = m.abs();</span><br><span class="line">  <span class="keyword">if</span> (pm.t &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> pt = <span class="built_in">this</span>.abs();</span><br><span class="line">  <span class="keyword">if</span> (pt.t &lt; pm.t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">null</span>) q.fromInt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="built_in">this</span>.copyTo(r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r == <span class="literal">null</span>) r = nbi();</span><br><span class="line">  <span class="keyword">var</span> y = nbi(),</span><br><span class="line">    ts = <span class="built_in">this</span>.s,</span><br><span class="line">    ms = m.s;</span><br><span class="line">  <span class="keyword">var</span> nsh = <span class="built_in">this</span>.DB - nbits(pm[pm.t - <span class="number">1</span>]); <span class="comment">// normalize modulus</span></span><br><span class="line">  <span class="keyword">if</span> (nsh &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    pm.lShiftTo(nsh, y);</span><br><span class="line">    pt.lShiftTo(nsh, r);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pm.copyTo(y);</span><br><span class="line">    pt.copyTo(r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ys = y.t;</span><br><span class="line">  <span class="keyword">var</span> y0 = y[ys - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (y0 == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> yt = y0 * (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F1) + ((ys &gt; <span class="number">1</span>) ? y[ys - <span class="number">2</span>] &gt;&gt; <span class="built_in">this</span>.F2 : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> d1 = <span class="built_in">this</span>.FV / yt,</span><br><span class="line">    d2 = (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F1) / yt,</span><br><span class="line">    e = <span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F2;</span><br><span class="line">  <span class="keyword">var</span> i = r.t,</span><br><span class="line">    j = i - ys,</span><br><span class="line">    t = (q == <span class="literal">null</span>) ? nbi() : q;</span><br><span class="line">  y.dlShiftTo(j, t);</span><br><span class="line">  <span class="keyword">if</span> (r.compareTo(t) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    r[r.t++] = <span class="number">1</span>;</span><br><span class="line">    r.subTo(t, r);</span><br><span class="line">  &#125;</span><br><span class="line">  BigInteger.ONE.dlShiftTo(ys, t);</span><br><span class="line">  t.subTo(y, y); <span class="comment">// &quot;negative&quot; y so we can replace sub with am later</span></span><br><span class="line">  <span class="keyword">while</span> (y.t &lt; ys) y[y.t++] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (--j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Estimate quotient digit</span></span><br><span class="line">    <span class="keyword">var</span> qd = (r[--i] == y0) ? <span class="built_in">this</span>.DM : <span class="built_in">Math</span>.floor(r[i] * d1 + (r[i - <span class="number">1</span>] + e) * d2);</span><br><span class="line">    <span class="keyword">if</span> ((r[i] += y.am(<span class="number">0</span>, qd, r, j, <span class="number">0</span>, ys)) &lt; qd) &#123; <span class="comment">// Try it out</span></span><br><span class="line">      y.dlShiftTo(j, t);</span><br><span class="line">      r.subTo(t, r);</span><br><span class="line">      <span class="keyword">while</span> (r[i] &lt; --qd) r.subTo(t, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (q != <span class="literal">null</span>) &#123;</span><br><span class="line">    r.drShiftTo(ys, q);</span><br><span class="line">    <span class="keyword">if</span> (ts != ms) BigInteger.ZERO.subTo(q, q);</span><br><span class="line">  &#125;</span><br><span class="line">  r.t = ys;</span><br><span class="line">  r.clamp();</span><br><span class="line">  <span class="keyword">if</span> (nsh &gt; <span class="number">0</span>) r.rShiftTo(nsh, r); <span class="comment">// Denormalize remainder</span></span><br><span class="line">  <span class="keyword">if</span> (ts &lt; <span class="number">0</span>) BigInteger.ZERO.subTo(r, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this mod a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnMod</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.abs().divRemTo(a, <span class="literal">null</span>, r);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span> &amp;&amp; r.compareTo(BigInteger.ZERO) &gt; <span class="number">0</span>) a.subTo(r, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modular reduction using &quot;classic&quot; algorithm</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Classic</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cConvert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x.s &lt; <span class="number">0</span> || x.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span>) <span class="keyword">return</span> x.mod(<span class="built_in">this</span>.m);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cRevert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cReduce</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x.divRemTo(<span class="built_in">this</span>.m, <span class="literal">null</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cMulTo</span>(<span class="params">x, y, r</span>) </span>&#123;</span><br><span class="line">  x.multiplyTo(y, r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cSqrTo</span>(<span class="params">x, r</span>) </span>&#123;</span><br><span class="line">  x.squareTo(r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Classic.prototype.convert = cConvert;</span><br><span class="line">Classic.prototype.revert = cRevert;</span><br><span class="line">Classic.prototype.reduce = cReduce;</span><br><span class="line">Classic.prototype.mulTo = cMulTo;</span><br><span class="line">Classic.prototype.sqrTo = cSqrTo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) return &quot;-1/this % 2^DB&quot;; useful for Mont. reduction</span></span><br><span class="line"><span class="comment">// justification:</span></span><br><span class="line"><span class="comment">//         xy == 1 (mod m)</span></span><br><span class="line"><span class="comment">//         xy =  1+km</span></span><br><span class="line"><span class="comment">//   xy(2-xy) = (1+km)(1-km)</span></span><br><span class="line"><span class="comment">// x[y(2-xy)] = 1-k^2m^2</span></span><br><span class="line"><span class="comment">// x[y(2-xy)] == 1 (mod m^2)</span></span><br><span class="line"><span class="comment">// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2</span></span><br><span class="line"><span class="comment">// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.</span></span><br><span class="line"><span class="comment">// JS multiply &quot;overflows&quot; differently from C/C++, so care is needed here.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpInvDigit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y = x &amp; <span class="number">3</span>; <span class="comment">// y == 1/x mod 2^2</span></span><br><span class="line">  y = (y * (<span class="number">2</span> - (x &amp; <span class="number">0xf</span>) * y)) &amp; <span class="number">0xf</span>; <span class="comment">// y == 1/x mod 2^4</span></span><br><span class="line">  y = (y * (<span class="number">2</span> - (x &amp; <span class="number">0xff</span>) * y)) &amp; <span class="number">0xff</span>; <span class="comment">// y == 1/x mod 2^8</span></span><br><span class="line">  y = (y * (<span class="number">2</span> - (((x &amp; <span class="number">0xffff</span>) * y) &amp; <span class="number">0xffff</span>))) &amp; <span class="number">0xffff</span>; <span class="comment">// y == 1/x mod 2^16</span></span><br><span class="line">  <span class="comment">// last step - calculate inverse mod DV directly;</span></span><br><span class="line">  <span class="comment">// assumes 16 &lt; DB &lt;= 32 and assumes ability to handle 48-bit ints</span></span><br><span class="line">  y = (y * (<span class="number">2</span> - x * y % <span class="built_in">this</span>.DV)) % <span class="built_in">this</span>.DV; <span class="comment">// y == 1/x mod 2^dbits</span></span><br><span class="line">  <span class="comment">// we really want the negative inverse, and -DV &lt; y &lt; DV</span></span><br><span class="line">  <span class="keyword">return</span> (y &gt; <span class="number">0</span>) ? <span class="built_in">this</span>.DV - y : -y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Montgomery reduction</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Montgomery</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.m = m;</span><br><span class="line">  <span class="built_in">this</span>.mp = m.invDigit();</span><br><span class="line">  <span class="built_in">this</span>.mpl = <span class="built_in">this</span>.mp &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  <span class="built_in">this</span>.mph = <span class="built_in">this</span>.mp &gt;&gt; <span class="number">15</span>;</span><br><span class="line">  <span class="built_in">this</span>.um = (<span class="number">1</span> &lt;&lt; (m.DB - <span class="number">15</span>)) - <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">this</span>.mt2 = <span class="number">2</span> * m.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xR mod m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">montConvert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  x.abs().dlShiftTo(<span class="built_in">this</span>.m.t, r);</span><br><span class="line">  r.divRemTo(<span class="built_in">this</span>.m, <span class="literal">null</span>, r);</span><br><span class="line">  <span class="keyword">if</span> (x.s &lt; <span class="number">0</span> &amp;&amp; r.compareTo(BigInteger.ZERO) &gt; <span class="number">0</span>) <span class="built_in">this</span>.m.subTo(r, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x/R mod m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">montRevert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  x.copyTo(r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x = x/R mod m (HAC 14.32)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">montReduce</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (x.t &lt;= <span class="built_in">this</span>.mt2) <span class="comment">// pad x so am has enough room later</span></span><br><span class="line">    x[x.t++] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.m.t; ++i) &#123;</span><br><span class="line">    <span class="comment">// faster way of calculating u0 = x[i]*mp mod DV</span></span><br><span class="line">    <span class="keyword">var</span> j = x[i] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">    <span class="keyword">var</span> u0 = (j * <span class="built_in">this</span>.mpl + (((j * <span class="built_in">this</span>.mph + (x[i] &gt;&gt; <span class="number">15</span>) * <span class="built_in">this</span>.mpl) &amp; <span class="built_in">this</span>.um) &lt;&lt; <span class="number">15</span>)) &amp; x.DM;</span><br><span class="line">    <span class="comment">// use am to combine the multiply-shift-add into one call</span></span><br><span class="line">    j = i + <span class="built_in">this</span>.m.t;</span><br><span class="line">    x[j] += <span class="built_in">this</span>.m.am(<span class="number">0</span>, u0, x, i, <span class="number">0</span>, <span class="built_in">this</span>.m.t);</span><br><span class="line">    <span class="comment">// propagate carry</span></span><br><span class="line">    <span class="keyword">while</span> (x[j] &gt;= x.DV) &#123;</span><br><span class="line">      x[j] -= x.DV;</span><br><span class="line">      x[++j]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  x.clamp();</span><br><span class="line">  x.drShiftTo(<span class="built_in">this</span>.m.t, x);</span><br><span class="line">  <span class="keyword">if</span> (x.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span>) x.subTo(<span class="built_in">this</span>.m, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r = &quot;x^2/R mod m&quot;; x != r</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">montSqrTo</span>(<span class="params">x, r</span>) </span>&#123;</span><br><span class="line">  x.squareTo(r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r = &quot;xy/R mod m&quot;; x,y != r</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">montMulTo</span>(<span class="params">x, y, r</span>) </span>&#123;</span><br><span class="line">  x.multiplyTo(y, r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Montgomery.prototype.convert = montConvert;</span><br><span class="line">Montgomery.prototype.revert = montRevert;</span><br><span class="line">Montgomery.prototype.reduce = montReduce;</span><br><span class="line">Montgomery.prototype.mulTo = montMulTo;</span><br><span class="line">Montgomery.prototype.sqrTo = montSqrTo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) true iff this is even</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpIsEven</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="built_in">this</span>.t &gt; <span class="number">0</span>) ? (<span class="built_in">this</span>[<span class="number">0</span>] &amp; <span class="number">1</span>) : <span class="built_in">this</span>.s) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) this^e, e &lt; 2^32, doing sqr and mul with &quot;r&quot; (HAC 14.79)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpExp</span>(<span class="params">e, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e &gt; <span class="number">0xffffffff</span> || e &lt; <span class="number">1</span>) <span class="keyword">return</span> BigInteger.ONE;</span><br><span class="line">  <span class="keyword">var</span> r = nbi(),</span><br><span class="line">    r2 = nbi(),</span><br><span class="line">    g = z.convert(<span class="built_in">this</span>),</span><br><span class="line">    i = nbits(e) - <span class="number">1</span>;</span><br><span class="line">  g.copyTo(r);</span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    z.sqrTo(r, r2);</span><br><span class="line">    <span class="keyword">if</span> ((e &amp; (<span class="number">1</span> &lt;&lt; i)) &gt; <span class="number">0</span>) z.mulTo(r2, g, r);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> t = r;</span><br><span class="line">      r = r2;</span><br><span class="line">      r2 = t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> z.revert(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this^e % m, 0 &lt;= e &lt; 2^32</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnModPowInt</span>(<span class="params">e, m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> z;</span><br><span class="line">  <span class="keyword">if</span> (e &lt; <span class="number">256</span> || m.isEven()) z = <span class="keyword">new</span> Classic(m);</span><br><span class="line">  <span class="keyword">else</span> z = <span class="keyword">new</span> Montgomery(m);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.exp(e, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protected</span></span><br><span class="line">BigInteger.prototype.copyTo = bnpCopyTo;</span><br><span class="line">BigInteger.prototype.fromInt = bnpFromInt;</span><br><span class="line">BigInteger.prototype.fromString = bnpFromString;</span><br><span class="line">BigInteger.prototype.clamp = bnpClamp;</span><br><span class="line">BigInteger.prototype.dlShiftTo = bnpDLShiftTo;</span><br><span class="line">BigInteger.prototype.drShiftTo = bnpDRShiftTo;</span><br><span class="line">BigInteger.prototype.lShiftTo = bnpLShiftTo;</span><br><span class="line">BigInteger.prototype.rShiftTo = bnpRShiftTo;</span><br><span class="line">BigInteger.prototype.subTo = bnpSubTo;</span><br><span class="line">BigInteger.prototype.multiplyTo = bnpMultiplyTo;</span><br><span class="line">BigInteger.prototype.squareTo = bnpSquareTo;</span><br><span class="line">BigInteger.prototype.divRemTo = bnpDivRemTo;</span><br><span class="line">BigInteger.prototype.invDigit = bnpInvDigit;</span><br><span class="line">BigInteger.prototype.isEven = bnpIsEven;</span><br><span class="line">BigInteger.prototype.exp = bnpExp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public</span></span><br><span class="line">BigInteger.prototype.toString = bnToString;</span><br><span class="line">BigInteger.prototype.negate = bnNegate;</span><br><span class="line">BigInteger.prototype.abs = bnAbs;</span><br><span class="line">BigInteger.prototype.compareTo = bnCompareTo;</span><br><span class="line">BigInteger.prototype.bitLength = bnBitLength;</span><br><span class="line">BigInteger.prototype.mod = bnMod;</span><br><span class="line">BigInteger.prototype.modPowInt = bnModPowInt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;constants&quot;</span></span><br><span class="line">BigInteger.ZERO = nbv(<span class="number">0</span>);</span><br><span class="line">BigInteger.ONE = nbv(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Copyright (c) 2005  Tom Wu</span></span><br><span class="line"><span class="comment">// All Rights Reserved.</span></span><br><span class="line"><span class="comment">// See &quot;LICENSE&quot; for details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extended JavaScript BN functions, required for RSA private ops.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (public)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnClone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.copyTo(r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return value as integer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnIntValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.t == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>] - <span class="built_in">this</span>.DV;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.t == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.t == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.t == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// assumes 16 &lt; DB &lt; 32</span></span><br><span class="line">  <span class="keyword">return</span> ((<span class="built_in">this</span>[<span class="number">1</span>] &amp; ((<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - <span class="built_in">this</span>.DB)) - <span class="number">1</span>)) &lt;&lt; <span class="built_in">this</span>.DB) | <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return value as byte</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnByteValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.t == <span class="number">0</span>) ? <span class="built_in">this</span>.s : (<span class="built_in">this</span>[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return value as short (assumes DB&gt;=16)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnShortValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.t == <span class="number">0</span>) ? <span class="built_in">this</span>.s : (<span class="built_in">this</span>[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) return x s.t. r^x &lt; DV</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpChunkSize</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.LN2 * <span class="built_in">this</span>.DB / <span class="built_in">Math</span>.log(r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) 0 if this == 0, 1 if this &gt; 0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnSigNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.t &lt;= <span class="number">0</span> || (<span class="built_in">this</span>.t == <span class="number">1</span> &amp;&amp; <span class="built_in">this</span>[<span class="number">0</span>] &lt;= <span class="number">0</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) convert to radix string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpToRadix</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="literal">null</span>) b = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.signum() == <span class="number">0</span> || b &lt; <span class="number">2</span> || b &gt; <span class="number">36</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> cs = <span class="built_in">this</span>.chunkSize(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Math</span>.pow(b, cs);</span><br><span class="line">  <span class="keyword">var</span> d = nbv(a),</span><br><span class="line">    y = nbi(),</span><br><span class="line">    z = nbi(),</span><br><span class="line">    r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.divRemTo(d, y, z);</span><br><span class="line">  <span class="keyword">while</span> (y.signum() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    r = (a + z.intValue()).toString(b).substr(<span class="number">1</span>) + r;</span><br><span class="line">    y.divRemTo(d, y, z);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> z.intValue().toString(b) + r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) convert from radix string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpFromRadix</span>(<span class="params">s, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.fromInt(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="literal">null</span>) b = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> cs = <span class="built_in">this</span>.chunkSize(b);</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">Math</span>.pow(b, cs),</span><br><span class="line">    mi = <span class="literal">false</span>,</span><br><span class="line">    j = <span class="number">0</span>,</span><br><span class="line">    w = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = intAt(s, i);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.charAt(i) == <span class="string">&quot;-&quot;</span> &amp;&amp; <span class="built_in">this</span>.signum() == <span class="number">0</span>) mi = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    w = b * w + x;</span><br><span class="line">    <span class="keyword">if</span> (++j &gt;= cs) &#123;</span><br><span class="line">      <span class="built_in">this</span>.dMultiply(d);</span><br><span class="line">      <span class="built_in">this</span>.dAddOffset(w, <span class="number">0</span>);</span><br><span class="line">      j = <span class="number">0</span>;</span><br><span class="line">      w = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.dMultiply(<span class="built_in">Math</span>.pow(b, j));</span><br><span class="line">    <span class="built_in">this</span>.dAddOffset(w, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mi) BigInteger.ZERO.subTo(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) alternate constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpFromNumber</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;number&quot;</span> == <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">    <span class="comment">// new BigInteger(int,int,RNG)</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">2</span>) <span class="built_in">this</span>.fromInt(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fromNumber(a, c);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.testBit(a - <span class="number">1</span>)) <span class="comment">// force MSB set</span></span><br><span class="line">        <span class="built_in">this</span>.bitwiseTo(BigInteger.ONE.shiftLeft(a - <span class="number">1</span>), op_or, <span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isEven()) <span class="built_in">this</span>.dAddOffset(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// force odd</span></span><br><span class="line">      <span class="keyword">while</span> (!<span class="built_in">this</span>.isProbablePrime(b)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.dAddOffset(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.bitLength() &gt; a) <span class="built_in">this</span>.subTo(BigInteger.ONE.shiftLeft(a - <span class="number">1</span>), <span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// new BigInteger(int,RNG)</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">      t = a &amp; <span class="number">7</span>;</span><br><span class="line">    x.length = (a &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    b.nextBytes(x);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">0</span>) x[<span class="number">0</span>] &amp;= ((<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.fromString(x, <span class="number">256</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) convert to bigendian byte array</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnToByteArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">this</span>.t,</span><br><span class="line">    r = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  r[<span class="number">0</span>] = <span class="built_in">this</span>.s;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">this</span>.DB - (i * <span class="built_in">this</span>.DB) % <span class="number">8</span>,</span><br><span class="line">    d, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="built_in">this</span>.DB &amp;&amp; (d = <span class="built_in">this</span>[i] &gt;&gt; p) != (<span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM) &gt;&gt; p)</span><br><span class="line">      r[k++] = d | (<span class="built_in">this</span>.s &lt;&lt; (<span class="built_in">this</span>.DB - p));</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        d = (<span class="built_in">this</span>[i] &amp; ((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>)) &lt;&lt; (<span class="number">8</span> - p);</span><br><span class="line">        d |= <span class="built_in">this</span>[--i] &gt;&gt; (p += <span class="built_in">this</span>.DB - <span class="number">8</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        d = (<span class="built_in">this</span>[i] &gt;&gt; (p -= <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          p += <span class="built_in">this</span>.DB;</span><br><span class="line">          --i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((d &amp; <span class="number">0x80</span>) != <span class="number">0</span>) d |= -<span class="number">256</span>;</span><br><span class="line">      <span class="keyword">if</span> (k == <span class="number">0</span> &amp;&amp; (<span class="built_in">this</span>.s &amp; <span class="number">0x80</span>) != (d &amp; <span class="number">0x80</span>)) ++k;</span><br><span class="line">      <span class="keyword">if</span> (k &gt; <span class="number">0</span> || d != <span class="built_in">this</span>.s) r[k++] = d;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnEquals</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.compareTo(a) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnMin</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.compareTo(a) &lt; <span class="number">0</span>) ? <span class="built_in">this</span> : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnMax</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.compareTo(a) &gt; <span class="number">0</span>) ? <span class="built_in">this</span> : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this op a (bitwise)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpBitwiseTo</span>(<span class="params">a, op, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, f, m = <span class="built_in">Math</span>.min(a.t, <span class="built_in">this</span>.t);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) r[i] = op(<span class="built_in">this</span>[i], a[i]);</span><br><span class="line">  <span class="keyword">if</span> (a.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">    f = a.s &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">    <span class="keyword">for</span> (i = m; i &lt; <span class="built_in">this</span>.t; ++i) r[i] = op(<span class="built_in">this</span>[i], f);</span><br><span class="line">    r.t = <span class="built_in">this</span>.t;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    f = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">    <span class="keyword">for</span> (i = m; i &lt; a.t; ++i) r[i] = op(f, a[i]);</span><br><span class="line">    r.t = a.t;</span><br><span class="line">  &#125;</span><br><span class="line">  r.s = op(<span class="built_in">this</span>.s, a.s);</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this &amp; a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">op_and</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnAnd</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.bitwiseTo(a, op_and, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this | a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">op_or</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x | y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnOr</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.bitwiseTo(a, op_or, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this ^ a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">op_xor</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x ^ y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnXor</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.bitwiseTo(a, op_xor, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this &amp; ~a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">op_andnot</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; ~y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnAndNot</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.bitwiseTo(a, op_andnot, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) ~this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnNot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.t; ++i) r[i] = <span class="built_in">this</span>.DM &amp; ~<span class="built_in">this</span>[i];</span><br><span class="line">  r.t = <span class="built_in">this</span>.t;</span><br><span class="line">  r.s = ~<span class="built_in">this</span>.s;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this &lt;&lt; n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnShiftLeft</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="built_in">this</span>.rShiftTo(-n, r);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">this</span>.lShiftTo(n, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this &gt;&gt; n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnShiftRight</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="built_in">this</span>.lShiftTo(-n, r);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">this</span>.rShiftTo(n, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return index of lowest 1-bit in x, x &lt; 2^31</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lbit</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">0xffff</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    x &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">    r += <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">0xff</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    r += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">0xf</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    x &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    r += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">3</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    x &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">    r += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((x &amp; <span class="number">1</span>) == <span class="number">0</span>) ++r;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) returns index of lowest 1-bit (or -1 if none)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnGetLowestSetBit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.t; ++i)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>[i] != <span class="number">0</span>) <span class="keyword">return</span> i * <span class="built_in">this</span>.DB + lbit(<span class="built_in">this</span>[i]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">this</span>.t * <span class="built_in">this</span>.DB;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return number of 1 bits in x</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cbit</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    x &amp;= x - <span class="number">1</span>;</span><br><span class="line">    ++r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) return number of set bits</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnBitCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="number">0</span>,</span><br><span class="line">    x = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.t; ++i) r += cbit(<span class="built_in">this</span>[i] ^ x);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) true iff nth bit is set</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnTestBit</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(n / <span class="built_in">this</span>.DB);</span><br><span class="line">  <span class="keyword">if</span> (j &gt;= <span class="built_in">this</span>.t) <span class="keyword">return</span> (<span class="built_in">this</span>.s != <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ((<span class="built_in">this</span>[j] &amp; (<span class="number">1</span> &lt;&lt; (n % <span class="built_in">this</span>.DB))) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) this op (1&lt;&lt;n)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpChangeBit</span>(<span class="params">n, op</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = BigInteger.ONE.shiftLeft(n);</span><br><span class="line">  <span class="built_in">this</span>.bitwiseTo(r, op, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this | (1&lt;&lt;n)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnSetBit</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(n, op_or);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this &amp; ~(1&lt;&lt;n)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnClearBit</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(n, op_andnot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this ^ (1&lt;&lt;n)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnFlipBit</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(n, op_xor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = this + a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpAddTo</span>(<span class="params">a, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    c = <span class="number">0</span>,</span><br><span class="line">    m = <span class="built_in">Math</span>.min(a.t, <span class="built_in">this</span>.t);</span><br><span class="line">  <span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">    c += <span class="built_in">this</span>[i] + a[i];</span><br><span class="line">    r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">    c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">    c += a.s;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">      c += <span class="built_in">this</span>[i];</span><br><span class="line">      r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">      c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">    &#125;</span><br><span class="line">    c += <span class="built_in">this</span>.s;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    c += <span class="built_in">this</span>.s;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.t) &#123;</span><br><span class="line">      c += a[i];</span><br><span class="line">      r[i++] = c &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">      c &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">    &#125;</span><br><span class="line">    c += a.s;</span><br><span class="line">  &#125;</span><br><span class="line">  r.s = (c &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) r[i++] = c;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; -<span class="number">1</span>) r[i++] = <span class="built_in">this</span>.DV + c;</span><br><span class="line">  r.t = i;</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this + a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnAdd</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.addTo(a, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this - a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnSubtract</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.subTo(a, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this * a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnMultiply</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.multiplyTo(a, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this / a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnDivide</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.divRemTo(a, r, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this % a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnRemainder</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.divRemTo(a, <span class="literal">null</span>, r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) [this/a,this%a]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnDivideAndRemainder</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> q = nbi(),</span><br><span class="line">    r = nbi();</span><br><span class="line">  <span class="built_in">this</span>.divRemTo(a, q, r);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(q, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) this *= n, this &gt;= 0, 1 &lt; n &lt; DV</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpDMultiply</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>[<span class="built_in">this</span>.t] = <span class="built_in">this</span>.am(<span class="number">0</span>, n - <span class="number">1</span>, <span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.t);</span><br><span class="line">  ++<span class="built_in">this</span>.t;</span><br><span class="line">  <span class="built_in">this</span>.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) this += n &lt;&lt; w words, this &gt;= 0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpDAddOffset</span>(<span class="params">n, w</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">this</span>.t &lt;= w) <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>[w] += n;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">this</span>[w] &gt;= <span class="built_in">this</span>.DV) &#123;</span><br><span class="line">    <span class="built_in">this</span>[w] -= <span class="built_in">this</span>.DV;</span><br><span class="line">    <span class="keyword">if</span> (++w &gt;= <span class="built_in">this</span>.t) <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = <span class="number">0</span>;</span><br><span class="line">    ++<span class="built_in">this</span>[w];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A &quot;null&quot; reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NullExp</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nNop</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nMulTo</span>(<span class="params">x, y, r</span>) </span>&#123;</span><br><span class="line">  x.multiplyTo(y, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nSqrTo</span>(<span class="params">x, r</span>) </span>&#123;</span><br><span class="line">  x.squareTo(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NullExp.prototype.convert = nNop;</span><br><span class="line">NullExp.prototype.revert = nNop;</span><br><span class="line">NullExp.prototype.mulTo = nMulTo;</span><br><span class="line">NullExp.prototype.sqrTo = nSqrTo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this^e</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnPow</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.exp(e, <span class="keyword">new</span> NullExp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = lower n words of &quot;this * a&quot;, a.t &lt;= n</span></span><br><span class="line"><span class="comment">// &quot;this&quot; should be the larger one if appropriate.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpMultiplyLowerTo</span>(<span class="params">a, n, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">Math</span>.min(<span class="built_in">this</span>.t + a.t, n);</span><br><span class="line">  r.s = <span class="number">0</span>; <span class="comment">// assumes a,this &gt;= 0</span></span><br><span class="line">  r.t = i;</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) r[--i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> j;</span><br><span class="line">  <span class="keyword">for</span> (j = r.t - <span class="built_in">this</span>.t; i &lt; j; ++i) r[i + <span class="built_in">this</span>.t] = <span class="built_in">this</span>.am(<span class="number">0</span>, a[i], r, i, <span class="number">0</span>, <span class="built_in">this</span>.t);</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="built_in">Math</span>.min(a.t, n); i &lt; j; ++i) <span class="built_in">this</span>.am(<span class="number">0</span>, a[i], r, i, <span class="number">0</span>, n - i);</span><br><span class="line">  r.clamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) r = &quot;this * a&quot; without lower n words, n &gt; 0</span></span><br><span class="line"><span class="comment">// &quot;this&quot; should be the larger one if appropriate.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpMultiplyUpperTo</span>(<span class="params">a, n, r</span>) </span>&#123;</span><br><span class="line">  --n;</span><br><span class="line">  <span class="keyword">var</span> i = r.t = <span class="built_in">this</span>.t + a.t - n;</span><br><span class="line">  r.s = <span class="number">0</span>; <span class="comment">// assumes a,this &gt;= 0</span></span><br><span class="line">  <span class="keyword">while</span> (--i &gt;= <span class="number">0</span>) r[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="built_in">Math</span>.max(n - <span class="built_in">this</span>.t, <span class="number">0</span>); i &lt; a.t; ++i)</span><br><span class="line">    r[<span class="built_in">this</span>.t + i - n] = <span class="built_in">this</span>.am(n - i, a[i], r, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.t + i - n);</span><br><span class="line">  r.clamp();</span><br><span class="line">  r.drShiftTo(<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Barrett modular reduction</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Barrett</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// setup Barrett</span></span><br><span class="line">  <span class="built_in">this</span>.r2 = nbi();</span><br><span class="line">  <span class="built_in">this</span>.q3 = nbi();</span><br><span class="line">  BigInteger.ONE.dlShiftTo(<span class="number">2</span> * m.t, <span class="built_in">this</span>.r2);</span><br><span class="line">  <span class="built_in">this</span>.mu = <span class="built_in">this</span>.r2.divide(m);</span><br><span class="line">  <span class="built_in">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barrettConvert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x.s &lt; <span class="number">0</span> || x.t &gt; <span class="number">2</span> * <span class="built_in">this</span>.m.t) <span class="keyword">return</span> x.mod(<span class="built_in">this</span>.m);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x.compareTo(<span class="built_in">this</span>.m) &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r = nbi();</span><br><span class="line">    x.copyTo(r);</span><br><span class="line">    <span class="built_in">this</span>.reduce(r);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barrettRevert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x = x mod m (HAC 14.42)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barrettReduce</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x.drShiftTo(<span class="built_in">this</span>.m.t - <span class="number">1</span>, <span class="built_in">this</span>.r2);</span><br><span class="line">  <span class="keyword">if</span> (x.t &gt; <span class="built_in">this</span>.m.t + <span class="number">1</span>) &#123;</span><br><span class="line">    x.t = <span class="built_in">this</span>.m.t + <span class="number">1</span>;</span><br><span class="line">    x.clamp();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.mu.multiplyUpperTo(<span class="built_in">this</span>.r2, <span class="built_in">this</span>.m.t + <span class="number">1</span>, <span class="built_in">this</span>.q3);</span><br><span class="line">  <span class="built_in">this</span>.m.multiplyLowerTo(<span class="built_in">this</span>.q3, <span class="built_in">this</span>.m.t + <span class="number">1</span>, <span class="built_in">this</span>.r2);</span><br><span class="line">  <span class="keyword">while</span> (x.compareTo(<span class="built_in">this</span>.r2) &lt; <span class="number">0</span>) x.dAddOffset(<span class="number">1</span>, <span class="built_in">this</span>.m.t + <span class="number">1</span>);</span><br><span class="line">  x.subTo(<span class="built_in">this</span>.r2, x);</span><br><span class="line">  <span class="keyword">while</span> (x.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span>) x.subTo(<span class="built_in">this</span>.m, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r = x^2 mod m; x != r</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barrettSqrTo</span>(<span class="params">x, r</span>) </span>&#123;</span><br><span class="line">  x.squareTo(r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r = x*y mod m; x,y != r</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">barrettMulTo</span>(<span class="params">x, y, r</span>) </span>&#123;</span><br><span class="line">  x.multiplyTo(y, r);</span><br><span class="line">  <span class="built_in">this</span>.reduce(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Barrett.prototype.convert = barrettConvert;</span><br><span class="line">Barrett.prototype.revert = barrettRevert;</span><br><span class="line">Barrett.prototype.reduce = barrettReduce;</span><br><span class="line">Barrett.prototype.mulTo = barrettMulTo;</span><br><span class="line">Barrett.prototype.sqrTo = barrettSqrTo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) this^e % m (HAC 14.85)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnModPow</span>(<span class="params">e, m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = e.bitLength(),</span><br><span class="line">    k, r = nbv(<span class="number">1</span>),</span><br><span class="line">    z;</span><br><span class="line">  <span class="keyword">if</span> (i &lt;= <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">18</span>) k = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">48</span>) k = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">144</span>) k = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">768</span>) k = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">else</span> k = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">8</span>)</span><br><span class="line">    z = <span class="keyword">new</span> Classic(m);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (m.isEven())</span><br><span class="line">    z = <span class="keyword">new</span> Barrett(m);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    z = <span class="keyword">new</span> Montgomery(m);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// precomputation</span></span><br><span class="line">  <span class="keyword">var</span> g = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">    n = <span class="number">3</span>,</span><br><span class="line">    k1 = k - <span class="number">1</span>,</span><br><span class="line">    km = (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">  g[<span class="number">1</span>] = z.convert(<span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> g2 = nbi();</span><br><span class="line">    z.sqrTo(g[<span class="number">1</span>], g2);</span><br><span class="line">    <span class="keyword">while</span> (n &lt;= km) &#123;</span><br><span class="line">      g[n] = nbi();</span><br><span class="line">      z.mulTo(g2, g[n - <span class="number">2</span>], g[n]);</span><br><span class="line">      n += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> j = e.t - <span class="number">1</span>,</span><br><span class="line">    w, is1 = <span class="literal">true</span>,</span><br><span class="line">    r2 = nbi(),</span><br><span class="line">    t;</span><br><span class="line">  i = nbits(e[j]) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k1) w = (e[j] &gt;&gt; (i - k1)) &amp; km;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      w = (e[j] &amp; ((<span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>)) - <span class="number">1</span>)) &lt;&lt; (k1 - i);</span><br><span class="line">      <span class="keyword">if</span> (j &gt; <span class="number">0</span>) w |= e[j - <span class="number">1</span>] &gt;&gt; (<span class="built_in">this</span>.DB + i - k1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = k;</span><br><span class="line">    <span class="keyword">while</span> ((w &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">      --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((i -= n) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      i += <span class="built_in">this</span>.DB;</span><br><span class="line">      --j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is1) &#123; <span class="comment">// ret == 1, don&#x27;t bother squaring or multiplying it</span></span><br><span class="line">      g[w].copyTo(r);</span><br><span class="line">      is1 = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        z.sqrTo(r, r2);</span><br><span class="line">        z.sqrTo(r2, r);</span><br><span class="line">        n -= <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (n &gt; <span class="number">0</span>) z.sqrTo(r, r2);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        t = r;</span><br><span class="line">        r = r2;</span><br><span class="line">        r2 = t;</span><br><span class="line">      &#125;</span><br><span class="line">      z.mulTo(r2, g[w], r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; (e[j] &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>) &#123;</span><br><span class="line">      z.sqrTo(r, r2);</span><br><span class="line">      t = r;</span><br><span class="line">      r = r2;</span><br><span class="line">      r2 = t;</span><br><span class="line">      <span class="keyword">if</span> (--i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        i = <span class="built_in">this</span>.DB - <span class="number">1</span>;</span><br><span class="line">        --j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> z.revert(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) gcd(this,a) (HAC 14.54)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnGCD</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) ? <span class="built_in">this</span>.negate() : <span class="built_in">this</span>.clone();</span><br><span class="line">  <span class="keyword">var</span> y = (a.s &lt; <span class="number">0</span>) ? a.negate() : a.clone();</span><br><span class="line">  <span class="keyword">if</span> (x.compareTo(y) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> i = x.getLowestSetBit(),</span><br><span class="line">    g = y.getLowestSetBit();</span><br><span class="line">  <span class="keyword">if</span> (g &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; g) g = i;</span><br><span class="line">  <span class="keyword">if</span> (g &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x.rShiftTo(g, x);</span><br><span class="line">    y.rShiftTo(g, y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (x.signum() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((i = x.getLowestSetBit()) &gt; <span class="number">0</span>) x.rShiftTo(i, x);</span><br><span class="line">    <span class="keyword">if</span> ((i = y.getLowestSetBit()) &gt; <span class="number">0</span>) y.rShiftTo(i, y);</span><br><span class="line">    <span class="keyword">if</span> (x.compareTo(y) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      x.subTo(y, x);</span><br><span class="line">      x.rShiftTo(<span class="number">1</span>, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      y.subTo(x, y);</span><br><span class="line">      y.rShiftTo(<span class="number">1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g &gt; <span class="number">0</span>) y.lShiftTo(g, y);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) this % n, n &lt; 2^26</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpModInt</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">this</span>.DV % n,</span><br><span class="line">    r = (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) ? n - <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.t &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">0</span>) r = <span class="built_in">this</span>[<span class="number">0</span>] % n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) r = (d * r + <span class="built_in">this</span>[i]) % n;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) 1/this % m (HAC 14.61)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnModInverse</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ac = m.isEven();</span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">this</span>.isEven() &amp;&amp; ac) || m.signum() == <span class="number">0</span>) <span class="keyword">return</span> BigInteger.ZERO;</span><br><span class="line">  <span class="keyword">var</span> u = m.clone(),</span><br><span class="line">    v = <span class="built_in">this</span>.clone();</span><br><span class="line">  <span class="keyword">var</span> a = nbv(<span class="number">1</span>),</span><br><span class="line">    b = nbv(<span class="number">0</span>),</span><br><span class="line">    c = nbv(<span class="number">0</span>),</span><br><span class="line">    d = nbv(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span> (u.signum() != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (u.isEven()) &#123;</span><br><span class="line">      u.rShiftTo(<span class="number">1</span>, u);</span><br><span class="line">      <span class="keyword">if</span> (ac) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a.isEven() || !b.isEven()) &#123;</span><br><span class="line">          a.addTo(<span class="built_in">this</span>, a);</span><br><span class="line">          b.subTo(m, b);</span><br><span class="line">        &#125;</span><br><span class="line">        a.rShiftTo(<span class="number">1</span>, a);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!b.isEven()) b.subTo(m, b);</span><br><span class="line">      b.rShiftTo(<span class="number">1</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (v.isEven()) &#123;</span><br><span class="line">      v.rShiftTo(<span class="number">1</span>, v);</span><br><span class="line">      <span class="keyword">if</span> (ac) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c.isEven() || !d.isEven()) &#123;</span><br><span class="line">          c.addTo(<span class="built_in">this</span>, c);</span><br><span class="line">          d.subTo(m, d);</span><br><span class="line">        &#125;</span><br><span class="line">        c.rShiftTo(<span class="number">1</span>, c);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!d.isEven()) d.subTo(m, d);</span><br><span class="line">      d.rShiftTo(<span class="number">1</span>, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u.compareTo(v) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      u.subTo(v, u);</span><br><span class="line">      <span class="keyword">if</span> (ac) a.subTo(c, a);</span><br><span class="line">      b.subTo(d, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      v.subTo(u, v);</span><br><span class="line">      <span class="keyword">if</span> (ac) c.subTo(a, c);</span><br><span class="line">      d.subTo(b, d);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v.compareTo(BigInteger.ONE) != <span class="number">0</span>) <span class="keyword">return</span> BigInteger.ZERO;</span><br><span class="line">  <span class="keyword">if</span> (d.compareTo(m) &gt;= <span class="number">0</span>) <span class="keyword">return</span> d.subtract(m);</span><br><span class="line">  <span class="keyword">if</span> (d.signum() &lt; <span class="number">0</span>) d.addTo(m, d);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> d;</span><br><span class="line">  <span class="keyword">if</span> (d.signum() &lt; <span class="number">0</span>) <span class="keyword">return</span> d.add(m);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lowprimes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>, <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>];</span><br><span class="line"><span class="keyword">var</span> lplim = (<span class="number">1</span> &lt;&lt; <span class="number">26</span>) / lowprimes[lowprimes.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// (public) test primality with certainty &gt;= 1-.5^t</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnIsProbablePrime</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, x = <span class="built_in">this</span>.abs();</span><br><span class="line">  <span class="keyword">if</span> (x.t == <span class="number">1</span> &amp;&amp; x[<span class="number">0</span>] &lt;= lowprimes[lowprimes.length - <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lowprimes.length; ++i)</span><br><span class="line">      <span class="keyword">if</span> (x[<span class="number">0</span>] == lowprimes[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x.isEven()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; lowprimes.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = lowprimes[i],</span><br><span class="line">      j = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; lowprimes.length &amp;&amp; m &lt; lplim) m *= lowprimes[j++];</span><br><span class="line">    m = x.modInt(m);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">      <span class="keyword">if</span> (m % lowprimes[i++] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x.millerRabin(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (protected) true if probably prime (HAC 4.24, Miller-Rabin)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bnpMillerRabin</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n1 = <span class="built_in">this</span>.subtract(BigInteger.ONE);</span><br><span class="line">  <span class="keyword">var</span> k = n1.getLowestSetBit();</span><br><span class="line">  <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> r = n1.shiftRight(k);</span><br><span class="line">  t = (t + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (t &gt; lowprimes.length) t = lowprimes.length;</span><br><span class="line">  <span class="keyword">var</span> a = nbi();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; t; ++i) &#123;</span><br><span class="line">    a.fromInt(lowprimes[i]);</span><br><span class="line">    <span class="keyword">var</span> y = a.modPow(r, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (y.compareTo(BigInteger.ONE) != <span class="number">0</span> &amp;&amp; y.compareTo(n1) != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (j++ &lt; k &amp;&amp; y.compareTo(n1) != <span class="number">0</span>) &#123;</span><br><span class="line">        y = y.modPowInt(<span class="number">2</span>, <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (y.compareTo(BigInteger.ONE) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (y.compareTo(n1) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protected</span></span><br><span class="line">BigInteger.prototype.chunkSize = bnpChunkSize;</span><br><span class="line">BigInteger.prototype.toRadix = bnpToRadix;</span><br><span class="line">BigInteger.prototype.fromRadix = bnpFromRadix;</span><br><span class="line">BigInteger.prototype.fromNumber = bnpFromNumber;</span><br><span class="line">BigInteger.prototype.bitwiseTo = bnpBitwiseTo;</span><br><span class="line">BigInteger.prototype.changeBit = bnpChangeBit;</span><br><span class="line">BigInteger.prototype.addTo = bnpAddTo;</span><br><span class="line">BigInteger.prototype.dMultiply = bnpDMultiply;</span><br><span class="line">BigInteger.prototype.dAddOffset = bnpDAddOffset;</span><br><span class="line">BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;</span><br><span class="line">BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;</span><br><span class="line">BigInteger.prototype.modInt = bnpModInt;</span><br><span class="line">BigInteger.prototype.millerRabin = bnpMillerRabin;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public</span></span><br><span class="line">BigInteger.prototype.clone = bnClone;</span><br><span class="line">BigInteger.prototype.intValue = bnIntValue;</span><br><span class="line">BigInteger.prototype.byteValue = bnByteValue;</span><br><span class="line">BigInteger.prototype.shortValue = bnShortValue;</span><br><span class="line">BigInteger.prototype.signum = bnSigNum;</span><br><span class="line">BigInteger.prototype.toByteArray = bnToByteArray;</span><br><span class="line">BigInteger.prototype.equals = bnEquals;</span><br><span class="line">BigInteger.prototype.min = bnMin;</span><br><span class="line">BigInteger.prototype.max = bnMax;</span><br><span class="line">BigInteger.prototype.and = bnAnd;</span><br><span class="line">BigInteger.prototype.or = bnOr;</span><br><span class="line">BigInteger.prototype.xor = bnXor;</span><br><span class="line">BigInteger.prototype.andNot = bnAndNot;</span><br><span class="line">BigInteger.prototype.not = bnNot;</span><br><span class="line">BigInteger.prototype.shiftLeft = bnShiftLeft;</span><br><span class="line">BigInteger.prototype.shiftRight = bnShiftRight;</span><br><span class="line">BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;</span><br><span class="line">BigInteger.prototype.bitCount = bnBitCount;</span><br><span class="line">BigInteger.prototype.testBit = bnTestBit;</span><br><span class="line">BigInteger.prototype.setBit = bnSetBit;</span><br><span class="line">BigInteger.prototype.clearBit = bnClearBit;</span><br><span class="line">BigInteger.prototype.flipBit = bnFlipBit;</span><br><span class="line">BigInteger.prototype.add = bnAdd;</span><br><span class="line">BigInteger.prototype.subtract = bnSubtract;</span><br><span class="line">BigInteger.prototype.multiply = bnMultiply;</span><br><span class="line">BigInteger.prototype.divide = bnDivide;</span><br><span class="line">BigInteger.prototype.remainder = bnRemainder;</span><br><span class="line">BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;</span><br><span class="line">BigInteger.prototype.modPow = bnModPow;</span><br><span class="line">BigInteger.prototype.modInverse = bnModInverse;</span><br><span class="line">BigInteger.prototype.pow = bnPow;</span><br><span class="line">BigInteger.prototype.gcd = bnGCD;</span><br><span class="line">BigInteger.prototype.isProbablePrime = bnIsProbablePrime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInteger interfaces not implemented in jsbn:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInteger(int signum, byte[] magnitude)</span></span><br><span class="line"><span class="comment">// double doubleValue()</span></span><br><span class="line"><span class="comment">// float floatValue()</span></span><br><span class="line"><span class="comment">// int hashCode()</span></span><br><span class="line"><span class="comment">// long longValue()</span></span><br><span class="line"><span class="comment">// static BigInteger valueOf(long val)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RSAPublicKey = <span class="function"><span class="keyword">function</span>(<span class="params">$modulus_hex, $encryptionExponent_hex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.modulus = <span class="keyword">new</span> BigInteger($modulus_hex, <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">this</span>.encryptionExponent = <span class="keyword">new</span> BigInteger($encryptionExponent_hex, <span class="number">16</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Base64 = &#123;</span><br><span class="line">  <span class="attr">base64</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>,</span><br><span class="line">  <span class="attr">encode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$input) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $chr1, $chr2, $chr3;</span><br><span class="line">    <span class="keyword">var</span> $enc1, $enc2, $enc3, $enc4;</span><br><span class="line">    <span class="keyword">var</span> $i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      $chr1 = $input.charCodeAt($i++);</span><br><span class="line">      $chr2 = $input.charCodeAt($i++);</span><br><span class="line">      $chr3 = $input.charCodeAt($i++);</span><br><span class="line">      $enc1 = $chr1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      $enc2 = (($chr1 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | ($chr2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">      $enc3 = (($chr2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | ($chr3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      $enc4 = $chr3 &amp; <span class="number">63</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>($chr2)) $enc3 = $enc4 = <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isNaN</span>($chr3)) $enc4 = <span class="number">64</span>;</span><br><span class="line">      $output += <span class="built_in">this</span>.base64.charAt($enc1) + <span class="built_in">this</span>.base64.charAt($enc2) + <span class="built_in">this</span>.base64.charAt($enc3) + <span class="built_in">this</span>.base64.charAt($enc4);</span><br><span class="line">    &#125; <span class="keyword">while</span> ($i &lt; $input.length);</span><br><span class="line">    <span class="keyword">return</span> $output;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">decode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$input) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $input = $input.replace(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $enc1, $enc2, $enc3, $enc4;</span><br><span class="line">    <span class="keyword">var</span> $i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      $enc1 = <span class="built_in">this</span>.base64.indexOf($input.charAt($i++));</span><br><span class="line">      $enc2 = <span class="built_in">this</span>.base64.indexOf($input.charAt($i++));</span><br><span class="line">      $enc3 = <span class="built_in">this</span>.base64.indexOf($input.charAt($i++));</span><br><span class="line">      $enc4 = <span class="built_in">this</span>.base64.indexOf($input.charAt($i++));</span><br><span class="line">      $output += <span class="built_in">String</span>.fromCharCode(($enc1 &lt;&lt; <span class="number">2</span>) | ($enc2 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">      <span class="keyword">if</span> ($enc3 != <span class="number">64</span>) $output += <span class="built_in">String</span>.fromCharCode((($enc2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | ($enc3 &gt;&gt; <span class="number">2</span>));</span><br><span class="line">      <span class="keyword">if</span> ($enc4 != <span class="number">64</span>) $output += <span class="built_in">String</span>.fromCharCode((($enc3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | $enc4);</span><br><span class="line">    &#125; <span class="keyword">while</span> ($i &lt; $input.length);</span><br><span class="line">    <span class="keyword">return</span> $output;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Hex = &#123;</span><br><span class="line">  <span class="attr">hex</span>: <span class="string">&quot;0123456789abcdef&quot;</span>,</span><br><span class="line">  <span class="attr">encode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$input) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $k;</span><br><span class="line">    <span class="keyword">var</span> $i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      $k = $input.charCodeAt($i++);</span><br><span class="line">      $output += <span class="built_in">this</span>.hex.charAt(($k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xf</span>) + <span class="built_in">this</span>.hex.charAt($k &amp; <span class="number">0xf</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> ($i &lt; $input.length);</span><br><span class="line">    <span class="keyword">return</span> $output;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">decode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$input) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $input = $input.replace(<span class="regexp">/[^0-9abcdef]/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      $output += <span class="built_in">String</span>.fromCharCode(((<span class="built_in">this</span>.hex.indexOf($input.charAt($i++)) &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0</span>) | (<span class="built_in">this</span>.hex.indexOf($input.charAt($i++)) &amp; <span class="number">0xf</span>));</span><br><span class="line">    &#125; <span class="keyword">while</span> ($i &lt; $input.length);</span><br><span class="line">    <span class="keyword">return</span> $output;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RSA = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">getPublicKey</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$modulus_hex, $exponent_hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RSAPublicKey($modulus_hex, $exponent_hex);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$data, $pubkey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$pubkey) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $data = <span class="built_in">this</span>.pkcs1pad2($data, ($pubkey.modulus.bitLength() + <span class="number">7</span>) &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$data) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $data = $data.modPowInt($pubkey.encryptionExponent, $pubkey.modulus);</span><br><span class="line">    <span class="keyword">if</span> (!$data) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    $data = $data.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (($data.length &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      $data = <span class="string">&quot;0&quot;</span> + $data;</span><br><span class="line">    <span class="keyword">return</span> Base64.encode(Hex.decode($data));</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">pkcs1pad2</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$data, $keysize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($keysize &lt; $data.length + <span class="number">11</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> $buffer = [];</span><br><span class="line">    <span class="keyword">var</span> $i = $data.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ($i &gt;= <span class="number">0</span> &amp;&amp; $keysize &gt; <span class="number">0</span>)</span><br><span class="line">      $buffer[--$keysize] = $data.charCodeAt($i--);</span><br><span class="line">    $buffer[--$keysize] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ($keysize &gt; <span class="number">2</span>)</span><br><span class="line">      $buffer[--$keysize] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">254</span>) + <span class="number">1</span>;</span><br><span class="line">    $buffer[--$keysize] = <span class="number">2</span>;</span><br><span class="line">    $buffer[--$keysize] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigInteger($buffer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">password, mod, exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pubKey = RSA.getPublicKey(mod, exp);</span><br><span class="line">  <span class="keyword">var</span> encryptedPassword = RSA.encrypt(password, pubKey);</span><br><span class="line">  <span class="keyword">return</span> encryptedPassword;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="登陆实现">登陆实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取秘钥 请求 getrsakey 包</span></span><br><span class="line">url = <span class="string">&quot;https://store.steampowered.com/login/getrsakey/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;donotcache&#x27;</span>: <span class="string">&#x27;1652059752356&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;123@qq.com&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response_json = requests.post(url=url, headers=headers,data=data).json()</span><br><span class="line">mod = response_json[<span class="string">&#x27;publickey_mod&#x27;</span>]</span><br><span class="line">exp = response_json[<span class="string">&#x27;publickey_exp&#x27;</span>]</span><br><span class="line"><span class="comment"># print(mod, exp)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行密码逆向</span></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">node = execjs.get()</span><br><span class="line"><span class="comment"># 编译源文件</span></span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;./逆向/steam.js&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line"><span class="comment"># 执行 js 函数</span></span><br><span class="line">funcName = <span class="string">&quot;getPwd(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;123456&#x27;</span>, mod, exp)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(4)--凡科网逆向分析</title>
    <url>/posts/7065f494/</url>
    <content><![CDATA[<h2 id="凡科网闭包">凡科网闭包</h2>
<h3 id="抓包分析">抓包分析</h3>
<ul>
<li>
<p>url：<a href="https://i.fkw.com/">https://i.fkw.com/</a></p>
</li>
<li>
<p>根据抓包信息可知，<code>pwd</code>为 32 位的 16 进制数，所以猜测其为 md5 加密</p>
</li>
<li>
<p>需要逆向的 js 函数<code>md5</code>定义在一个闭包中，直接将闭包整个复制过来进行调试即可</p>
</li>
</ul>
<span id="more"></span>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">u, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = (u &amp; <span class="number">65535</span>) + (z &amp; <span class="number">65535</span>),</span><br><span class="line">      v = (u &gt;&gt; <span class="number">16</span>) + (z &gt;&gt; <span class="number">16</span>) + (w &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (v &lt;&lt; <span class="number">16</span>) | (w &amp; <span class="number">65535</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">u, v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (u &lt;&lt; v) | (u &gt;&gt;&gt; (<span class="number">32</span> - v))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">A, w, v, u, z, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o(s(o(o(w, A), o(u, y)), z), v)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">w, v, B, A, u, z, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c((v &amp; B) | ((~v) &amp; A), w, v, u, z, y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">w, v, B, A, u, z, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c((v &amp; A) | (B &amp; (~A)), w, v, u, z, y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">w, v, B, A, u, z, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c(v ^ B ^ A, w, v, u, z, y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">w, v, B, A, u, z, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c(B ^ (v | (~A)), w, v, u, z, y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">F, A</span>) </span>&#123;</span><br><span class="line">    F[A &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; ((A) % <span class="number">32</span>);</span><br><span class="line">    F[(((A + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = A;</span><br><span class="line">    <span class="keyword">var</span> w, z, y, v, u, E = <span class="number">1732584193</span>,</span><br><span class="line">      D = -<span class="number">271733879</span>,</span><br><span class="line">      C = -<span class="number">1732584194</span>,</span><br><span class="line">      B = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; F.length; w += <span class="number">16</span>) &#123;</span><br><span class="line">      z = E;</span><br><span class="line">      y = D;</span><br><span class="line">      v = C;</span><br><span class="line">      u = B;</span><br><span class="line">      E = b(E, D, C, B, F[w], <span class="number">7</span>, -<span class="number">680876936</span>);</span><br><span class="line">      B = b(B, E, D, C, F[w + <span class="number">1</span>], <span class="number">12</span>, -<span class="number">389564586</span>);</span><br><span class="line">      C = b(C, B, E, D, F[w + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>);</span><br><span class="line">      D = b(D, C, B, E, F[w + <span class="number">3</span>], <span class="number">22</span>, -<span class="number">1044525330</span>);</span><br><span class="line">      E = b(E, D, C, B, F[w + <span class="number">4</span>], <span class="number">7</span>, -<span class="number">176418897</span>);</span><br><span class="line">      B = b(B, E, D, C, F[w + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>);</span><br><span class="line">      C = b(C, B, E, D, F[w + <span class="number">6</span>], <span class="number">17</span>, -<span class="number">1473231341</span>);</span><br><span class="line">      D = b(D, C, B, E, F[w + <span class="number">7</span>], <span class="number">22</span>, -<span class="number">45705983</span>);</span><br><span class="line">      E = b(E, D, C, B, F[w + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>);</span><br><span class="line">      B = b(B, E, D, C, F[w + <span class="number">9</span>], <span class="number">12</span>, -<span class="number">1958414417</span>);</span><br><span class="line">      C = b(C, B, E, D, F[w + <span class="number">10</span>], <span class="number">17</span>, -<span class="number">42063</span>);</span><br><span class="line">      D = b(D, C, B, E, F[w + <span class="number">11</span>], <span class="number">22</span>, -<span class="number">1990404162</span>);</span><br><span class="line">      E = b(E, D, C, B, F[w + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>);</span><br><span class="line">      B = b(B, E, D, C, F[w + <span class="number">13</span>], <span class="number">12</span>, -<span class="number">40341101</span>);</span><br><span class="line">      C = b(C, B, E, D, F[w + <span class="number">14</span>], <span class="number">17</span>, -<span class="number">1502002290</span>);</span><br><span class="line">      D = b(D, C, B, E, F[w + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>);</span><br><span class="line">      E = i(E, D, C, B, F[w + <span class="number">1</span>], <span class="number">5</span>, -<span class="number">165796510</span>);</span><br><span class="line">      B = i(B, E, D, C, F[w + <span class="number">6</span>], <span class="number">9</span>, -<span class="number">1069501632</span>);</span><br><span class="line">      C = i(C, B, E, D, F[w + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>);</span><br><span class="line">      D = i(D, C, B, E, F[w], <span class="number">20</span>, -<span class="number">373897302</span>);</span><br><span class="line">      E = i(E, D, C, B, F[w + <span class="number">5</span>], <span class="number">5</span>, -<span class="number">701558691</span>);</span><br><span class="line">      B = i(B, E, D, C, F[w + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>);</span><br><span class="line">      C = i(C, B, E, D, F[w + <span class="number">15</span>], <span class="number">14</span>, -<span class="number">660478335</span>);</span><br><span class="line">      D = i(D, C, B, E, F[w + <span class="number">4</span>], <span class="number">20</span>, -<span class="number">405537848</span>);</span><br><span class="line">      E = i(E, D, C, B, F[w + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>);</span><br><span class="line">      B = i(B, E, D, C, F[w + <span class="number">14</span>], <span class="number">9</span>, -<span class="number">1019803690</span>);</span><br><span class="line">      C = i(C, B, E, D, F[w + <span class="number">3</span>], <span class="number">14</span>, -<span class="number">187363961</span>);</span><br><span class="line">      D = i(D, C, B, E, F[w + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>);</span><br><span class="line">      E = i(E, D, C, B, F[w + <span class="number">13</span>], <span class="number">5</span>, -<span class="number">1444681467</span>);</span><br><span class="line">      B = i(B, E, D, C, F[w + <span class="number">2</span>], <span class="number">9</span>, -<span class="number">51403784</span>);</span><br><span class="line">      C = i(C, B, E, D, F[w + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>);</span><br><span class="line">      D = i(D, C, B, E, F[w + <span class="number">12</span>], <span class="number">20</span>, -<span class="number">1926607734</span>);</span><br><span class="line">      E = n(E, D, C, B, F[w + <span class="number">5</span>], <span class="number">4</span>, -<span class="number">378558</span>);</span><br><span class="line">      B = n(B, E, D, C, F[w + <span class="number">8</span>], <span class="number">11</span>, -<span class="number">2022574463</span>);</span><br><span class="line">      C = n(C, B, E, D, F[w + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>);</span><br><span class="line">      D = n(D, C, B, E, F[w + <span class="number">14</span>], <span class="number">23</span>, -<span class="number">35309556</span>);</span><br><span class="line">      E = n(E, D, C, B, F[w + <span class="number">1</span>], <span class="number">4</span>, -<span class="number">1530992060</span>);</span><br><span class="line">      B = n(B, E, D, C, F[w + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>);</span><br><span class="line">      C = n(C, B, E, D, F[w + <span class="number">7</span>], <span class="number">16</span>, -<span class="number">155497632</span>);</span><br><span class="line">      D = n(D, C, B, E, F[w + <span class="number">10</span>], <span class="number">23</span>, -<span class="number">1094730640</span>);</span><br><span class="line">      E = n(E, D, C, B, F[w + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>);</span><br><span class="line">      B = n(B, E, D, C, F[w], <span class="number">11</span>, -<span class="number">358537222</span>);</span><br><span class="line">      C = n(C, B, E, D, F[w + <span class="number">3</span>], <span class="number">16</span>, -<span class="number">722521979</span>);</span><br><span class="line">      D = n(D, C, B, E, F[w + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>);</span><br><span class="line">      E = n(E, D, C, B, F[w + <span class="number">9</span>], <span class="number">4</span>, -<span class="number">640364487</span>);</span><br><span class="line">      B = n(B, E, D, C, F[w + <span class="number">12</span>], <span class="number">11</span>, -<span class="number">421815835</span>);</span><br><span class="line">      C = n(C, B, E, D, F[w + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>);</span><br><span class="line">      D = n(D, C, B, E, F[w + <span class="number">2</span>], <span class="number">23</span>, -<span class="number">995338651</span>);</span><br><span class="line">      E = a(E, D, C, B, F[w], <span class="number">6</span>, -<span class="number">198630844</span>);</span><br><span class="line">      B = a(B, E, D, C, F[w + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>);</span><br><span class="line">      C = a(C, B, E, D, F[w + <span class="number">14</span>], <span class="number">15</span>, -<span class="number">1416354905</span>);</span><br><span class="line">      D = a(D, C, B, E, F[w + <span class="number">5</span>], <span class="number">21</span>, -<span class="number">57434055</span>);</span><br><span class="line">      E = a(E, D, C, B, F[w + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>);</span><br><span class="line">      B = a(B, E, D, C, F[w + <span class="number">3</span>], <span class="number">10</span>, -<span class="number">1894986606</span>);</span><br><span class="line">      C = a(C, B, E, D, F[w + <span class="number">10</span>], <span class="number">15</span>, -<span class="number">1051523</span>);</span><br><span class="line">      D = a(D, C, B, E, F[w + <span class="number">1</span>], <span class="number">21</span>, -<span class="number">2054922799</span>);</span><br><span class="line">      E = a(E, D, C, B, F[w + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>);</span><br><span class="line">      B = a(B, E, D, C, F[w + <span class="number">15</span>], <span class="number">10</span>, -<span class="number">30611744</span>);</span><br><span class="line">      C = a(C, B, E, D, F[w + <span class="number">6</span>], <span class="number">15</span>, -<span class="number">1560198380</span>);</span><br><span class="line">      D = a(D, C, B, E, F[w + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>);</span><br><span class="line">      E = a(E, D, C, B, F[w + <span class="number">4</span>], <span class="number">6</span>, -<span class="number">145523070</span>);</span><br><span class="line">      B = a(B, E, D, C, F[w + <span class="number">11</span>], <span class="number">10</span>, -<span class="number">1120210379</span>);</span><br><span class="line">      C = a(C, B, E, D, F[w + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>);</span><br><span class="line">      D = a(D, C, B, E, F[w + <span class="number">9</span>], <span class="number">21</span>, -<span class="number">343485551</span>);</span><br><span class="line">      E = o(E, z);</span><br><span class="line">      D = o(D, y);</span><br><span class="line">      C = o(C, v);</span><br><span class="line">      B = o(B, u)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [E, D, C, B]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w, u = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; v.length * <span class="number">32</span>; w += <span class="number">8</span>) &#123;</span><br><span class="line">      u += <span class="built_in">String</span>.fromCharCode((v[w &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (w % <span class="number">32</span>)) &amp; <span class="number">255</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w, u = [];</span><br><span class="line">    u[(v.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; u.length; w += <span class="number">1</span>) &#123;</span><br><span class="line">      u[w] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; v.length * <span class="number">8</span>; w += <span class="number">8</span>) &#123;</span><br><span class="line">      u[w &gt;&gt; <span class="number">5</span>] |= (v.charCodeAt(w / <span class="number">8</span>) &amp; <span class="number">255</span>) &lt;&lt; (w % <span class="number">32</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p(d(j(u), u.length * <span class="number">8</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">w, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v, y = j(w),</span><br><span class="line">      u = [],</span><br><span class="line">      x = [],</span><br><span class="line">      A;</span><br><span class="line">    u[<span class="number">15</span>] = x[<span class="number">15</span>] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (y.length &gt; <span class="number">16</span>) &#123;</span><br><span class="line">      y = d(y, w.length * <span class="number">8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; <span class="number">16</span>; v += <span class="number">1</span>) &#123;</span><br><span class="line">      u[v] = y[v] ^ <span class="number">909522486</span>;</span><br><span class="line">      x[v] = y[v] ^ <span class="number">1549556828</span></span><br><span class="line">    &#125;</span><br><span class="line">    A = d(u.concat(j(z)), <span class="number">512</span> + z.length * <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> p(d(x.concat(A), <span class="number">512</span> + <span class="number">128</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="string">&quot;0123456789abcdef&quot;</span>,</span><br><span class="line">      v = <span class="string">&quot;&quot;</span>,</span><br><span class="line">      u, y;</span><br><span class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; w.length; y += <span class="number">1</span>) &#123;</span><br><span class="line">      u = w.charCodeAt(y);</span><br><span class="line">      v += z.charAt((u &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>) + z.charAt(u &amp; <span class="number">15</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(u))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k(m(u))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t(q(u))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">u, v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(m(u), m(v))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">u, v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t(h(u, v))</span><br><span class="line">  &#125;</span><br><span class="line">  g.md5 = <span class="function"><span class="keyword">function</span>(<span class="params">v, w, u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!w) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!u) &#123;</span><br><span class="line">        <span class="keyword">return</span> l(v)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q(v)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!u) &#123;</span><br><span class="line">      <span class="keyword">return</span> r(w, v)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h(w, v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">typeof</span> jQuery === <span class="string">&quot;function&quot;</span> ? jQuery : <span class="built_in">this</span>));</span><br></pre></td></tr></table></figure></div>
<h3 id="python实现">python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;./逆向/fkw.js&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">funcName = <span class="string">&quot;md5(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(5)--完美世界RSA逆向</title>
    <url>/posts/2eab9466/</url>
    <content><![CDATA[<h2 id="完美世界逆向分析">完美世界逆向分析</h2>
<h3 id="抓包分析">抓包分析</h3>
<ul>
<li>url：<a href="https://passport.wanmei.com/login?location=L3NhZmUv">https://passport.wanmei.com/login?location=L3NhZmUv</a></li>
<li>发现在<code>XHR</code>中并没有抓到对应的存在 post 请求的包，所以去<code>ALL</code>中寻找类似<code>login</code>的 post 请求包</li>
<li>找到<code>login</code>中<code>data</code>数据中存在<code>passeord</code>和<code>username</code></li>
<li>经过搜索查找<code>password</code>，可以知道加密方式为 RSA 加密</li>
</ul>
<span id="more"></span>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">navigator = <span class="built_in">this</span>;</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*! JSEncrypt v2.3.1 | https://npmcdn.com/jsencrypt@2.3.1/LICENSE.txt */</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">    <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd ? define([<span class="string">&quot;exports&quot;</span>], e) : e(<span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">exports</span> &amp;&amp; <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">exports</span>.nodeName ? <span class="built_in">module</span>.exports : t)</span><br><span class="line">&#125;(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        <span class="literal">null</span> != t &amp;&amp; (<span class="string">&quot;number&quot;</span> == <span class="keyword">typeof</span> t ? <span class="built_in">this</span>.fromNumber(t, e, i) : <span class="literal">null</span> == e &amp;&amp; <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> t ? <span class="built_in">this</span>.fromString(t, <span class="number">256</span>) : <span class="built_in">this</span>.fromString(t, e))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> e(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t, e, i, r, s, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; --n &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = e * <span class="built_in">this</span>[t++] + i[r] + s;</span><br><span class="line">            s = <span class="built_in">Math</span>.floor(o / <span class="number">67108864</span>),</span><br><span class="line">                i[r++] = <span class="number">67108863</span> &amp; o</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">t, e, i, r, s, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">32767</span> &amp; e, h = e &gt;&gt; <span class="number">15</span>; --n &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">32767</span> &amp; <span class="built_in">this</span>[t]</span><br><span class="line">                , u = <span class="built_in">this</span>[t++] &gt;&gt; <span class="number">15</span></span><br><span class="line">                , c = h * a + u * o;</span><br><span class="line">            a = o * a + ((<span class="number">32767</span> &amp; c) &lt;&lt; <span class="number">15</span>) + i[r] + (<span class="number">1073741823</span> &amp; s),</span><br><span class="line">                s = (a &gt;&gt;&gt; <span class="number">30</span>) + (c &gt;&gt;&gt; <span class="number">15</span>) + h * u + (s &gt;&gt;&gt; <span class="number">30</span>),</span><br><span class="line">                i[r++] = <span class="number">1073741823</span> &amp; a</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t, e, i, r, s, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">16383</span> &amp; e, h = e &gt;&gt; <span class="number">14</span>; --n &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">16383</span> &amp; <span class="built_in">this</span>[t]</span><br><span class="line">                , u = <span class="built_in">this</span>[t++] &gt;&gt; <span class="number">14</span></span><br><span class="line">                , c = h * a + u * o;</span><br><span class="line">            a = o * a + ((<span class="number">16383</span> &amp; c) &lt;&lt; <span class="number">14</span>) + i[r] + s,</span><br><span class="line">                s = (a &gt;&gt; <span class="number">28</span>) + (c &gt;&gt; <span class="number">14</span>) + h * u,</span><br><span class="line">                i[r++] = <span class="number">268435455</span> &amp; a</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Be.charAt(t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = Ke[t.charCodeAt(e)];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> == i ? -<span class="number">1</span> : i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="built_in">this</span>.t - <span class="number">1</span>; e &gt;= <span class="number">0</span>; --e)</span><br><span class="line">            t[e] = <span class="built_in">this</span>[e];</span><br><span class="line">        t.t = <span class="built_in">this</span>.t,</span><br><span class="line">            t.s = <span class="built_in">this</span>.s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.t = <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">this</span>.s = <span class="number">0</span> &gt; t ? -<span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">            t &gt; <span class="number">0</span> ? <span class="built_in">this</span>[<span class="number">0</span>] = t : -<span class="number">1</span> &gt; t ? <span class="built_in">this</span>[<span class="number">0</span>] = t + <span class="built_in">this</span>.DV : <span class="built_in">this</span>.t = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> e.fromInt(t),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">16</span> == i)</span><br><span class="line">            r = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">8</span> == i)</span><br><span class="line">            r = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">256</span> == i)</span><br><span class="line">            r = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == i)</span><br><span class="line">            r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">32</span> == i)</span><br><span class="line">            r = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">4</span> != i)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">void</span> <span class="built_in">this</span>.fromRadix(t, i);</span><br><span class="line">            r = <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.t = <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">this</span>.s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s = t.length, n = !<span class="number">1</span>, o = <span class="number">0</span>; --s &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">8</span> == r ? <span class="number">255</span> &amp; t[s] : h(t, s);</span><br><span class="line">            <span class="number">0</span> &gt; a ? <span class="string">&quot;-&quot;</span> == t.charAt(s) &amp;&amp; (n = !<span class="number">0</span>) : (n = !<span class="number">1</span>,</span><br><span class="line">                <span class="number">0</span> == o ? <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = a : o + r &gt; <span class="built_in">this</span>.DB ? (<span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= (a &amp; (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.DB - o) - <span class="number">1</span>) &lt;&lt; o,</span><br><span class="line">                    <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = a &gt;&gt; <span class="built_in">this</span>.DB - o) : <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= a &lt;&lt; o,</span><br><span class="line">                o += r,</span><br><span class="line">                o &gt;= <span class="built_in">this</span>.DB &amp;&amp; (o -= <span class="built_in">this</span>.DB))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">8</span> == r &amp;&amp; <span class="number">0</span> != (<span class="number">128</span> &amp; t[<span class="number">0</span>]) &amp;&amp; (<span class="built_in">this</span>.s = -<span class="number">1</span>,</span><br><span class="line">            o &gt; <span class="number">0</span> &amp;&amp; (<span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] |= (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.DB - o) - <span class="number">1</span> &lt;&lt; o)),</span><br><span class="line">            <span class="built_in">this</span>.clamp(),</span><br><span class="line">            n &amp;&amp; e.ZERO.subTo(<span class="built_in">this</span>, <span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM; <span class="built_in">this</span>.t &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] == t;)</span><br><span class="line">            --<span class="built_in">this</span>.t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.negate().toString(t);</span><br><span class="line">        <span class="keyword">var</span> e;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">16</span> == t)</span><br><span class="line">            e = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">8</span> == t)</span><br><span class="line">            e = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == t)</span><br><span class="line">            e = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">32</span> == t)</span><br><span class="line">            e = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">4</span> != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.toRadix(t);</span><br><span class="line">            e = <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> i, r = (<span class="number">1</span> &lt;&lt; e) - <span class="number">1</span>, s = !<span class="number">1</span>, n = <span class="string">&quot;&quot;</span>, h = <span class="built_in">this</span>.t, a = <span class="built_in">this</span>.DB - h * <span class="built_in">this</span>.DB % e;</span><br><span class="line">        <span class="keyword">if</span> (h-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (a &lt; <span class="built_in">this</span>.DB &amp;&amp; (i = <span class="built_in">this</span>[h] &gt;&gt; a) &gt; <span class="number">0</span> &amp;&amp; (s = !<span class="number">0</span>,</span><br><span class="line">                n = o(i)); h &gt;= <span class="number">0</span>;)</span><br><span class="line">                e &gt; a ? (i = (<span class="built_in">this</span>[h] &amp; (<span class="number">1</span> &lt;&lt; a) - <span class="number">1</span>) &lt;&lt; e - a,</span><br><span class="line">                    i |= <span class="built_in">this</span>[--h] &gt;&gt; (a += <span class="built_in">this</span>.DB - e)) : (i = <span class="built_in">this</span>[h] &gt;&gt; (a -= e) &amp; r,</span><br><span class="line">                        <span class="number">0</span> &gt;= a &amp;&amp; (a += <span class="built_in">this</span>.DB,</span><br><span class="line">                            --h)),</span><br><span class="line">                    i &gt; <span class="number">0</span> &amp;&amp; (s = !<span class="number">0</span>),</span><br><span class="line">                    s &amp;&amp; (n += o(i));</span><br><span class="line">        <span class="keyword">return</span> s ? n : <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = i();</span><br><span class="line">        <span class="keyword">return</span> e.ZERO.subTo(<span class="built_in">this</span>, t),</span><br><span class="line">            t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? <span class="built_in">this</span>.negate() : <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">this</span>.s - t.s;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != e)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="built_in">this</span>.t;</span><br><span class="line">        <span class="keyword">if</span> (e = i - t.t,</span><br><span class="line">            <span class="number">0</span> != e)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? -e : e;</span><br><span class="line">        <span class="keyword">for</span> (; --i &gt;= <span class="number">0</span>;)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != (e = <span class="built_in">this</span>[i] - t[i]))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> != (e = t &gt;&gt;&gt; <span class="number">16</span>) &amp;&amp; (t = e,</span><br><span class="line">            i += <span class="number">16</span>),</span><br><span class="line">            <span class="number">0</span> != (e = t &gt;&gt; <span class="number">8</span>) &amp;&amp; (t = e,</span><br><span class="line">                i += <span class="number">8</span>),</span><br><span class="line">            <span class="number">0</span> != (e = t &gt;&gt; <span class="number">4</span>) &amp;&amp; (t = e,</span><br><span class="line">                i += <span class="number">4</span>),</span><br><span class="line">            <span class="number">0</span> != (e = t &gt;&gt; <span class="number">2</span>) &amp;&amp; (t = e,</span><br><span class="line">                i += <span class="number">2</span>),</span><br><span class="line">            <span class="number">0</span> != (e = t &gt;&gt; <span class="number">1</span>) &amp;&amp; (t = e,</span><br><span class="line">                i += <span class="number">1</span>),</span><br><span class="line">            i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.t &lt;= <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">this</span>.DB * (<span class="built_in">this</span>.t - <span class="number">1</span>) + y(<span class="built_in">this</span>[<span class="built_in">this</span>.t - <span class="number">1</span>] ^ <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">T</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            e[i + t] = <span class="built_in">this</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (i = t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            e[i] = <span class="number">0</span>;</span><br><span class="line">        e.t = <span class="built_in">this</span>.t + t,</span><br><span class="line">            e.s = <span class="built_in">this</span>.s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">S</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = t; i &lt; <span class="built_in">this</span>.t; ++i)</span><br><span class="line">            e[i - t] = <span class="built_in">this</span>[i];</span><br><span class="line">        e.t = <span class="built_in">Math</span>.max(<span class="built_in">this</span>.t - t, <span class="number">0</span>),</span><br><span class="line">            e.s = <span class="built_in">this</span>.s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">R</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, r = t % <span class="built_in">this</span>.DB, s = <span class="built_in">this</span>.DB - r, n = (<span class="number">1</span> &lt;&lt; s) - <span class="number">1</span>, o = <span class="built_in">Math</span>.floor(t / <span class="built_in">this</span>.DB), h = <span class="built_in">this</span>.s &lt;&lt; r &amp; <span class="built_in">this</span>.DM;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="built_in">this</span>.t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            e[i + o + <span class="number">1</span>] = <span class="built_in">this</span>[i] &gt;&gt; s | h,</span><br><span class="line">                h = (<span class="built_in">this</span>[i] &amp; n) &lt;&lt; r;</span><br><span class="line">        <span class="keyword">for</span> (i = o - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            e[i] = <span class="number">0</span>;</span><br><span class="line">        e[o] = h,</span><br><span class="line">            e.t = <span class="built_in">this</span>.t + o + <span class="number">1</span>,</span><br><span class="line">            e.s = <span class="built_in">this</span>.s,</span><br><span class="line">            e.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">E</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        e.s = <span class="built_in">this</span>.s;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(t / <span class="built_in">this</span>.DB);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="built_in">this</span>.t)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">void</span> (e.t = <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> r = t % <span class="built_in">this</span>.DB</span><br><span class="line">            , s = <span class="built_in">this</span>.DB - r</span><br><span class="line">            , n = (<span class="number">1</span> &lt;&lt; r) - <span class="number">1</span>;</span><br><span class="line">        e[<span class="number">0</span>] = <span class="built_in">this</span>[i] &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = i + <span class="number">1</span>; o &lt; <span class="built_in">this</span>.t; ++o)</span><br><span class="line">            e[o - i - <span class="number">1</span>] |= (<span class="built_in">this</span>[o] &amp; n) &lt;&lt; s,</span><br><span class="line">                e[o - i] = <span class="built_in">this</span>[o] &gt;&gt; r;</span><br><span class="line">        r &gt; <span class="number">0</span> &amp;&amp; (e[<span class="built_in">this</span>.t - i - <span class="number">1</span>] |= (<span class="built_in">this</span>.s &amp; n) &lt;&lt; s),</span><br><span class="line">            e.t = <span class="built_in">this</span>.t - i,</span><br><span class="line">            e.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="built_in">Math</span>.min(t.t, <span class="built_in">this</span>.t); s &gt; i;)</span><br><span class="line">            r += <span class="built_in">this</span>[i] - t[i],</span><br><span class="line">                e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">        <span class="keyword">if</span> (t.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">            <span class="keyword">for</span> (r -= t.s; i &lt; <span class="built_in">this</span>.t;)</span><br><span class="line">                r += <span class="built_in">this</span>[i],</span><br><span class="line">                    e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                    r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">            r += <span class="built_in">this</span>.s</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (r += <span class="built_in">this</span>.s; i &lt; t.t;)</span><br><span class="line">                r -= t[i],</span><br><span class="line">                    e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                    r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">            r -= t.s</span><br><span class="line">        &#125;</span><br><span class="line">        e.s = <span class="number">0</span> &gt; r ? -<span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">            -<span class="number">1</span> &gt; r ? e[i++] = <span class="built_in">this</span>.DV + r : r &gt; <span class="number">0</span> &amp;&amp; (e[i++] = r),</span><br><span class="line">            e.t = i,</span><br><span class="line">            e.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">w</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">this</span>.abs()</span><br><span class="line">            , s = t.abs()</span><br><span class="line">            , n = r.t;</span><br><span class="line">        <span class="keyword">for</span> (i.t = n + s.t; --n &gt;= <span class="number">0</span>;)</span><br><span class="line">            i[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; s.t; ++n)</span><br><span class="line">            i[n + r.t] = r.am(<span class="number">0</span>, s[n], i, n, <span class="number">0</span>, r.t);</span><br><span class="line">        i.s = <span class="number">0</span>,</span><br><span class="line">            i.clamp(),</span><br><span class="line">            <span class="built_in">this</span>.s != t.s &amp;&amp; e.ZERO.subTo(i, i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="built_in">this</span>.abs(), i = t.t = <span class="number">2</span> * e.t; --i &gt;= <span class="number">0</span>;)</span><br><span class="line">            t[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e.t - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = e.am(i, e[i], t, <span class="number">2</span> * i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            (t[i + e.t] += e.am(i + <span class="number">1</span>, <span class="number">2</span> * e[i], t, <span class="number">2</span> * i + <span class="number">1</span>, r, e.t - i - <span class="number">1</span>)) &gt;= e.DV &amp;&amp; (t[i + e.t] -= e.DV,</span><br><span class="line">                t[i + e.t + <span class="number">1</span>] = <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        t.t &gt; <span class="number">0</span> &amp;&amp; (t[t.t - <span class="number">1</span>] += e.am(i, e[i], t, <span class="number">2</span> * i, <span class="number">0</span>, <span class="number">1</span>)),</span><br><span class="line">            t.s = <span class="number">0</span>,</span><br><span class="line">            t.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">t, r, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = t.abs();</span><br><span class="line">        <span class="keyword">if</span> (!(n.t &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = <span class="built_in">this</span>.abs();</span><br><span class="line">            <span class="keyword">if</span> (o.t &lt; n.t)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span> != r &amp;&amp; r.fromInt(<span class="number">0</span>),</span><br><span class="line">                    <span class="keyword">void</span> (<span class="literal">null</span> != s &amp;&amp; <span class="built_in">this</span>.copyTo(s));</span><br><span class="line">            <span class="literal">null</span> == s &amp;&amp; (s = i());</span><br><span class="line">            <span class="keyword">var</span> h = i()</span><br><span class="line">                , a = <span class="built_in">this</span>.s</span><br><span class="line">                , u = t.s</span><br><span class="line">                , c = <span class="built_in">this</span>.DB - y(n[n.t - <span class="number">1</span>]);</span><br><span class="line">            c &gt; <span class="number">0</span> ? (n.lShiftTo(c, h),</span><br><span class="line">                o.lShiftTo(c, s)) : (n.copyTo(h),</span><br><span class="line">                    o.copyTo(s));</span><br><span class="line">            <span class="keyword">var</span> f = h.t</span><br><span class="line">                , p = h[f - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != p) &#123;</span><br><span class="line">                <span class="keyword">var</span> l = p * (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F1) + (f &gt; <span class="number">1</span> ? h[f - <span class="number">2</span>] &gt;&gt; <span class="built_in">this</span>.F2 : <span class="number">0</span>)</span><br><span class="line">                    , d = <span class="built_in">this</span>.FV / l</span><br><span class="line">                    , g = (<span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F1) / l</span><br><span class="line">                    , m = <span class="number">1</span> &lt;&lt; <span class="built_in">this</span>.F2</span><br><span class="line">                    , v = s.t</span><br><span class="line">                    , b = v - f</span><br><span class="line">                    , T = <span class="literal">null</span> == r ? i() : r;</span><br><span class="line">                <span class="keyword">for</span> (h.dlShiftTo(b, T),</span><br><span class="line">                    s.compareTo(T) &gt;= <span class="number">0</span> &amp;&amp; (s[s.t++] = <span class="number">1</span>,</span><br><span class="line">                        s.subTo(T, s)),</span><br><span class="line">                    e.ONE.dlShiftTo(f, T),</span><br><span class="line">                    T.subTo(h, h); h.t &lt; f;)</span><br><span class="line">                    h[h.t++] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; --b &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">                    <span class="keyword">var</span> S = s[--v] == p ? <span class="built_in">this</span>.DM : <span class="built_in">Math</span>.floor(s[v] * d + (s[v - <span class="number">1</span>] + m) * g);</span><br><span class="line">                    <span class="keyword">if</span> ((s[v] += h.am(<span class="number">0</span>, S, s, b, <span class="number">0</span>, f)) &lt; S)</span><br><span class="line">                        <span class="keyword">for</span> (h.dlShiftTo(b, T),</span><br><span class="line">                            s.subTo(T, s); s[v] &lt; --S;)</span><br><span class="line">                            s.subTo(T, s)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">null</span> != r &amp;&amp; (s.drShiftTo(f, r),</span><br><span class="line">                    a != u &amp;&amp; e.ZERO.subTo(r, r)),</span><br><span class="line">                    s.t = f,</span><br><span class="line">                    s.clamp(),</span><br><span class="line">                    c &gt; <span class="number">0</span> &amp;&amp; s.rShiftTo(c, s),</span><br><span class="line">                    <span class="number">0</span> &gt; a &amp;&amp; e.ZERO.subTo(s, s)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">K</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.abs().divRemTo(t, <span class="literal">null</span>, r),</span><br><span class="line">            <span class="built_in">this</span>.s &lt; <span class="number">0</span> &amp;&amp; r.compareTo(e.ZERO) &gt; <span class="number">0</span> &amp;&amp; t.subTo(r, r),</span><br><span class="line">            r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.m = t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">U</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.s &lt; <span class="number">0</span> || t.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span> ? t.mod(<span class="built_in">this</span>.m) : t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">O</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">V</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        t.divRemTo(<span class="built_in">this</span>.m, <span class="literal">null</span>, t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">N</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        t.multiplyTo(e, i),</span><br><span class="line">            <span class="built_in">this</span>.reduce(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">J</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        t.squareTo(e),</span><br><span class="line">            <span class="built_in">this</span>.reduce(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">I</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.t &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == (<span class="number">1</span> &amp; t))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">3</span> &amp; t;</span><br><span class="line">        <span class="keyword">return</span> e = e * (<span class="number">2</span> - (<span class="number">15</span> &amp; t) * e) &amp; <span class="number">15</span>,</span><br><span class="line">            e = e * (<span class="number">2</span> - (<span class="number">255</span> &amp; t) * e) &amp; <span class="number">255</span>,</span><br><span class="line">            e = e * (<span class="number">2</span> - ((<span class="number">65535</span> &amp; t) * e &amp; <span class="number">65535</span>)) &amp; <span class="number">65535</span>,</span><br><span class="line">            e = e * (<span class="number">2</span> - t * e % <span class="built_in">this</span>.DV) % <span class="built_in">this</span>.DV,</span><br><span class="line">            e &gt; <span class="number">0</span> ? <span class="built_in">this</span>.DV - e : -e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.m = t,</span><br><span class="line">            <span class="built_in">this</span>.mp = t.invDigit(),</span><br><span class="line">            <span class="built_in">this</span>.mpl = <span class="number">32767</span> &amp; <span class="built_in">this</span>.mp,</span><br><span class="line">            <span class="built_in">this</span>.mph = <span class="built_in">this</span>.mp &gt;&gt; <span class="number">15</span>,</span><br><span class="line">            <span class="built_in">this</span>.um = (<span class="number">1</span> &lt;&lt; t.DB - <span class="number">15</span>) - <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">this</span>.mt2 = <span class="number">2</span> * t.t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">M</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = i();</span><br><span class="line">        <span class="keyword">return</span> t.abs().dlShiftTo(<span class="built_in">this</span>.m.t, r),</span><br><span class="line">            r.divRemTo(<span class="built_in">this</span>.m, <span class="literal">null</span>, r),</span><br><span class="line">            t.s &lt; <span class="number">0</span> &amp;&amp; r.compareTo(e.ZERO) &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.m.subTo(r, r),</span><br><span class="line">            r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">L</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> t.copyTo(e),</span><br><span class="line">            <span class="built_in">this</span>.reduce(e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; t.t &lt;= <span class="built_in">this</span>.mt2;)</span><br><span class="line">            t[t.t++] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; <span class="built_in">this</span>.m.t; ++e) &#123;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">32767</span> &amp; t[e]</span><br><span class="line">                , r = i * <span class="built_in">this</span>.mpl + ((i * <span class="built_in">this</span>.mph + (t[e] &gt;&gt; <span class="number">15</span>) * <span class="built_in">this</span>.mpl &amp; <span class="built_in">this</span>.um) &lt;&lt; <span class="number">15</span>) &amp; t.DM;</span><br><span class="line">            <span class="keyword">for</span> (i = e + <span class="built_in">this</span>.m.t,</span><br><span class="line">                t[i] += <span class="built_in">this</span>.m.am(<span class="number">0</span>, r, t, e, <span class="number">0</span>, <span class="built_in">this</span>.m.t); t[i] &gt;= t.DV;)</span><br><span class="line">                t[i] -= t.DV,</span><br><span class="line">                    t[++i]++</span><br><span class="line">        &#125;</span><br><span class="line">        t.clamp(),</span><br><span class="line">            t.drShiftTo(<span class="built_in">this</span>.m.t, t),</span><br><span class="line">            t.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span> &amp;&amp; t.subTo(<span class="built_in">this</span>.m, t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        t.squareTo(e),</span><br><span class="line">            <span class="built_in">this</span>.reduce(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">H</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        t.multiplyTo(e, i),</span><br><span class="line">            <span class="built_in">this</span>.reduce(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == (<span class="built_in">this</span>.t &gt; <span class="number">0</span> ? <span class="number">1</span> &amp; <span class="built_in">this</span>[<span class="number">0</span>] : <span class="built_in">this</span>.s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params">t, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">4294967295</span> || <span class="number">1</span> &gt; t)</span><br><span class="line">            <span class="keyword">return</span> e.ONE;</span><br><span class="line">        <span class="keyword">var</span> s = i()</span><br><span class="line">            , n = i()</span><br><span class="line">            , o = r.convert(<span class="built_in">this</span>)</span><br><span class="line">            , h = y(t) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (o.copyTo(s); --h &gt;= <span class="number">0</span>;)</span><br><span class="line">            <span class="keyword">if</span> (r.sqrTo(s, n),</span><br><span class="line">                (t &amp; <span class="number">1</span> &lt;&lt; h) &gt; <span class="number">0</span>)</span><br><span class="line">                r.mulTo(n, o, s);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> a = s;</span><br><span class="line">                s = n,</span><br><span class="line">                    n = a</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> r.revert(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i;</span><br><span class="line">        <span class="keyword">return</span> i = <span class="number">256</span> &gt; t || e.isEven() ? <span class="keyword">new</span> A(e) : <span class="keyword">new</span> P(e),</span><br><span class="line">            <span class="built_in">this</span>.exp(t, i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Copyright (c) 2005-2009  Tom Wu</span></span><br><span class="line">    <span class="comment">// All Rights Reserved.</span></span><br><span class="line">    <span class="comment">// See &quot;LICENSE&quot; for details.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.copyTo(t),</span><br><span class="line">            t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">z</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == <span class="built_in">this</span>.t)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>] - <span class="built_in">this</span>.DV;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">this</span>.t)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == <span class="built_in">this</span>.t)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">this</span>.t)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>[<span class="number">1</span>] &amp; (<span class="number">1</span> &lt;&lt; <span class="number">32</span> - <span class="built_in">this</span>.DB) - <span class="number">1</span>) &lt;&lt; <span class="built_in">this</span>.DB | <span class="built_in">this</span>[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == <span class="built_in">this</span>.t ? <span class="built_in">this</span>.s : <span class="built_in">this</span>[<span class="number">0</span>] &lt;&lt; <span class="number">24</span> &gt;&gt; <span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">G</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == <span class="built_in">this</span>.t ? <span class="built_in">this</span>.s : <span class="built_in">this</span>[<span class="number">0</span>] &lt;&lt; <span class="number">16</span> &gt;&gt; <span class="number">16</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.LN2 * <span class="built_in">this</span>.DB / <span class="built_in">Math</span>.log(t))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Y</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? -<span class="number">1</span> : <span class="built_in">this</span>.t &lt;= <span class="number">0</span> || <span class="number">1</span> == <span class="built_in">this</span>.t &amp;&amp; <span class="built_in">this</span>[<span class="number">0</span>] &lt;= <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">W</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == t &amp;&amp; (t = <span class="number">10</span>),</span><br><span class="line">            <span class="number">0</span> == <span class="built_in">this</span>.signum() || <span class="number">2</span> &gt; t || t &gt; <span class="number">36</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">this</span>.chunkSize(t)</span><br><span class="line">            , r = <span class="built_in">Math</span>.pow(t, e)</span><br><span class="line">            , s = c(r)</span><br><span class="line">            , n = i()</span><br><span class="line">            , o = i()</span><br><span class="line">            , h = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">this</span>.divRemTo(s, n, o); n.signum() &gt; <span class="number">0</span>;)</span><br><span class="line">            h = (r + o.intValue()).toString(t).substr(<span class="number">1</span>) + h,</span><br><span class="line">                n.divRemTo(s, n, o);</span><br><span class="line">        <span class="keyword">return</span> o.intValue().toString(t) + h</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Q</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fromInt(<span class="number">0</span>),</span><br><span class="line">            <span class="literal">null</span> == i &amp;&amp; (i = <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="built_in">this</span>.chunkSize(i), s = <span class="built_in">Math</span>.pow(i, r), n = !<span class="number">1</span>, o = <span class="number">0</span>, a = <span class="number">0</span>, u = <span class="number">0</span>; u &lt; t.length; ++u) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = h(t, u);</span><br><span class="line">            <span class="number">0</span> &gt; c ? <span class="string">&quot;-&quot;</span> == t.charAt(u) &amp;&amp; <span class="number">0</span> == <span class="built_in">this</span>.signum() &amp;&amp; (n = !<span class="number">0</span>) : (a = i * a + c,</span><br><span class="line">                ++o &gt;= r &amp;&amp; (<span class="built_in">this</span>.dMultiply(s),</span><br><span class="line">                    <span class="built_in">this</span>.dAddOffset(a, <span class="number">0</span>),</span><br><span class="line">                    o = <span class="number">0</span>,</span><br><span class="line">                    a = <span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        o &gt; <span class="number">0</span> &amp;&amp; (<span class="built_in">this</span>.dMultiply(<span class="built_in">Math</span>.pow(i, o)),</span><br><span class="line">            <span class="built_in">this</span>.dAddOffset(a, <span class="number">0</span>)),</span><br><span class="line">            n &amp;&amp; e.ZERO.subTo(<span class="built_in">this</span>, <span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params">t, i, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;number&quot;</span> == <span class="keyword">typeof</span> i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> &gt; t)</span><br><span class="line">                <span class="built_in">this</span>.fromInt(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">this</span>.fromNumber(t, r),</span><br><span class="line">                    <span class="built_in">this</span>.testBit(t - <span class="number">1</span>) || <span class="built_in">this</span>.bitwiseTo(e.ONE.shiftLeft(t - <span class="number">1</span>), ht, <span class="built_in">this</span>),</span><br><span class="line">                    <span class="built_in">this</span>.isEven() &amp;&amp; <span class="built_in">this</span>.dAddOffset(<span class="number">1</span>, <span class="number">0</span>); !<span class="built_in">this</span>.isProbablePrime(i);)</span><br><span class="line">                    <span class="built_in">this</span>.dAddOffset(<span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="built_in">this</span>.bitLength() &gt; t &amp;&amp; <span class="built_in">this</span>.subTo(e.ONE.shiftLeft(t - <span class="number">1</span>), <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">                , n = <span class="number">7</span> &amp; t;</span><br><span class="line">            s.length = (t &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>,</span><br><span class="line">                i.nextBytes(s),</span><br><span class="line">                n &gt; <span class="number">0</span> ? s[<span class="number">0</span>] &amp;= (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> : s[<span class="number">0</span>] = <span class="number">0</span>,</span><br><span class="line">                <span class="built_in">this</span>.fromString(s, <span class="number">256</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">this</span>.t</span><br><span class="line">            , e = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">        e[<span class="number">0</span>] = <span class="built_in">this</span>.s;</span><br><span class="line">        <span class="keyword">var</span> i, r = <span class="built_in">this</span>.DB - t * <span class="built_in">this</span>.DB % <span class="number">8</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t-- &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (r &lt; <span class="built_in">this</span>.DB &amp;&amp; (i = <span class="built_in">this</span>[t] &gt;&gt; r) != (<span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM) &gt;&gt; r &amp;&amp; (e[s++] = i | <span class="built_in">this</span>.s &lt;&lt; <span class="built_in">this</span>.DB - r); t &gt;= <span class="number">0</span>;)</span><br><span class="line">                <span class="number">8</span> &gt; r ? (i = (<span class="built_in">this</span>[t] &amp; (<span class="number">1</span> &lt;&lt; r) - <span class="number">1</span>) &lt;&lt; <span class="number">8</span> - r,</span><br><span class="line">                    i |= <span class="built_in">this</span>[--t] &gt;&gt; (r += <span class="built_in">this</span>.DB - <span class="number">8</span>)) : (i = <span class="built_in">this</span>[t] &gt;&gt; (r -= <span class="number">8</span>) &amp; <span class="number">255</span>,</span><br><span class="line">                        <span class="number">0</span> &gt;= r &amp;&amp; (r += <span class="built_in">this</span>.DB,</span><br><span class="line">                            --t)),</span><br><span class="line">                    <span class="number">0</span> != (<span class="number">128</span> &amp; i) &amp;&amp; (i |= -<span class="number">256</span>),</span><br><span class="line">                    <span class="number">0</span> == s &amp;&amp; (<span class="number">128</span> &amp; <span class="built_in">this</span>.s) != (<span class="number">128</span> &amp; i) &amp;&amp; ++s,</span><br><span class="line">                    (s &gt; <span class="number">0</span> || i != <span class="built_in">this</span>.s) &amp;&amp; (e[s++] = i);</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">et</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == <span class="built_in">this</span>.compareTo(t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">it</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.compareTo(t) &lt; <span class="number">0</span> ? <span class="built_in">this</span> : t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.compareTo(t) &gt; <span class="number">0</span> ? <span class="built_in">this</span> : t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">st</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r, s, n = <span class="built_in">Math</span>.min(t.t, <span class="built_in">this</span>.t);</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">0</span>; n &gt; r; ++r)</span><br><span class="line">            i[r] = e(<span class="built_in">this</span>[r], t[r]);</span><br><span class="line">        <span class="keyword">if</span> (t.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">            <span class="keyword">for</span> (s = t.s &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                r = n; r &lt; <span class="built_in">this</span>.t; ++r)</span><br><span class="line">                i[r] = e(<span class="built_in">this</span>[r], s);</span><br><span class="line">            i.t = <span class="built_in">this</span>.t</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (s = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                r = n; r &lt; t.t; ++r)</span><br><span class="line">                i[r] = e(s, t[r]);</span><br><span class="line">            i.t = t.t</span><br><span class="line">        &#125;</span><br><span class="line">        i.s = e(<span class="built_in">this</span>.s, t.s),</span><br><span class="line">            i.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t &amp; e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ot</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bitwiseTo(t, nt, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ht</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t | e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">at</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bitwiseTo(t, ht, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ut</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t ^ e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ct</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bitwiseTo(t, ut, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ft</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t &amp; ~e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bitwiseTo(t, ft, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = i(), e = <span class="number">0</span>; e &lt; <span class="built_in">this</span>.t; ++e)</span><br><span class="line">            t[e] = <span class="built_in">this</span>.DM &amp; ~<span class="built_in">this</span>[e];</span><br><span class="line">        <span class="keyword">return</span> t.t = <span class="built_in">this</span>.t,</span><br><span class="line">            t.s = ~<span class="built_in">this</span>.s,</span><br><span class="line">            t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt; t ? <span class="built_in">this</span>.rShiftTo(-t, e) : <span class="built_in">this</span>.lShiftTo(t, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt; t ? <span class="built_in">this</span>.lShiftTo(-t, e) : <span class="built_in">this</span>.rShiftTo(t, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == t)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == (<span class="number">65535</span> &amp; t) &amp;&amp; (t &gt;&gt;= <span class="number">16</span>,</span><br><span class="line">            e += <span class="number">16</span>),</span><br><span class="line">            <span class="number">0</span> == (<span class="number">255</span> &amp; t) &amp;&amp; (t &gt;&gt;= <span class="number">8</span>,</span><br><span class="line">                e += <span class="number">8</span>),</span><br><span class="line">            <span class="number">0</span> == (<span class="number">15</span> &amp; t) &amp;&amp; (t &gt;&gt;= <span class="number">4</span>,</span><br><span class="line">                e += <span class="number">4</span>),</span><br><span class="line">            <span class="number">0</span> == (<span class="number">3</span> &amp; t) &amp;&amp; (t &gt;&gt;= <span class="number">2</span>,</span><br><span class="line">                e += <span class="number">2</span>),</span><br><span class="line">            <span class="number">0</span> == (<span class="number">1</span> &amp; t) &amp;&amp; ++e,</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">yt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; <span class="built_in">this</span>.t; ++t)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">this</span>[t])</span><br><span class="line">                <span class="keyword">return</span> t * <span class="built_in">this</span>.DB + mt(<span class="built_in">this</span>[t]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? <span class="built_in">this</span>.t * <span class="built_in">this</span>.DB : -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; <span class="number">0</span> != t;)</span><br><span class="line">            t &amp;= t - <span class="number">1</span>,</span><br><span class="line">                ++e;</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>, e = <span class="built_in">this</span>.s &amp; <span class="built_in">this</span>.DM, i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.t; ++i)</span><br><span class="line">            t += vt(<span class="built_in">this</span>[i] ^ e);</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Tt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">Math</span>.floor(t / <span class="built_in">this</span>.DB);</span><br><span class="line">        <span class="keyword">return</span> e &gt;= <span class="built_in">this</span>.t ? <span class="number">0</span> != <span class="built_in">this</span>.s : <span class="number">0</span> != (<span class="built_in">this</span>[e] &amp; <span class="number">1</span> &lt;&lt; t % <span class="built_in">this</span>.DB)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">St</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = e.ONE.shiftLeft(t);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bitwiseTo(r, i, r),</span><br><span class="line">            r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Rt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(t, ht)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Et</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(t, ft)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Dt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.changeBit(t, ut)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">wt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="built_in">Math</span>.min(t.t, <span class="built_in">this</span>.t); s &gt; i;)</span><br><span class="line">            r += <span class="built_in">this</span>[i] + t[i],</span><br><span class="line">                e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">        <span class="keyword">if</span> (t.t &lt; <span class="built_in">this</span>.t) &#123;</span><br><span class="line">            <span class="keyword">for</span> (r += t.s; i &lt; <span class="built_in">this</span>.t;)</span><br><span class="line">                r += <span class="built_in">this</span>[i],</span><br><span class="line">                    e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                    r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">            r += <span class="built_in">this</span>.s</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (r += <span class="built_in">this</span>.s; i &lt; t.t;)</span><br><span class="line">                r += t[i],</span><br><span class="line">                    e[i++] = r &amp; <span class="built_in">this</span>.DM,</span><br><span class="line">                    r &gt;&gt;= <span class="built_in">this</span>.DB;</span><br><span class="line">            r += t.s</span><br><span class="line">        &#125;</span><br><span class="line">        e.s = <span class="number">0</span> &gt; r ? -<span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">            r &gt; <span class="number">0</span> ? e[i++] = r : -<span class="number">1</span> &gt; r &amp;&amp; (e[i++] = <span class="built_in">this</span>.DV + r),</span><br><span class="line">            e.t = i,</span><br><span class="line">            e.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">xt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addTo(t, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.subTo(t, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Kt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.multiplyTo(t, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">At</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.squareTo(t),</span><br><span class="line">            t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ut</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.divRemTo(t, e, <span class="literal">null</span>),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ot</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.divRemTo(t, <span class="literal">null</span>, e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Vt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = i()</span><br><span class="line">            , r = i();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.divRemTo(t, e, r),</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Array</span>(e, r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Nt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.t] = <span class="built_in">this</span>.am(<span class="number">0</span>, t - <span class="number">1</span>, <span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.t),</span><br><span class="line">            ++<span class="built_in">this</span>.t,</span><br><span class="line">            <span class="built_in">this</span>.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Jt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != t) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; <span class="built_in">this</span>.t &lt;= e;)</span><br><span class="line">                <span class="built_in">this</span>[<span class="built_in">this</span>.t++] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">this</span>[e] += t; <span class="built_in">this</span>[e] &gt;= <span class="built_in">this</span>.DV;)</span><br><span class="line">                <span class="built_in">this</span>[e] -= <span class="built_in">this</span>.DV,</span><br><span class="line">                    ++e &gt;= <span class="built_in">this</span>.t &amp;&amp; (<span class="built_in">this</span>[<span class="built_in">this</span>.t++] = <span class="number">0</span>),</span><br><span class="line">                    ++<span class="built_in">this</span>[e]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">It</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Pt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Mt</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        t.multiplyTo(e, i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Lt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        t.squareTo(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.exp(t, <span class="keyword">new</span> It)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ct</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.min(<span class="built_in">this</span>.t + t.t, e);</span><br><span class="line">        <span class="keyword">for</span> (i.s = <span class="number">0</span>,</span><br><span class="line">            i.t = r; r &gt; <span class="number">0</span>;)</span><br><span class="line">            i[--r] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> s;</span><br><span class="line">        <span class="keyword">for</span> (s = i.t - <span class="built_in">this</span>.t; s &gt; r; ++r)</span><br><span class="line">            i[r + <span class="built_in">this</span>.t] = <span class="built_in">this</span>.am(<span class="number">0</span>, t[r], i, r, <span class="number">0</span>, <span class="built_in">this</span>.t);</span><br><span class="line">        <span class="keyword">for</span> (s = <span class="built_in">Math</span>.min(t.t, e); s &gt; r; ++r)</span><br><span class="line">            <span class="built_in">this</span>.am(<span class="number">0</span>, t[r], i, r, <span class="number">0</span>, e - r);</span><br><span class="line">        i.clamp()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ht</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        --e;</span><br><span class="line">        <span class="keyword">var</span> r = i.t = <span class="built_in">this</span>.t + t.t - e;</span><br><span class="line">        <span class="keyword">for</span> (i.s = <span class="number">0</span>; --r &gt;= <span class="number">0</span>;)</span><br><span class="line">            i[r] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="built_in">Math</span>.max(e - <span class="built_in">this</span>.t, <span class="number">0</span>); r &lt; t.t; ++r)</span><br><span class="line">            i[<span class="built_in">this</span>.t + r - e] = <span class="built_in">this</span>.am(e - r, t[r], i, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.t + r - e);</span><br><span class="line">        i.clamp(),</span><br><span class="line">            i.drShiftTo(<span class="number">1</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.r2 = i(),</span><br><span class="line">            <span class="built_in">this</span>.q3 = i(),</span><br><span class="line">            e.ONE.dlShiftTo(<span class="number">2</span> * t.t, <span class="built_in">this</span>.r2),</span><br><span class="line">            <span class="built_in">this</span>.mu = <span class="built_in">this</span>.r2.divide(t),</span><br><span class="line">            <span class="built_in">this</span>.m = t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t.s &lt; <span class="number">0</span> || t.t &gt; <span class="number">2</span> * <span class="built_in">this</span>.m.t)</span><br><span class="line">            <span class="keyword">return</span> t.mod(<span class="built_in">this</span>.m);</span><br><span class="line">        <span class="keyword">if</span> (t.compareTo(<span class="built_in">this</span>.m) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        <span class="keyword">var</span> e = i();</span><br><span class="line">        <span class="keyword">return</span> t.copyTo(e),</span><br><span class="line">            <span class="built_in">this</span>.reduce(e),</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ft</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_t</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (t.drShiftTo(<span class="built_in">this</span>.m.t - <span class="number">1</span>, <span class="built_in">this</span>.r2),</span><br><span class="line">            t.t &gt; <span class="built_in">this</span>.m.t + <span class="number">1</span> &amp;&amp; (t.t = <span class="built_in">this</span>.m.t + <span class="number">1</span>,</span><br><span class="line">                t.clamp()),</span><br><span class="line">            <span class="built_in">this</span>.mu.multiplyUpperTo(<span class="built_in">this</span>.r2, <span class="built_in">this</span>.m.t + <span class="number">1</span>, <span class="built_in">this</span>.q3),</span><br><span class="line">            <span class="built_in">this</span>.m.multiplyLowerTo(<span class="built_in">this</span>.q3, <span class="built_in">this</span>.m.t + <span class="number">1</span>, <span class="built_in">this</span>.r2); t.compareTo(<span class="built_in">this</span>.r2) &lt; <span class="number">0</span>;)</span><br><span class="line">            t.dAddOffset(<span class="number">1</span>, <span class="built_in">this</span>.m.t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (t.subTo(<span class="built_in">this</span>.r2, t); t.compareTo(<span class="built_in">this</span>.m) &gt;= <span class="number">0</span>;)</span><br><span class="line">            t.subTo(<span class="built_in">this</span>.m, t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">zt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        t.squareTo(e),</span><br><span class="line">            <span class="built_in">this</span>.reduce(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Zt</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        t.multiplyTo(e, i),</span><br><span class="line">            <span class="built_in">this</span>.reduce(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Gt</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r, s, n = t.bitLength(), o = c(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt;= n)</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        r = <span class="number">18</span> &gt; n ? <span class="number">1</span> : <span class="number">48</span> &gt; n ? <span class="number">3</span> : <span class="number">144</span> &gt; n ? <span class="number">4</span> : <span class="number">768</span> &gt; n ? <span class="number">5</span> : <span class="number">6</span>,</span><br><span class="line">            s = <span class="number">8</span> &gt; n ? <span class="keyword">new</span> A(e) : e.isEven() ? <span class="keyword">new</span> jt(e) : <span class="keyword">new</span> P(e);</span><br><span class="line">        <span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">            , a = <span class="number">3</span></span><br><span class="line">            , u = r - <span class="number">1</span></span><br><span class="line">            , f = (<span class="number">1</span> &lt;&lt; r) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (h[<span class="number">1</span>] = s.convert(<span class="built_in">this</span>),</span><br><span class="line">            r &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> p = i();</span><br><span class="line">            <span class="keyword">for</span> (s.sqrTo(h[<span class="number">1</span>], p); f &gt;= a;)</span><br><span class="line">                h[a] = i(),</span><br><span class="line">                    s.mulTo(p, h[a - <span class="number">2</span>], h[a]),</span><br><span class="line">                    a += <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> l, d, g = t.t - <span class="number">1</span>, m = !<span class="number">0</span>, v = i();</span><br><span class="line">        <span class="keyword">for</span> (n = y(t[g]) - <span class="number">1</span>; g &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (n &gt;= u ? l = t[g] &gt;&gt; n - u &amp; f : (l = (t[g] &amp; (<span class="number">1</span> &lt;&lt; n + <span class="number">1</span>) - <span class="number">1</span>) &lt;&lt; u - n,</span><br><span class="line">                g &gt; <span class="number">0</span> &amp;&amp; (l |= t[g - <span class="number">1</span>] &gt;&gt; <span class="built_in">this</span>.DB + n - u)),</span><br><span class="line">                a = r; <span class="number">0</span> == (<span class="number">1</span> &amp; l);)</span><br><span class="line">                l &gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                    --a;</span><br><span class="line">            <span class="keyword">if</span> ((n -= a) &lt; <span class="number">0</span> &amp;&amp; (n += <span class="built_in">this</span>.DB,</span><br><span class="line">                --g),</span><br><span class="line">                m)</span><br><span class="line">                h[l].copyTo(o),</span><br><span class="line">                    m = !<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (; a &gt; <span class="number">1</span>;)</span><br><span class="line">                    s.sqrTo(o, v),</span><br><span class="line">                        s.sqrTo(v, o),</span><br><span class="line">                        a -= <span class="number">2</span>;</span><br><span class="line">                a &gt; <span class="number">0</span> ? s.sqrTo(o, v) : (d = o,</span><br><span class="line">                    o = v,</span><br><span class="line">                    v = d),</span><br><span class="line">                    s.mulTo(v, h[l], o)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; g &gt;= <span class="number">0</span> &amp;&amp; <span class="number">0</span> == (t[g] &amp; <span class="number">1</span> &lt;&lt; n);)</span><br><span class="line">                s.sqrTo(o, v),</span><br><span class="line">                    d = o,</span><br><span class="line">                    o = v,</span><br><span class="line">                    v = d,</span><br><span class="line">                    --n &lt; <span class="number">0</span> &amp;&amp; (n = <span class="built_in">this</span>.DB - <span class="number">1</span>,</span><br><span class="line">                        --g)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.revert(o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">$t</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? <span class="built_in">this</span>.negate() : <span class="built_in">this</span>.clone()</span><br><span class="line">            , i = t.s &lt; <span class="number">0</span> ? t.negate() : t.clone();</span><br><span class="line">        <span class="keyword">if</span> (e.compareTo(i) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = e;</span><br><span class="line">            e = i,</span><br><span class="line">                i = r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> s = e.getLowestSetBit()</span><br><span class="line">            , n = i.getLowestSetBit();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; n)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">for</span> (n &gt; s &amp;&amp; (n = s),</span><br><span class="line">            n &gt; <span class="number">0</span> &amp;&amp; (e.rShiftTo(n, e),</span><br><span class="line">                i.rShiftTo(n, i)); e.signum() &gt; <span class="number">0</span>;)</span><br><span class="line">            (s = e.getLowestSetBit()) &gt; <span class="number">0</span> &amp;&amp; e.rShiftTo(s, e),</span><br><span class="line">                (s = i.getLowestSetBit()) &gt; <span class="number">0</span> &amp;&amp; i.rShiftTo(s, i),</span><br><span class="line">                e.compareTo(i) &gt;= <span class="number">0</span> ? (e.subTo(i, e),</span><br><span class="line">                    e.rShiftTo(<span class="number">1</span>, e)) : (i.subTo(e, i),</span><br><span class="line">                        i.rShiftTo(<span class="number">1</span>, i));</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; i.lShiftTo(n, i),</span><br><span class="line">            i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Yt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt;= t)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="built_in">this</span>.DV % t</span><br><span class="line">            , i = <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? t - <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.t &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == e)</span><br><span class="line">                i = <span class="built_in">this</span>[<span class="number">0</span>] % t;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="built_in">this</span>.t - <span class="number">1</span>; r &gt;= <span class="number">0</span>; --r)</span><br><span class="line">                    i = (e * i + <span class="built_in">this</span>[r]) % t;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Wt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = t.isEven();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEven() &amp;&amp; i || <span class="number">0</span> == t.signum())</span><br><span class="line">            <span class="keyword">return</span> e.ZERO;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = t.clone(), s = <span class="built_in">this</span>.clone(), n = c(<span class="number">1</span>), o = c(<span class="number">0</span>), h = c(<span class="number">0</span>), a = c(<span class="number">1</span>); <span class="number">0</span> != r.signum();) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r.isEven();)</span><br><span class="line">                r.rShiftTo(<span class="number">1</span>, r),</span><br><span class="line">                    i ? (n.isEven() &amp;&amp; o.isEven() || (n.addTo(<span class="built_in">this</span>, n),</span><br><span class="line">                        o.subTo(t, o)),</span><br><span class="line">                        n.rShiftTo(<span class="number">1</span>, n)) : o.isEven() || o.subTo(t, o),</span><br><span class="line">                    o.rShiftTo(<span class="number">1</span>, o);</span><br><span class="line">            <span class="keyword">for</span> (; s.isEven();)</span><br><span class="line">                s.rShiftTo(<span class="number">1</span>, s),</span><br><span class="line">                    i ? (h.isEven() &amp;&amp; a.isEven() || (h.addTo(<span class="built_in">this</span>, h),</span><br><span class="line">                        a.subTo(t, a)),</span><br><span class="line">                        h.rShiftTo(<span class="number">1</span>, h)) : a.isEven() || a.subTo(t, a),</span><br><span class="line">                    a.rShiftTo(<span class="number">1</span>, a);</span><br><span class="line">            r.compareTo(s) &gt;= <span class="number">0</span> ? (r.subTo(s, r),</span><br><span class="line">                i &amp;&amp; n.subTo(h, n),</span><br><span class="line">                o.subTo(a, o)) : (s.subTo(r, s),</span><br><span class="line">                    i &amp;&amp; h.subTo(n, h),</span><br><span class="line">                    a.subTo(o, a))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> != s.compareTo(e.ONE) ? e.ZERO : a.compareTo(t) &gt;= <span class="number">0</span> ? a.subtract(t) : a.signum() &lt; <span class="number">0</span> ? (a.addTo(t, a),</span><br><span class="line">            a.signum() &lt; <span class="number">0</span> ? a.add(t) : a) : a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Qt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i = <span class="built_in">this</span>.abs();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == i.t &amp;&amp; i[<span class="number">0</span>] &lt;= Ae[Ae.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; Ae.length; ++e)</span><br><span class="line">                <span class="keyword">if</span> (i[<span class="number">0</span>] == Ae[e])</span><br><span class="line">                    <span class="keyword">return</span> !<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i.isEven())</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">1</span>; e &lt; Ae.length;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = Ae[e], s = e + <span class="number">1</span>; s &lt; Ae.length &amp;&amp; Ue &gt; r;)</span><br><span class="line">                r *= Ae[s++];</span><br><span class="line">            <span class="keyword">for</span> (r = i.modInt(r); s &gt; e;)</span><br><span class="line">                <span class="keyword">if</span> (r % Ae[e++] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i.millerRabin(t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Xt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">this</span>.subtract(e.ONE)</span><br><span class="line">            , s = r.getLowestSetBit();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt;= s)</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> n = r.shiftRight(s);</span><br><span class="line">        t = t + <span class="number">1</span> &gt;&gt; <span class="number">1</span>,</span><br><span class="line">            t &gt; Ae.length &amp;&amp; (t = Ae.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = i(), h = <span class="number">0</span>; t &gt; h; ++h) &#123;</span><br><span class="line">            o.fromInt(Ae[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * Ae.length)]);</span><br><span class="line">            <span class="keyword">var</span> a = o.modPow(n, <span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != a.compareTo(e.ONE) &amp;&amp; <span class="number">0</span> != a.compareTo(r)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">1</span>; u++ &lt; s &amp;&amp; <span class="number">0</span> != a.compareTo(r);)</span><br><span class="line">                    <span class="keyword">if</span> (a = a.modPowInt(<span class="number">2</span>, <span class="built_in">this</span>),</span><br><span class="line">                        <span class="number">0</span> == a.compareTo(e.ONE))</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> != a.compareTo(r))</span><br><span class="line">                    <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">te</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.i = <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">this</span>.j = <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">this</span>.S = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ee</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i, r;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; <span class="number">256</span> &gt; e; ++e)</span><br><span class="line">            <span class="built_in">this</span>.S[e] = e;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>,</span><br><span class="line">            e = <span class="number">0</span>; <span class="number">256</span> &gt; e; ++e)</span><br><span class="line">            i = i + <span class="built_in">this</span>.S[e] + t[e % t.length] &amp; <span class="number">255</span>,</span><br><span class="line">                r = <span class="built_in">this</span>.S[e],</span><br><span class="line">                <span class="built_in">this</span>.S[e] = <span class="built_in">this</span>.S[i],</span><br><span class="line">                <span class="built_in">this</span>.S[i] = r;</span><br><span class="line">        <span class="built_in">this</span>.i = <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">this</span>.j = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.i = <span class="built_in">this</span>.i + <span class="number">1</span> &amp; <span class="number">255</span>,</span><br><span class="line">            <span class="built_in">this</span>.j = <span class="built_in">this</span>.j + <span class="built_in">this</span>.S[<span class="built_in">this</span>.i] &amp; <span class="number">255</span>,</span><br><span class="line">            t = <span class="built_in">this</span>.S[<span class="built_in">this</span>.i],</span><br><span class="line">            <span class="built_in">this</span>.S[<span class="built_in">this</span>.i] = <span class="built_in">this</span>.S[<span class="built_in">this</span>.j],</span><br><span class="line">            <span class="built_in">this</span>.S[<span class="built_in">this</span>.j] = t,</span><br><span class="line">            <span class="built_in">this</span>.S[t + <span class="built_in">this</span>.S[<span class="built_in">this</span>.i] &amp; <span class="number">255</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">re</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> te</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">se</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == Oe) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Oe = re(); Je &gt; Ne;) &#123;</span><br><span class="line">                <span class="keyword">var</span> t = <span class="built_in">Math</span>.floor(<span class="number">65536</span> * <span class="built_in">Math</span>.random());</span><br><span class="line">                Ve[Ne++] = <span class="number">255</span> &amp; t</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Oe.init(Ve),</span><br><span class="line">                Ne = <span class="number">0</span>; Ne &lt; Ve.length; ++Ne)</span><br><span class="line">                Ve[Ne] = <span class="number">0</span>;</span><br><span class="line">            Ne = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Oe.next()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ne</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; t.length; ++e)</span><br><span class="line">            t[e] = se()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">oe</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">he</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> e(t, i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ae</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; t.length + <span class="number">11</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">&quot;Message too long for RSA&quot;</span>),</span><br><span class="line">                <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="keyword">new</span> <span class="built_in">Array</span>, s = t.length - <span class="number">1</span>; s &gt;= <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = t.charCodeAt(s--);</span><br><span class="line">            <span class="number">128</span> &gt; n ? r[--i] = n : n &gt; <span class="number">127</span> &amp;&amp; <span class="number">2048</span> &gt; n ? (r[--i] = <span class="number">63</span> &amp; n | <span class="number">128</span>,</span><br><span class="line">                r[--i] = n &gt;&gt; <span class="number">6</span> | <span class="number">192</span>) : (r[--i] = <span class="number">63</span> &amp; n | <span class="number">128</span>,</span><br><span class="line">                    r[--i] = n &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>,</span><br><span class="line">                    r[--i] = n &gt;&gt; <span class="number">12</span> | <span class="number">224</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        r[--i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="keyword">new</span> oe, h = <span class="keyword">new</span> <span class="built_in">Array</span>; i &gt; <span class="number">2</span>;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (h[<span class="number">0</span>] = <span class="number">0</span>; <span class="number">0</span> == h[<span class="number">0</span>];)</span><br><span class="line">                o.nextBytes(h);</span><br><span class="line">            r[--i] = h[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r[--i] = <span class="number">2</span>,</span><br><span class="line">            r[--i] = <span class="number">0</span>,</span><br><span class="line">            <span class="keyword">new</span> e(r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.n = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.e = <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">this</span>.d = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.p = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.q = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.dmp1 = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.dmq1 = <span class="literal">null</span>,</span><br><span class="line">            <span class="built_in">this</span>.coeff = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ce</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="literal">null</span> != t &amp;&amp; <span class="literal">null</span> != e &amp;&amp; t.length &gt; <span class="number">0</span> &amp;&amp; e.length &gt; <span class="number">0</span> ? (<span class="built_in">this</span>.n = he(t, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(e, <span class="number">16</span>)) : <span class="built_in">console</span>.error(<span class="string">&quot;Invalid RSA public key&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.modPowInt(<span class="built_in">this</span>.e, <span class="built_in">this</span>.n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pe</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = ae(t, <span class="built_in">this</span>.n.bitLength() + <span class="number">7</span> &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="built_in">this</span>.doPublic(e);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == i)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> r = i.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == (<span class="number">1</span> &amp; r.length) ? r : <span class="string">&quot;0&quot;</span> + r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">le</span>(<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = t.toByteArray(), r = <span class="number">0</span>; r &lt; i.length &amp;&amp; <span class="number">0</span> == i[r];)</span><br><span class="line">            ++r;</span><br><span class="line">        <span class="keyword">if</span> (i.length - r != e - <span class="number">1</span> || <span class="number">2</span> != i[r])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (++r; <span class="number">0</span> != i[r];)</span><br><span class="line">            <span class="keyword">if</span> (++r &gt;= i.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="string">&quot;&quot;</span>; ++r &lt; i.length;) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="number">255</span> &amp; i[r];</span><br><span class="line">            <span class="number">128</span> &gt; n ? s += <span class="built_in">String</span>.fromCharCode(n) : n &gt; <span class="number">191</span> &amp;&amp; <span class="number">224</span> &gt; n ? (s += <span class="built_in">String</span>.fromCharCode((<span class="number">31</span> &amp; n) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; i[r + <span class="number">1</span>]),</span><br><span class="line">                ++r) : (s += <span class="built_in">String</span>.fromCharCode((<span class="number">15</span> &amp; n) &lt;&lt; <span class="number">12</span> | (<span class="number">63</span> &amp; i[r + <span class="number">1</span>]) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; i[r + <span class="number">2</span>]),</span><br><span class="line">                    r += <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">de</span>(<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">        <span class="literal">null</span> != t &amp;&amp; <span class="literal">null</span> != e &amp;&amp; t.length &gt; <span class="number">0</span> &amp;&amp; e.length &gt; <span class="number">0</span> ? (<span class="built_in">this</span>.n = he(t, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(e, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.d = he(i, <span class="number">16</span>)) : <span class="built_in">console</span>.error(<span class="string">&quot;Invalid RSA private key&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ge</span>(<span class="params">t, e, i, r, s, n, o, h</span>) </span>&#123;</span><br><span class="line">        <span class="literal">null</span> != t &amp;&amp; <span class="literal">null</span> != e &amp;&amp; t.length &gt; <span class="number">0</span> &amp;&amp; e.length &gt; <span class="number">0</span> ? (<span class="built_in">this</span>.n = he(t, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(e, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.d = he(i, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.p = he(r, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.q = he(s, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.dmp1 = he(n, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.dmq1 = he(o, <span class="number">16</span>),</span><br><span class="line">            <span class="built_in">this</span>.coeff = he(h, <span class="number">16</span>)) : <span class="built_in">console</span>.error(<span class="string">&quot;Invalid RSA private key&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">me</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="keyword">new</span> oe</span><br><span class="line">            , s = t &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(i, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="keyword">new</span> e(i, <span class="number">16</span>); ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; <span class="built_in">this</span>.p = <span class="keyword">new</span> e(t - s, <span class="number">1</span>, r),</span><br><span class="line">                <span class="number">0</span> != <span class="built_in">this</span>.p.subtract(e.ONE).gcd(n).compareTo(e.ONE) || !<span class="built_in">this</span>.p.isProbablePrime(<span class="number">10</span>);)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">for</span> (; <span class="built_in">this</span>.q = <span class="keyword">new</span> e(s, <span class="number">1</span>, r),</span><br><span class="line">                <span class="number">0</span> != <span class="built_in">this</span>.q.subtract(e.ONE).gcd(n).compareTo(e.ONE) || !<span class="built_in">this</span>.q.isProbablePrime(<span class="number">10</span>);)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.p.compareTo(<span class="built_in">this</span>.q) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> o = <span class="built_in">this</span>.p;</span><br><span class="line">                <span class="built_in">this</span>.p = <span class="built_in">this</span>.q,</span><br><span class="line">                    <span class="built_in">this</span>.q = o</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> h = <span class="built_in">this</span>.p.subtract(e.ONE)</span><br><span class="line">                , a = <span class="built_in">this</span>.q.subtract(e.ONE)</span><br><span class="line">                , u = h.multiply(a);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == u.gcd(n).compareTo(e.ONE)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.n = <span class="built_in">this</span>.p.multiply(<span class="built_in">this</span>.q),</span><br><span class="line">                    <span class="built_in">this</span>.d = n.modInverse(u),</span><br><span class="line">                    <span class="built_in">this</span>.dmp1 = <span class="built_in">this</span>.d.mod(h),</span><br><span class="line">                    <span class="built_in">this</span>.dmq1 = <span class="built_in">this</span>.d.mod(a),</span><br><span class="line">                    <span class="built_in">this</span>.coeff = <span class="built_in">this</span>.q.modInverse(<span class="built_in">this</span>.p);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ye</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == <span class="built_in">this</span>.p || <span class="literal">null</span> == <span class="built_in">this</span>.q)</span><br><span class="line">            <span class="keyword">return</span> t.modPow(<span class="built_in">this</span>.d, <span class="built_in">this</span>.n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = t.mod(<span class="built_in">this</span>.p).modPow(<span class="built_in">this</span>.dmp1, <span class="built_in">this</span>.p), i = t.mod(<span class="built_in">this</span>.q).modPow(<span class="built_in">this</span>.dmq1, <span class="built_in">this</span>.q); e.compareTo(i) &lt; <span class="number">0</span>;)</span><br><span class="line">            e = e.add(<span class="built_in">this</span>.p);</span><br><span class="line">        <span class="keyword">return</span> e.subtract(i).multiply(<span class="built_in">this</span>.coeff).mod(<span class="built_in">this</span>.p).multiply(<span class="built_in">this</span>.q).add(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ve</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = he(t, <span class="number">16</span>)</span><br><span class="line">            , i = <span class="built_in">this</span>.doPrivate(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> == i ? <span class="literal">null</span> : le(i, <span class="built_in">this</span>.n.bitLength() + <span class="number">7</span> &gt;&gt; <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">be</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i, r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; e + <span class="number">3</span> &lt;= t.length; e += <span class="number">3</span>)</span><br><span class="line">            i = <span class="built_in">parseInt</span>(t.substring(e, e + <span class="number">3</span>), <span class="number">16</span>),</span><br><span class="line">                r += Le.charAt(i &gt;&gt; <span class="number">6</span>) + Le.charAt(<span class="number">63</span> &amp; i);</span><br><span class="line">        <span class="keyword">for</span> (e + <span class="number">1</span> == t.length ? (i = <span class="built_in">parseInt</span>(t.substring(e, e + <span class="number">1</span>), <span class="number">16</span>),</span><br><span class="line">            r += Le.charAt(i &lt;&lt; <span class="number">2</span>)) : e + <span class="number">2</span> == t.length &amp;&amp; (i = <span class="built_in">parseInt</span>(t.substring(e, e + <span class="number">2</span>), <span class="number">16</span>),</span><br><span class="line">                r += Le.charAt(i &gt;&gt; <span class="number">2</span>) + Le.charAt((<span class="number">3</span> &amp; i) &lt;&lt; <span class="number">4</span>)); (<span class="number">3</span> &amp; r.length) &gt; <span class="number">0</span>;)</span><br><span class="line">            r += qe;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Te</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i, r = <span class="string">&quot;&quot;</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; t.length &amp;&amp; t.charAt(e) != qe; ++e)</span><br><span class="line">            v = Le.indexOf(t.charAt(e)),</span><br><span class="line">                v &lt; <span class="number">0</span> || (<span class="number">0</span> == s ? (r += o(v &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                    i = <span class="number">3</span> &amp; v,</span><br><span class="line">                    s = <span class="number">1</span>) : <span class="number">1</span> == s ? (r += o(i &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                        i = <span class="number">15</span> &amp; v,</span><br><span class="line">                        s = <span class="number">2</span>) : <span class="number">2</span> == s ? (r += o(i),</span><br><span class="line">                            r += o(v &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                            i = <span class="number">3</span> &amp; v,</span><br><span class="line">                            s = <span class="number">3</span>) : (r += o(i &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                                r += o(<span class="number">15</span> &amp; v),</span><br><span class="line">                                s = <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> == s &amp;&amp; (r += o(i &lt;&lt; <span class="number">2</span>)),</span><br><span class="line">            r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Copyright (c) 2005  Tom Wu</span></span><br><span class="line">    <span class="comment">// All Rights Reserved.</span></span><br><span class="line">    <span class="comment">// See &quot;LICENSE&quot; for details.</span></span><br><span class="line">    <span class="keyword">var</span> Se, Re = <span class="number">0xdeadbeefcafe</span>, Ee = <span class="number">15715070</span> == (<span class="number">16777215</span> &amp; Re);</span><br><span class="line">    Ee &amp;&amp; <span class="string">&quot;Microsoft Internet Explorer&quot;</span> == navigator.appName ? (e.prototype.am = s,</span><br><span class="line">        Se = <span class="number">30</span>) : Ee &amp;&amp; <span class="string">&quot;Netscape&quot;</span> != navigator.appName ? (e.prototype.am = r,</span><br><span class="line">            Se = <span class="number">26</span>) : (e.prototype.am = n,</span><br><span class="line">                Se = <span class="number">28</span>),</span><br><span class="line">        e.prototype.DB = Se,</span><br><span class="line">        e.prototype.DM = (<span class="number">1</span> &lt;&lt; Se) - <span class="number">1</span>,</span><br><span class="line">        e.prototype.DV = <span class="number">1</span> &lt;&lt; Se;</span><br><span class="line">    <span class="keyword">var</span> De = <span class="number">52</span>;</span><br><span class="line">    e.prototype.FV = <span class="built_in">Math</span>.pow(<span class="number">2</span>, De),</span><br><span class="line">        e.prototype.F1 = De - Se,</span><br><span class="line">        e.prototype.F2 = <span class="number">2</span> * Se - De;</span><br><span class="line">    <span class="keyword">var</span> we, xe, Be = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>, Ke = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">    <span class="keyword">for</span> (we = <span class="string">&quot;0&quot;</span>.charCodeAt(<span class="number">0</span>),</span><br><span class="line">        xe = <span class="number">0</span>; <span class="number">9</span> &gt;= xe; ++xe)</span><br><span class="line">        Ke[we++] = xe;</span><br><span class="line">    <span class="keyword">for</span> (we = <span class="string">&quot;a&quot;</span>.charCodeAt(<span class="number">0</span>),</span><br><span class="line">        xe = <span class="number">10</span>; <span class="number">36</span> &gt; xe; ++xe)</span><br><span class="line">        Ke[we++] = xe;</span><br><span class="line">    <span class="keyword">for</span> (we = <span class="string">&quot;A&quot;</span>.charCodeAt(<span class="number">0</span>),</span><br><span class="line">        xe = <span class="number">10</span>; <span class="number">36</span> &gt; xe; ++xe)</span><br><span class="line">        Ke[we++] = xe;</span><br><span class="line">    A.prototype.convert = U,</span><br><span class="line">        A.prototype.revert = O,</span><br><span class="line">        A.prototype.reduce = V,</span><br><span class="line">        A.prototype.mulTo = N,</span><br><span class="line">        A.prototype.sqrTo = J,</span><br><span class="line">        P.prototype.convert = M,</span><br><span class="line">        P.prototype.revert = L,</span><br><span class="line">        P.prototype.reduce = q,</span><br><span class="line">        P.prototype.mulTo = H,</span><br><span class="line">        P.prototype.sqrTo = C,</span><br><span class="line">        e.prototype.copyTo = a,</span><br><span class="line">        e.prototype.fromInt = u,</span><br><span class="line">        e.prototype.fromString = f,</span><br><span class="line">        e.prototype.clamp = p,</span><br><span class="line">        e.prototype.dlShiftTo = T,</span><br><span class="line">        e.prototype.drShiftTo = S,</span><br><span class="line">        e.prototype.lShiftTo = R,</span><br><span class="line">        e.prototype.rShiftTo = E,</span><br><span class="line">        e.prototype.subTo = D,</span><br><span class="line">        e.prototype.multiplyTo = w,</span><br><span class="line">        e.prototype.squareTo = x,</span><br><span class="line">        e.prototype.divRemTo = B,</span><br><span class="line">        e.prototype.invDigit = I,</span><br><span class="line">        e.prototype.isEven = j,</span><br><span class="line">        e.prototype.exp = k,</span><br><span class="line">        e.prototype.toString = l,</span><br><span class="line">        e.prototype.negate = d,</span><br><span class="line">        e.prototype.abs = g,</span><br><span class="line">        e.prototype.compareTo = m,</span><br><span class="line">        e.prototype.bitLength = b,</span><br><span class="line">        e.prototype.mod = K,</span><br><span class="line">        e.prototype.modPowInt = F,</span><br><span class="line">        e.ZERO = c(<span class="number">0</span>),</span><br><span class="line">        e.ONE = c(<span class="number">1</span>),</span><br><span class="line">        It.prototype.convert = Pt,</span><br><span class="line">        It.prototype.revert = Pt,</span><br><span class="line">        It.prototype.mulTo = Mt,</span><br><span class="line">        It.prototype.sqrTo = Lt,</span><br><span class="line">        jt.prototype.convert = kt,</span><br><span class="line">        jt.prototype.revert = Ft,</span><br><span class="line">        jt.prototype.reduce = _t,</span><br><span class="line">        jt.prototype.mulTo = Zt,</span><br><span class="line">        jt.prototype.sqrTo = zt;</span><br><span class="line">    <span class="keyword">var</span> Ae = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>, <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>, <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>, <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>, <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>]</span><br><span class="line">        , Ue = (<span class="number">1</span> &lt;&lt; <span class="number">26</span>) / Ae[Ae.length - <span class="number">1</span>];</span><br><span class="line">    e.prototype.chunkSize = $,</span><br><span class="line">        e.prototype.toRadix = W,</span><br><span class="line">        e.prototype.fromRadix = Q,</span><br><span class="line">        e.prototype.fromNumber = X,</span><br><span class="line">        e.prototype.bitwiseTo = st,</span><br><span class="line">        e.prototype.changeBit = St,</span><br><span class="line">        e.prototype.addTo = wt,</span><br><span class="line">        e.prototype.dMultiply = Nt,</span><br><span class="line">        e.prototype.dAddOffset = Jt,</span><br><span class="line">        e.prototype.multiplyLowerTo = Ct,</span><br><span class="line">        e.prototype.multiplyUpperTo = Ht,</span><br><span class="line">        e.prototype.modInt = Yt,</span><br><span class="line">        e.prototype.millerRabin = Xt,</span><br><span class="line">        e.prototype.clone = _,</span><br><span class="line">        e.prototype.intValue = z,</span><br><span class="line">        e.prototype.byteValue = Z,</span><br><span class="line">        e.prototype.shortValue = G,</span><br><span class="line">        e.prototype.signum = Y,</span><br><span class="line">        e.prototype.toByteArray = tt,</span><br><span class="line">        e.prototype.equals = et,</span><br><span class="line">        e.prototype.min = it,</span><br><span class="line">        e.prototype.max = rt,</span><br><span class="line">        e.prototype.and = ot,</span><br><span class="line">        e.prototype.or = at,</span><br><span class="line">        e.prototype.xor = ct,</span><br><span class="line">        e.prototype.andNot = pt,</span><br><span class="line">        e.prototype.not = lt,</span><br><span class="line">        e.prototype.shiftLeft = dt,</span><br><span class="line">        e.prototype.shiftRight = gt,</span><br><span class="line">        e.prototype.getLowestSetBit = yt,</span><br><span class="line">        e.prototype.bitCount = bt,</span><br><span class="line">        e.prototype.testBit = Tt,</span><br><span class="line">        e.prototype.setBit = Rt,</span><br><span class="line">        e.prototype.clearBit = Et,</span><br><span class="line">        e.prototype.flipBit = Dt,</span><br><span class="line">        e.prototype.add = xt,</span><br><span class="line">        e.prototype.subtract = Bt,</span><br><span class="line">        e.prototype.multiply = Kt,</span><br><span class="line">        e.prototype.divide = Ut,</span><br><span class="line">        e.prototype.remainder = Ot,</span><br><span class="line">        e.prototype.divideAndRemainder = Vt,</span><br><span class="line">        e.prototype.modPow = Gt,</span><br><span class="line">        e.prototype.modInverse = Wt,</span><br><span class="line">        e.prototype.pow = qt,</span><br><span class="line">        e.prototype.gcd = $t,</span><br><span class="line">        e.prototype.isProbablePrime = Qt,</span><br><span class="line">        e.prototype.square = At,</span><br><span class="line">        te.prototype.init = ee,</span><br><span class="line">        te.prototype.next = ie;</span><br><span class="line">    <span class="keyword">var</span> Oe, Ve, Ne, Je = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == Ve) &#123;</span><br><span class="line">        Ve = <span class="keyword">new</span> <span class="built_in">Array</span>,</span><br><span class="line">            Ne = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> Ie;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.crypto &amp;&amp; <span class="built_in">window</span>.crypto.getRandomValues) &#123;</span><br><span class="line">            <span class="keyword">var</span> Pe = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">256</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">window</span>.crypto.getRandomValues(Pe),</span><br><span class="line">                Ie = <span class="number">0</span>; Ie &lt; Pe.length; ++Ie)</span><br><span class="line">                Ve[Ne++] = <span class="number">255</span> &amp; Pe[Ie]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> Me = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.count = <span class="built_in">this</span>.count || <span class="number">0</span>,</span><br><span class="line">                <span class="built_in">this</span>.count &gt;= <span class="number">256</span> || Ne &gt;= Je)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">void</span> (<span class="built_in">window</span>.removeEventListener ? <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, Me, !<span class="number">1</span>) : <span class="built_in">window</span>.detachEvent &amp;&amp; <span class="built_in">window</span>.detachEvent(<span class="string">&quot;onmousemove&quot;</span>, Me));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> e = t.x + t.y;</span><br><span class="line">                Ve[Ne++] = <span class="number">255</span> &amp; e,</span><br><span class="line">                    <span class="built_in">this</span>.count += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (i) &#123; &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener ? <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, Me, !<span class="number">1</span>) : <span class="built_in">window</span>.attachEvent &amp;&amp; <span class="built_in">window</span>.attachEvent(<span class="string">&quot;onmousemove&quot;</span>, Me)</span><br><span class="line">    &#125;</span><br><span class="line">    oe.prototype.nextBytes = ne,</span><br><span class="line">        ue.prototype.doPublic = fe,</span><br><span class="line">        ue.prototype.setPublic = ce,</span><br><span class="line">        ue.prototype.encrypt = pe,</span><br><span class="line">        ue.prototype.doPrivate = ye,</span><br><span class="line">        ue.prototype.setPrivate = de,</span><br><span class="line">        ue.prototype.setPrivateEx = ge,</span><br><span class="line">        ue.prototype.generate = me,</span><br><span class="line">        ue.prototype.decrypt = ve,</span><br><span class="line">        <span class="comment">// Copyright (c) 2011  Kevin M Burns Jr.</span></span><br><span class="line">        <span class="comment">// All Rights Reserved.</span></span><br><span class="line">        <span class="comment">// See &quot;LICENSE&quot; for details.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Extension to jsbn which adds facilities for asynchronous RSA key generation</span></span><br><span class="line">        <span class="comment">// Primarily created to avoid execution timeout on mobile devices</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// http://www-cs-students.stanford.edu/~tjw/jsbn/</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// ---</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span> (<span class="params">t, r, s</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> n = <span class="keyword">new</span> oe</span><br><span class="line">                    , o = t &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(r, <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">var</span> h = <span class="keyword">new</span> e(r, <span class="number">16</span>)</span><br><span class="line">                    , a = <span class="built_in">this</span></span><br><span class="line">                    , u = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (a.p.compareTo(a.q) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> t = a.p;</span><br><span class="line">                                a.p = a.q,</span><br><span class="line">                                    a.q = t</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">var</span> i = a.p.subtract(e.ONE)</span><br><span class="line">                                , r = a.q.subtract(e.ONE)</span><br><span class="line">                                , n = i.multiply(r);</span><br><span class="line">                            <span class="number">0</span> == n.gcd(h).compareTo(e.ONE) ? (a.n = a.p.multiply(a.q),</span><br><span class="line">                                a.d = h.modInverse(n),</span><br><span class="line">                                a.dmp1 = a.d.mod(i),</span><br><span class="line">                                a.dmq1 = a.d.mod(r),</span><br><span class="line">                                a.coeff = a.q.modInverse(a.p),</span><br><span class="line">                                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                    s()</span><br><span class="line">                                &#125;, <span class="number">0</span>)) : <span class="built_in">setTimeout</span>(u, <span class="number">0</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                            , c = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                a.q = i(),</span><br><span class="line">                                    a.q.fromNumberAsync(o, <span class="number">1</span>, n, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                        a.q.subtract(e.ONE).gcda(h, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                                            <span class="number">0</span> == t.compareTo(e.ONE) &amp;&amp; a.q.isProbablePrime(<span class="number">10</span>) ? <span class="built_in">setTimeout</span>(r, <span class="number">0</span>) : <span class="built_in">setTimeout</span>(c, <span class="number">0</span>)</span><br><span class="line">                                        &#125;)</span><br><span class="line">                                    &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                            , f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                a.p = i(),</span><br><span class="line">                                    a.p.fromNumberAsync(t - o, <span class="number">1</span>, n, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                        a.p.subtract(e.ONE).gcda(h, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                                            <span class="number">0</span> == t.compareTo(e.ONE) &amp;&amp; a.p.isProbablePrime(<span class="number">10</span>) ? <span class="built_in">setTimeout</span>(c, <span class="number">0</span>) : <span class="built_in">setTimeout</span>(f, <span class="number">0</span>)</span><br><span class="line">                                        &#125;)</span><br><span class="line">                                    &#125;)</span><br><span class="line">                            &#125;;</span><br><span class="line">                        <span class="built_in">setTimeout</span>(f, <span class="number">0</span>)</span><br><span class="line">                    &#125;;</span><br><span class="line">                <span class="built_in">setTimeout</span>(u, <span class="number">0</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            ue.prototype.generateAsync = t;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i = <span class="built_in">this</span>.s &lt; <span class="number">0</span> ? <span class="built_in">this</span>.negate() : <span class="built_in">this</span>.clone()</span><br><span class="line">                    , r = t.s &lt; <span class="number">0</span> ? t.negate() : t.clone();</span><br><span class="line">                <span class="keyword">if</span> (i.compareTo(r) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = i;</span><br><span class="line">                    i = r,</span><br><span class="line">                        r = s</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> n = i.getLowestSetBit()</span><br><span class="line">                    , o = r.getLowestSetBit();</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &gt; o)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">void</span> e(i);</span><br><span class="line">                o &gt; n &amp;&amp; (o = n),</span><br><span class="line">                    o &gt; <span class="number">0</span> &amp;&amp; (i.rShiftTo(o, i),</span><br><span class="line">                        r.rShiftTo(o, r));</span><br><span class="line">                <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    (n = i.getLowestSetBit()) &gt; <span class="number">0</span> &amp;&amp; i.rShiftTo(n, i),</span><br><span class="line">                        (n = r.getLowestSetBit()) &gt; <span class="number">0</span> &amp;&amp; r.rShiftTo(n, r),</span><br><span class="line">                        i.compareTo(r) &gt;= <span class="number">0</span> ? (i.subTo(r, i),</span><br><span class="line">                            i.rShiftTo(<span class="number">1</span>, i)) : (r.subTo(i, r),</span><br><span class="line">                                r.rShiftTo(<span class="number">1</span>, r)),</span><br><span class="line">                        i.signum() &gt; <span class="number">0</span> ? <span class="built_in">setTimeout</span>(h, <span class="number">0</span>) : (o &gt; <span class="number">0</span> &amp;&amp; r.lShiftTo(o, r),</span><br><span class="line">                            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                e(r)</span><br><span class="line">                            &#125;, <span class="number">0</span>))</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">setTimeout</span>(h, <span class="number">10</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            e.prototype.gcda = r;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="function"><span class="keyword">function</span> (<span class="params">t, i, r, s</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;number&quot;</span> == <span class="keyword">typeof</span> i)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">2</span> &gt; t)</span><br><span class="line">                        <span class="built_in">this</span>.fromInt(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.fromNumber(t, r),</span><br><span class="line">                            <span class="built_in">this</span>.testBit(t - <span class="number">1</span>) || <span class="built_in">this</span>.bitwiseTo(e.ONE.shiftLeft(t - <span class="number">1</span>), ht, <span class="built_in">this</span>),</span><br><span class="line">                            <span class="built_in">this</span>.isEven() &amp;&amp; <span class="built_in">this</span>.dAddOffset(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">var</span> n = <span class="built_in">this</span></span><br><span class="line">                            , o = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                n.dAddOffset(<span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">                                    n.bitLength() &gt; t &amp;&amp; n.subTo(e.ONE.shiftLeft(t - <span class="number">1</span>), n),</span><br><span class="line">                                    n.isProbablePrime(i) ? <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                        s()</span><br><span class="line">                                    &#125;, <span class="number">0</span>) : <span class="built_in">setTimeout</span>(o, <span class="number">0</span>)</span><br><span class="line">                            &#125;;</span><br><span class="line">                        <span class="built_in">setTimeout</span>(o, <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">                        , a = <span class="number">7</span> &amp; t;</span><br><span class="line">                    h.length = (t &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>,</span><br><span class="line">                        i.nextBytes(h),</span><br><span class="line">                        a &gt; <span class="number">0</span> ? h[<span class="number">0</span>] &amp;= (<span class="number">1</span> &lt;&lt; a) - <span class="number">1</span> : h[<span class="number">0</span>] = <span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.fromString(h, <span class="number">256</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            e.prototype.fromNumberAsync = s</span><br><span class="line">        &#125;();</span><br><span class="line">    <span class="keyword">var</span> Le = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">        , qe = <span class="string">&quot;=&quot;</span></span><br><span class="line">        , Ce = Ce || &#123;&#125;;</span><br><span class="line">    Ce.env = Ce.env || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> He = Ce</span><br><span class="line">        , je = <span class="built_in">Object</span>.prototype</span><br><span class="line">        , ke = <span class="string">&quot;[object Function]&quot;</span></span><br><span class="line">        , Fe = [<span class="string">&quot;toString&quot;</span>, <span class="string">&quot;valueOf&quot;</span>];</span><br><span class="line">    Ce.env.parseUA = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e, i = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">parseFloat</span>(t.replace(<span class="regexp">/\./g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> == e++ ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;.&quot;</span></span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;, r = navigator, s = &#123;</span><br><span class="line">            <span class="attr">ie</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">opera</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">gecko</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">webkit</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">chrome</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">mobile</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">air</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">ipad</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">iphone</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">ipod</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">ios</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">android</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">webos</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">caja</span>: r &amp;&amp; r.cajaVersion,</span><br><span class="line">            <span class="attr">secure</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">os</span>: <span class="literal">null</span></span><br><span class="line">        &#125;, n = t || navigator &amp;&amp; navigator.userAgent, o = <span class="built_in">window</span> &amp;&amp; <span class="built_in">window</span>.location, h = o &amp;&amp; o.href;</span><br><span class="line">        <span class="keyword">return</span> s.secure = h &amp;&amp; <span class="number">0</span> === h.toLowerCase().indexOf(<span class="string">&quot;https&quot;</span>),</span><br><span class="line">            n &amp;&amp; (<span class="regexp">/windows|win32/i</span>.test(n) ? s.os = <span class="string">&quot;windows&quot;</span> : <span class="regexp">/macintosh/i</span>.test(n) ? s.os = <span class="string">&quot;macintosh&quot;</span> : <span class="regexp">/rhino/i</span>.test(n) &amp;&amp; (s.os = <span class="string">&quot;rhino&quot;</span>),</span><br><span class="line">                <span class="regexp">/KHTML/</span>.test(n) &amp;&amp; (s.webkit = <span class="number">1</span>),</span><br><span class="line">                e = n.match(<span class="regexp">/AppleWebKit\/([^\s]*)/</span>),</span><br><span class="line">                e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (s.webkit = i(e[<span class="number">1</span>]),</span><br><span class="line">                    <span class="regexp">/ Mobile\//</span>.test(n) ? (s.mobile = <span class="string">&quot;Apple&quot;</span>,</span><br><span class="line">                        e = n.match(<span class="regexp">/OS ([^\s]*)/</span>),</span><br><span class="line">                        e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (e = i(e[<span class="number">1</span>].replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;.&quot;</span>))),</span><br><span class="line">                        s.ios = e,</span><br><span class="line">                        s.ipad = s.ipod = s.iphone = <span class="number">0</span>,</span><br><span class="line">                        e = n.match(<span class="regexp">/iPad|iPod|iPhone/</span>),</span><br><span class="line">                        e &amp;&amp; e[<span class="number">0</span>] &amp;&amp; (s[e[<span class="number">0</span>].toLowerCase()] = s.ios)) : (e = n.match(<span class="regexp">/NokiaN[^\/]*|Android \d\.\d|webOS\/\d\.\d/</span>),</span><br><span class="line">                            e &amp;&amp; (s.mobile = e[<span class="number">0</span>]),</span><br><span class="line">                            <span class="regexp">/webOS/</span>.test(n) &amp;&amp; (s.mobile = <span class="string">&quot;WebOS&quot;</span>,</span><br><span class="line">                                e = n.match(<span class="regexp">/webOS\/([^\s]*);/</span>),</span><br><span class="line">                                e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (s.webos = i(e[<span class="number">1</span>]))),</span><br><span class="line">                            <span class="regexp">/ Android/</span>.test(n) &amp;&amp; (s.mobile = <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">                                e = n.match(<span class="regexp">/Android ([^\s]*);/</span>),</span><br><span class="line">                                e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (s.android = i(e[<span class="number">1</span>])))),</span><br><span class="line">                    e = n.match(<span class="regexp">/Chrome\/([^\s]*)/</span>),</span><br><span class="line">                    e &amp;&amp; e[<span class="number">1</span>] ? s.chrome = i(e[<span class="number">1</span>]) : (e = n.match(<span class="regexp">/AdobeAIR\/([^\s]*)/</span>),</span><br><span class="line">                        e &amp;&amp; (s.air = e[<span class="number">0</span>]))),</span><br><span class="line">                s.webkit || (e = n.match(<span class="regexp">/Opera[\s\/]([^\s]*)/</span>),</span><br><span class="line">                    e &amp;&amp; e[<span class="number">1</span>] ? (s.opera = i(e[<span class="number">1</span>]),</span><br><span class="line">                        e = n.match(<span class="regexp">/Version\/([^\s]*)/</span>),</span><br><span class="line">                        e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (s.opera = i(e[<span class="number">1</span>])),</span><br><span class="line">                        e = n.match(<span class="regexp">/Opera Mini[^;]*/</span>),</span><br><span class="line">                        e &amp;&amp; (s.mobile = e[<span class="number">0</span>])) : (e = n.match(<span class="regexp">/MSIE\s([^;]*)/</span>),</span><br><span class="line">                            e &amp;&amp; e[<span class="number">1</span>] ? s.ie = i(e[<span class="number">1</span>]) : (e = n.match(<span class="regexp">/Gecko\/([^\s]*)/</span>),</span><br><span class="line">                                e &amp;&amp; (s.gecko = <span class="number">1</span>,</span><br><span class="line">                                    e = n.match(<span class="regexp">/rv:([^\s\)]*)/</span>),</span><br><span class="line">                                    e &amp;&amp; e[<span class="number">1</span>] &amp;&amp; (s.gecko = i(e[<span class="number">1</span>]))))))),</span><br><span class="line">            s</span><br><span class="line">    &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.env.ua = Ce.env.parseUA(),</span><br><span class="line">        Ce.isFunction = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> t || je.toString.apply(t) === ke</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce._IEEnumFix = Ce.env.ua.ie ? <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i, r, s;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Fe.length; i += <span class="number">1</span>)</span><br><span class="line">                r = Fe[i],</span><br><span class="line">                    s = e[r],</span><br><span class="line">                    He.isFunction(s) &amp;&amp; s != je[r] &amp;&amp; (t[r] = s)</span><br><span class="line">        &#125;</span><br><span class="line">            : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e || !t)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;extend failed, please check that all dependencies are included.&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> r, s = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">            <span class="keyword">if</span> (s.prototype = e.prototype,</span><br><span class="line">                t.prototype = <span class="keyword">new</span> s,</span><br><span class="line">                t.prototype.constructor = t,</span><br><span class="line">                t.superclass = e.prototype,</span><br><span class="line">                e.prototype.constructor == je.constructor &amp;&amp; (e.prototype.constructor = e),</span><br><span class="line">                i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (r <span class="keyword">in</span> i)</span><br><span class="line">                    He.hasOwnProperty(i, r) &amp;&amp; (t.prototype[r] = i[r]);</span><br><span class="line">                He._IEEnumFix(t.prototype, i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * asn1.js - ASN.1 DER encoder classes</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Copyright (c) 2013 Kenji Urushima (kenji.urushima@gmail.com)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This software is licensed under the terms of the MIT License.</span></span><br><span class="line"><span class="comment">     * http://kjur.github.com/jsrsasign/license</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The above copyright and license notice shall be </span></span><br><span class="line"><span class="comment">     * included in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@fileOverview</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@name <span class="variable">asn1</span></span>-1.0.js</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author </span>Kenji Urushima kenji.urushima<span class="doctag">@gmail</span>.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version </span>1.0.2 (2013-May-30)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since </span>2.1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@license </span>&lt;a href=&quot;http://kjur.github.io/jsrsasign/license/&quot;&gt;MIT License&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> KJUR &amp;&amp; KJUR || (KJUR = &#123;&#125;),</span><br><span class="line">        <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> KJUR.asn1 &amp;&amp; KJUR.asn1 || (KJUR.asn1 = &#123;&#125;),</span><br><span class="line">        KJUR.asn1.ASN1Util = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.integerToByteHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> e = t.toString(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">return</span> e.length % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; (e = <span class="string">&quot;0&quot;</span> + e),</span><br><span class="line">                    e</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.bigIntToMinTwosComplementsHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = t.toString(<span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span> != i.substr(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                        i.length % <span class="number">2</span> == <span class="number">1</span> ? i = <span class="string">&quot;0&quot;</span> + i : i.match(<span class="regexp">/^[0-7]/</span>) || (i = <span class="string">&quot;00&quot;</span> + i);</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> r = i.substr(<span class="number">1</span>)</span><br><span class="line">                            , s = r.length;</span><br><span class="line">                        s % <span class="number">2</span> == <span class="number">1</span> ? s += <span class="number">1</span> : i.match(<span class="regexp">/^[0-7]/</span>) || (s += <span class="number">2</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="string">&quot;&quot;</span>, o = <span class="number">0</span>; s &gt; o; o++)</span><br><span class="line">                            n += <span class="string">&quot;f&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> h = <span class="keyword">new</span> e(n, <span class="number">16</span>)</span><br><span class="line">                            , a = h.xor(t).add(e.ONE);</span><br><span class="line">                        i = a.toString(<span class="number">16</span>).replace(<span class="regexp">/^-/</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getPEMStringFromHex = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = CryptoJS.enc.Hex.parse(t)</span><br><span class="line">                        , r = CryptoJS.enc.Base64.stringify(i)</span><br><span class="line">                        , s = r.replace(<span class="regexp">/(.&#123;64&#125;)/g</span>, <span class="string">&quot;$1\r\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> s = s.replace(<span class="regexp">/\r\n$/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">                        <span class="string">&quot;-----BEGIN &quot;</span> + e + <span class="string">&quot;-----\r\n&quot;</span> + s + <span class="string">&quot;\r\n-----END &quot;</span> + e + <span class="string">&quot;-----\r\n&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        KJUR.asn1.ASN1Object = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.getLengthHexFromValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">this</span>.hV || <span class="literal">null</span> == <span class="built_in">this</span>.hV)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;this.hV is null or undefined.&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.hV.length % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;value hex must be even length: n=&quot;</span> + t.length + <span class="string">&quot;,v=&quot;</span> + <span class="built_in">this</span>.hV;</span><br><span class="line">                <span class="keyword">var</span> e = <span class="built_in">this</span>.hV.length / <span class="number">2</span></span><br><span class="line">                    , i = e.toString(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">if</span> (i.length % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; (i = <span class="string">&quot;0&quot;</span> + i),</span><br><span class="line">                    <span class="number">128</span> &gt; e)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                <span class="keyword">var</span> r = i.length / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (r &gt; <span class="number">15</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;ASN.1 length too long to represent by 8x: n = &quot;</span> + e.toString(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">var</span> s = <span class="number">128</span> + r;</span><br><span class="line">                <span class="keyword">return</span> s.toString(<span class="number">16</span>) + i</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getEncodedHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="literal">null</span> == <span class="built_in">this</span>.hTLV || <span class="built_in">this</span>.isModified) &amp;&amp; (<span class="built_in">this</span>.hV = <span class="built_in">this</span>.getFreshValueHex(),</span><br><span class="line">                        <span class="built_in">this</span>.hL = <span class="built_in">this</span>.getLengthHexFromValue(),</span><br><span class="line">                        <span class="built_in">this</span>.hTLV = <span class="built_in">this</span>.hT + <span class="built_in">this</span>.hL + <span class="built_in">this</span>.hV,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">1</span>),</span><br><span class="line">                        <span class="built_in">this</span>.hTLV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.getEncodedHex(),</span><br><span class="line">                        <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        KJUR.asn1.DERAbstractString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERAbstractString.superclass.constructor.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.getString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.s</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.s = t,</span><br><span class="line">                        <span class="built_in">this</span>.hV = stohex(<span class="built_in">this</span>.s)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setStringHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.s = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.str ? <span class="built_in">this</span>.setString(t.str) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex &amp;&amp; <span class="built_in">this</span>.setStringHex(t.hex))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERAbstractTime = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERAbstractTime.superclass.constructor.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.localDateToUTC = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                utc = t.getTime() + <span class="number">6e4</span> * t.getTimezoneOffset();</span><br><span class="line">                <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Date</span>(utc);</span><br><span class="line">                <span class="keyword">return</span> e</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.formatDate = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = <span class="built_in">this</span>.zeroPadding</span><br><span class="line">                        , r = <span class="built_in">this</span>.localDateToUTC(t)</span><br><span class="line">                        , s = <span class="built_in">String</span>(r.getFullYear());</span><br><span class="line">                    <span class="string">&quot;utc&quot;</span> == e &amp;&amp; (s = s.substr(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">var</span> n = i(<span class="built_in">String</span>(r.getMonth() + <span class="number">1</span>), <span class="number">2</span>)</span><br><span class="line">                        , o = i(<span class="built_in">String</span>(r.getDate()), <span class="number">2</span>)</span><br><span class="line">                        , h = i(<span class="built_in">String</span>(r.getHours()), <span class="number">2</span>)</span><br><span class="line">                        , a = i(<span class="built_in">String</span>(r.getMinutes()), <span class="number">2</span>)</span><br><span class="line">                        , u = i(<span class="built_in">String</span>(r.getSeconds()), <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">return</span> s + n + o + h + a + u + <span class="string">&quot;Z&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.zeroPadding = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> t.length &gt;= e ? t : <span class="keyword">new</span> <span class="built_in">Array</span>(e - t.length + <span class="number">1</span>).join(<span class="string">&quot;0&quot;</span>) + t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.s</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.s = t,</span><br><span class="line">                        <span class="built_in">this</span>.hV = stohex(<span class="built_in">this</span>.s)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setByDateValue = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, i, r, s, n</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(t, e - <span class="number">1</span>, i, r, s, n, <span class="number">0</span>));</span><br><span class="line">                    <span class="built_in">this</span>.setByDate(o)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERAbstractStructured = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERAbstractString.superclass.constructor.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.setByASN1ObjectArray = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                    <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                    <span class="built_in">this</span>.asn1Array = t</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.appendASN1Object = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.asn1Array.push(t)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.asn1Array = <span class="keyword">new</span> <span class="built_in">Array</span>,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.array &amp;&amp; (<span class="built_in">this</span>.asn1Array = t.array)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERBoolean = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERBoolean.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;01&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.hTLV = <span class="string">&quot;0101ff&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERInteger = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERInteger.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;02&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.setByBigInteger = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setByInteger = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = <span class="keyword">new</span> e(<span class="built_in">String</span>(t), <span class="number">10</span>);</span><br><span class="line">                    <span class="built_in">this</span>.setByBigInteger(i)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setValueHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hV = t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.bigint ? <span class="built_in">this</span>.setByBigInteger(t.bigint) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t[<span class="string">&quot;int&quot;</span>] ? <span class="built_in">this</span>.setByInteger(t[<span class="string">&quot;int&quot;</span>]) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex &amp;&amp; <span class="built_in">this</span>.setValueHex(t.hex))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERBitString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERBitString.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;03&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.setHexValueIncludingUnusedBits = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setUnusedBitsAndHexValue = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> &gt; t || t &gt; <span class="number">7</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&quot;unused bits shall be from 0 to 7: u = &quot;</span> + t;</span><br><span class="line">                    <span class="keyword">var</span> i = <span class="string">&quot;0&quot;</span> + t;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = i + e</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setByBinaryString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    t = t.replace(<span class="regexp">/0+$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="number">8</span> - t.length % <span class="number">8</span>;</span><br><span class="line">                    <span class="number">8</span> == e &amp;&amp; (e = <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; e &gt;= i; i++)</span><br><span class="line">                        t += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.length - <span class="number">1</span>; i += <span class="number">8</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> s = t.substr(i, <span class="number">8</span>)</span><br><span class="line">                            , n = <span class="built_in">parseInt</span>(s, <span class="number">2</span>).toString(<span class="number">16</span>);</span><br><span class="line">                        <span class="number">1</span> == n.length &amp;&amp; (n = <span class="string">&quot;0&quot;</span> + n),</span><br><span class="line">                            r += n</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = <span class="string">&quot;0&quot;</span> + e + r</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setByBooleanArray = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="string">&quot;&quot;</span>, i = <span class="number">0</span>; i &lt; t.length; i++)</span><br><span class="line">                        e += <span class="number">1</span> == t[i] ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="built_in">this</span>.setByBinaryString(e)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.newFalseArray = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Array</span>(t), i = <span class="number">0</span>; t &gt; i; i++)</span><br><span class="line">                        e[i] = !<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> e</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex ? <span class="built_in">this</span>.setHexValueIncludingUnusedBits(t.hex) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.bin ? <span class="built_in">this</span>.setByBinaryString(t.bin) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.array &amp;&amp; <span class="built_in">this</span>.setByBooleanArray(t.array))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DEROctetString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DEROctetString.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;04&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERNull = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERNull.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;05&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.hTLV = <span class="string">&quot;0500&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERObjectIdentifier = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> e = t.toString(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> == e.length &amp;&amp; (e = <span class="string">&quot;0&quot;</span> + e),</span><br><span class="line">                    e</span><br><span class="line">            &#125;</span><br><span class="line">                , r = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> r = <span class="string">&quot;&quot;</span></span><br><span class="line">                        , s = <span class="keyword">new</span> e(t, <span class="number">10</span>)</span><br><span class="line">                        , n = s.toString(<span class="number">2</span>)</span><br><span class="line">                        , o = <span class="number">7</span> - n.length % <span class="number">7</span>;</span><br><span class="line">                    <span class="number">7</span> == o &amp;&amp; (o = <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> h = <span class="string">&quot;&quot;</span>, a = <span class="number">0</span>; o &gt; a; a++)</span><br><span class="line">                        h += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    n = h + n;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; n.length - <span class="number">1</span>; a += <span class="number">7</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> u = n.substr(a, <span class="number">7</span>);</span><br><span class="line">                        a != n.length - <span class="number">7</span> &amp;&amp; (u = <span class="string">&quot;1&quot;</span> + u),</span><br><span class="line">                            r += i(<span class="built_in">parseInt</span>(u, <span class="number">2</span>))</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> r</span><br><span class="line">                &#125;;</span><br><span class="line">            KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;06&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.setValueHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.s = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setValueOidString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!t.match(<span class="regexp">/^[0-9.]+$/</span>))</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&quot;malformed oid string: &quot;</span> + t;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="string">&quot;&quot;</span></span><br><span class="line">                        , s = t.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">                        , n = <span class="number">40</span> * <span class="built_in">parseInt</span>(s[<span class="number">0</span>]) + <span class="built_in">parseInt</span>(s[<span class="number">1</span>]);</span><br><span class="line">                    e += i(n),</span><br><span class="line">                        s.splice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; s.length; o++)</span><br><span class="line">                        e += r(s[o]);</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.s = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.hV = e</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.setValueName = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> KJUR.asn1.x509.OID.name2oidList[t])</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&quot;DERObjectIdentifier oidName undefined: &quot;</span> + t;</span><br><span class="line">                    <span class="keyword">var</span> e = KJUR.asn1.x509.OID.name2oidList[t];</span><br><span class="line">                    <span class="built_in">this</span>.setValueOidString(e)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.oid ? <span class="built_in">this</span>.setValueOidString(t.oid) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex ? <span class="built_in">this</span>.setValueHex(t.hex) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.name &amp;&amp; <span class="built_in">this</span>.setValueName(t.name))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object),</span><br><span class="line">        KJUR.asn1.DERUTF8String = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERUTF8String.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;0c&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERNumericString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERNumericString.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;12&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERPrintableString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERPrintableString.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;13&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERTeletexString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERTeletexString.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;14&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERIA5String = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERIA5String.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;16&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString),</span><br><span class="line">        KJUR.asn1.DERUTCTime = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERUTCTime.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;17&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.setByDate = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.date = t,</span><br><span class="line">                        <span class="built_in">this</span>.s = <span class="built_in">this</span>.formatDate(<span class="built_in">this</span>.date, <span class="string">&quot;utc&quot;</span>),</span><br><span class="line">                        <span class="built_in">this</span>.hV = stohex(<span class="built_in">this</span>.s)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.str ? <span class="built_in">this</span>.setString(t.str) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex ? <span class="built_in">this</span>.setStringHex(t.hex) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.date &amp;&amp; <span class="built_in">this</span>.setByDate(t.date))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime),</span><br><span class="line">        KJUR.asn1.DERGeneralizedTime = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;18&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.setByDate = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                        <span class="built_in">this</span>.isModified = !<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">this</span>.date = t,</span><br><span class="line">                        <span class="built_in">this</span>.s = <span class="built_in">this</span>.formatDate(<span class="built_in">this</span>.date, <span class="string">&quot;gen&quot;</span>),</span><br><span class="line">                        <span class="built_in">this</span>.hV = stohex(<span class="built_in">this</span>.s)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.str ? <span class="built_in">this</span>.setString(t.str) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.hex ? <span class="built_in">this</span>.setStringHex(t.hex) : <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.date &amp;&amp; <span class="built_in">this</span>.setByDate(t.date))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime),</span><br><span class="line">        KJUR.asn1.DERSequence = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERSequence.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;30&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, e = <span class="number">0</span>; e &lt; <span class="built_in">this</span>.asn1Array.length; e++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> i = <span class="built_in">this</span>.asn1Array[e];</span><br><span class="line">                        t += i.getEncodedHex()</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV = t,</span><br><span class="line">                        <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured),</span><br><span class="line">        KJUR.asn1.DERSet = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERSet.superclass.constructor.call(<span class="built_in">this</span>, t),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;31&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Array</span>, e = <span class="number">0</span>; e &lt; <span class="built_in">this</span>.asn1Array.length; e++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> i = <span class="built_in">this</span>.asn1Array[e];</span><br><span class="line">                        t.push(i.getEncodedHex())</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> t.sort(),</span><br><span class="line">                        <span class="built_in">this</span>.hV = t.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">                        <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured),</span><br><span class="line">        KJUR.asn1.DERTaggedObject = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            KJUR.asn1.DERTaggedObject.superclass.constructor.call(<span class="built_in">this</span>),</span><br><span class="line">                <span class="built_in">this</span>.hT = <span class="string">&quot;a0&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.hV = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>.isExplicit = !<span class="number">0</span>,</span><br><span class="line">                <span class="built_in">this</span>.asn1Object = <span class="literal">null</span>,</span><br><span class="line">                <span class="built_in">this</span>.setASN1Object = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hT = e,</span><br><span class="line">                        <span class="built_in">this</span>.isExplicit = t,</span><br><span class="line">                        <span class="built_in">this</span>.asn1Object = i,</span><br><span class="line">                        <span class="built_in">this</span>.isExplicit ? (<span class="built_in">this</span>.hV = <span class="built_in">this</span>.asn1Object.getEncodedHex(),</span><br><span class="line">                            <span class="built_in">this</span>.hTLV = <span class="literal">null</span>,</span><br><span class="line">                            <span class="built_in">this</span>.isModified = !<span class="number">0</span>) : (<span class="built_in">this</span>.hV = <span class="literal">null</span>,</span><br><span class="line">                                <span class="built_in">this</span>.hTLV = i.getEncodedHex(),</span><br><span class="line">                                <span class="built_in">this</span>.hTLV = <span class="built_in">this</span>.hTLV.replace(<span class="regexp">/^../</span>, e),</span><br><span class="line">                                <span class="built_in">this</span>.isModified = !<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">this</span>.getFreshValueHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hV</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.tag &amp;&amp; (<span class="built_in">this</span>.hT = t.tag),</span><br><span class="line">                    <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.explicit &amp;&amp; (<span class="built_in">this</span>.isExplicit = t.explicit),</span><br><span class="line">                    <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t.obj &amp;&amp; (<span class="built_in">this</span>.asn1Object = t.obj,</span><br><span class="line">                        <span class="built_in">this</span>.setASN1Object(<span class="built_in">this</span>.isExplicit, <span class="built_in">this</span>.hT, <span class="built_in">this</span>.asn1Object)))</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        Ce.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object),</span><br><span class="line">        <span class="comment">// Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span></span><br><span class="line">        <span class="comment">// copyright notice and this permission notice appear in all copies.</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class="line">        <span class="comment">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class="line">        <span class="comment">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class="line">        <span class="comment">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class="line">        <span class="comment">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class="line">        <span class="comment">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class="line">        <span class="comment">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line"><span class="meta">            &quot;use strict&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> e, i = &#123;&#125;;</span><br><span class="line">            i.decode = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> r;</span><br><span class="line">                <span class="keyword">if</span> (e === t) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = <span class="string">&quot;0123456789ABCDEF&quot;</span></span><br><span class="line">                        , n = <span class="string">&quot; \f\n\r	?\u2028\u2029&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (e = [],</span><br><span class="line">                        r = <span class="number">0</span>; <span class="number">16</span> &gt; r; ++r)</span><br><span class="line">                        e[s.charAt(r)] = r;</span><br><span class="line">                    <span class="keyword">for</span> (s = s.toLowerCase(),</span><br><span class="line">                        r = <span class="number">10</span>; <span class="number">16</span> &gt; r; ++r)</span><br><span class="line">                        e[s.charAt(r)] = r;</span><br><span class="line">                    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; n.length; ++r)</span><br><span class="line">                        e[n.charAt(r)] = -<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> o = []</span><br><span class="line">                    , h = <span class="number">0</span></span><br><span class="line">                    , a = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; i.length; ++r) &#123;</span><br><span class="line">                    <span class="keyword">var</span> u = i.charAt(r);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;=&quot;</span> == u)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (u = e[u],</span><br><span class="line">                        -<span class="number">1</span> != u) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (u === t)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="string">&quot;Illegal character at offset &quot;</span> + r;</span><br><span class="line">                        h |= u,</span><br><span class="line">                            ++a &gt;= <span class="number">2</span> ? (o[o.length] = h,</span><br><span class="line">                                h = <span class="number">0</span>,</span><br><span class="line">                                a = <span class="number">0</span>) : h &lt;&lt;= <span class="number">4</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;Hex encoding incomplete: 4 bits missing&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> o</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">window</span>.Hex = i</span><br><span class="line">        &#125;(),</span><br><span class="line">        <span class="comment">// Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span></span><br><span class="line">        <span class="comment">// copyright notice and this permission notice appear in all copies.</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class="line">        <span class="comment">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class="line">        <span class="comment">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class="line">        <span class="comment">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class="line">        <span class="comment">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class="line">        <span class="comment">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class="line">        <span class="comment">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line"><span class="meta">            &quot;use strict&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> e, i = &#123;&#125;;</span><br><span class="line">            i.decode = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> r;</span><br><span class="line">                <span class="keyword">if</span> (e === t) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">                        , n = <span class="string">&quot;= \f\n\r	?\u2028\u2029&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (e = [],</span><br><span class="line">                        r = <span class="number">0</span>; <span class="number">64</span> &gt; r; ++r)</span><br><span class="line">                        e[s.charAt(r)] = r;</span><br><span class="line">                    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; n.length; ++r)</span><br><span class="line">                        e[n.charAt(r)] = -<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> o = []</span><br><span class="line">                    , h = <span class="number">0</span></span><br><span class="line">                    , a = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; i.length; ++r) &#123;</span><br><span class="line">                    <span class="keyword">var</span> u = i.charAt(r);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;=&quot;</span> == u)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (u = e[u],</span><br><span class="line">                        -<span class="number">1</span> != u) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (u === t)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="string">&quot;Illegal character at offset &quot;</span> + r;</span><br><span class="line">                        h |= u,</span><br><span class="line">                            ++a &gt;= <span class="number">4</span> ? (o[o.length] = h &gt;&gt; <span class="number">16</span>,</span><br><span class="line">                                o[o.length] = h &gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>,</span><br><span class="line">                                o[o.length] = <span class="number">255</span> &amp; h,</span><br><span class="line">                                h = <span class="number">0</span>,</span><br><span class="line">                                a = <span class="number">0</span>) : h &lt;&lt;= <span class="number">6</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&quot;Base64 encoding incomplete: at least 2 bits missing&quot;</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        o[o.length] = h &gt;&gt; <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        o[o.length] = h &gt;&gt; <span class="number">16</span>,</span><br><span class="line">                            o[o.length] = h &gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> o</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.re = <span class="regexp">/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/</span>,</span><br><span class="line">                i.unarmor = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> e = i.re.exec(t);</span><br><span class="line">                    <span class="keyword">if</span> (e)</span><br><span class="line">                        <span class="keyword">if</span> (e[<span class="number">1</span>])</span><br><span class="line">                            t = e[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!e[<span class="number">2</span>])</span><br><span class="line">                                <span class="keyword">throw</span> <span class="string">&quot;RegExp out of sync&quot;</span>;</span><br><span class="line">                            t = e[<span class="number">2</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">return</span> i.decode(t)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">window</span>.Base64 = i</span><br><span class="line">        &#125;(),</span><br><span class="line">        <span class="comment">// Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span></span><br><span class="line">        <span class="comment">// copyright notice and this permission notice appear in all copies.</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class="line">        <span class="comment">// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class="line">        <span class="comment">// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class="line">        <span class="comment">// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class="line">        <span class="comment">// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class="line">        <span class="comment">// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class="line">        <span class="comment">// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line"><span class="meta">            &quot;use strict&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t, i</span>) </span>&#123;</span><br><span class="line">                t <span class="keyword">instanceof</span> e ? (<span class="built_in">this</span>.enc = t.enc,</span><br><span class="line">                    <span class="built_in">this</span>.pos = t.pos) : (<span class="built_in">this</span>.enc = t,</span><br><span class="line">                        <span class="built_in">this</span>.pos = i)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t, e, i, r, s</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.stream = t,</span><br><span class="line">                    <span class="built_in">this</span>.header = e,</span><br><span class="line">                    <span class="built_in">this</span>.length = i,</span><br><span class="line">                    <span class="built_in">this</span>.tag = r,</span><br><span class="line">                    <span class="built_in">this</span>.sub = s</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="number">100</span></span><br><span class="line">                , s = <span class="string">&quot;��&quot;</span></span><br><span class="line">                , n = &#123;</span><br><span class="line">                    <span class="attr">tag</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> i = <span class="built_in">document</span>.createElement(t);</span><br><span class="line">                        <span class="keyword">return</span> i.className = e,</span><br><span class="line">                            i</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">text</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode(t)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            e.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (e === t &amp;&amp; (e = <span class="built_in">this</span>.pos++),</span><br><span class="line">                    e &gt;= <span class="built_in">this</span>.enc.length)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;Requesting byte offset &quot;</span> + e + <span class="string">&quot; on a stream of length &quot;</span> + <span class="built_in">this</span>.enc.length;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.enc[e]</span><br><span class="line">            &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.hexDigits = <span class="string">&quot;0123456789ABCDEF&quot;</span>,</span><br><span class="line">                e.prototype.hexByte = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hexDigits.charAt(t &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + <span class="built_in">this</span>.hexDigits.charAt(<span class="number">15</span> &amp; t)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.hexDump = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, i</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="string">&quot;&quot;</span>, s = t; e &gt; s; ++s)</span><br><span class="line">                        <span class="keyword">if</span> (r += <span class="built_in">this</span>.hexByte(<span class="built_in">this</span>.get(s)),</span><br><span class="line">                            i !== !<span class="number">0</span>)</span><br><span class="line">                            <span class="keyword">switch</span> (<span class="number">15</span> &amp; s) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                                    r += <span class="string">&quot;  &quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                                    r += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">default</span>:</span><br><span class="line">                                    r += <span class="string">&quot; &quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                    <span class="keyword">return</span> r</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseStringISO = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="string">&quot;&quot;</span>, r = t; e &gt; r; ++r)</span><br><span class="line">                        i += <span class="built_in">String</span>.fromCharCode(<span class="built_in">this</span>.get(r));</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseStringUTF = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="string">&quot;&quot;</span>, r = t; e &gt; r;) &#123;</span><br><span class="line">                        <span class="keyword">var</span> s = <span class="built_in">this</span>.get(r++);</span><br><span class="line">                        i += <span class="number">128</span> &gt; s ? <span class="built_in">String</span>.fromCharCode(s) : s &gt; <span class="number">191</span> &amp;&amp; <span class="number">224</span> &gt; s ? <span class="built_in">String</span>.fromCharCode((<span class="number">31</span> &amp; s) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; <span class="built_in">this</span>.get(r++)) : <span class="built_in">String</span>.fromCharCode((<span class="number">15</span> &amp; s) &lt;&lt; <span class="number">12</span> | (<span class="number">63</span> &amp; <span class="built_in">this</span>.get(r++)) &lt;&lt; <span class="number">6</span> | <span class="number">63</span> &amp; <span class="built_in">this</span>.get(r++))</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseStringBMP = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="string">&quot;&quot;</span>, r = t; e &gt; r; r += <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> s = <span class="built_in">this</span>.get(r)</span><br><span class="line">                            , n = <span class="built_in">this</span>.get(r + <span class="number">1</span>);</span><br><span class="line">                        i += <span class="built_in">String</span>.fromCharCode((s &lt;&lt; <span class="number">8</span>) + n)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.reTime = <span class="regexp">/^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d&#123;1,3&#125;))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/</span>,</span><br><span class="line">                e.prototype.parseTime = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = <span class="built_in">this</span>.parseStringISO(t, e)</span><br><span class="line">                        , r = <span class="built_in">this</span>.reTime.exec(i);</span><br><span class="line">                    <span class="keyword">return</span> r ? (i = r[<span class="number">1</span>] + <span class="string">&quot;-&quot;</span> + r[<span class="number">2</span>] + <span class="string">&quot;-&quot;</span> + r[<span class="number">3</span>] + <span class="string">&quot; &quot;</span> + r[<span class="number">4</span>],</span><br><span class="line">                        r[<span class="number">5</span>] &amp;&amp; (i += <span class="string">&quot;:&quot;</span> + r[<span class="number">5</span>],</span><br><span class="line">                            r[<span class="number">6</span>] &amp;&amp; (i += <span class="string">&quot;:&quot;</span> + r[<span class="number">6</span>],</span><br><span class="line">                                r[<span class="number">7</span>] &amp;&amp; (i += <span class="string">&quot;.&quot;</span> + r[<span class="number">7</span>]))),</span><br><span class="line">                        r[<span class="number">8</span>] &amp;&amp; (i += <span class="string">&quot; UTC&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;Z&quot;</span> != r[<span class="number">8</span>] &amp;&amp; (i += r[<span class="number">8</span>],</span><br><span class="line">                                r[<span class="number">9</span>] &amp;&amp; (i += <span class="string">&quot;:&quot;</span> + r[<span class="number">9</span>]))),</span><br><span class="line">                        i) : <span class="string">&quot;Unrecognized time: &quot;</span> + i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseInteger = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = e - t;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                        i &lt;&lt;= <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">var</span> r = <span class="built_in">this</span>.get(t);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="number">0</span> === r)</span><br><span class="line">                            i -= <span class="number">8</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">for</span> (; <span class="number">128</span> &gt; r;)</span><br><span class="line">                                r &lt;&lt;= <span class="number">1</span>,</span><br><span class="line">                                    --i;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + i + <span class="string">&quot; bit)&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>, n = t; e &gt; n; ++n)</span><br><span class="line">                        s = s &lt;&lt; <span class="number">8</span> | <span class="built_in">this</span>.get(n);</span><br><span class="line">                    <span class="keyword">return</span> s</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseBitString = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = <span class="built_in">this</span>.get(t)</span><br><span class="line">                        , r = (e - t - <span class="number">1</span> &lt;&lt; <span class="number">3</span>) - i</span><br><span class="line">                        , s = <span class="string">&quot;(&quot;</span> + r + <span class="string">&quot; bit)&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">20</span> &gt;= r) &#123;</span><br><span class="line">                        <span class="keyword">var</span> n = i;</span><br><span class="line">                        s += <span class="string">&quot; &quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> o = e - <span class="number">1</span>; o &gt; t; --o) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> h = <span class="built_in">this</span>.get(o), a = n; <span class="number">8</span> &gt; a; ++a)</span><br><span class="line">                                s += h &gt;&gt; a &amp; <span class="number">1</span> ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                            n = <span class="number">0</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> s</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseOctetString = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = e - t</span><br><span class="line">                        , n = <span class="string">&quot;(&quot;</span> + i + <span class="string">&quot; byte) &quot;</span>;</span><br><span class="line">                    i &gt; r &amp;&amp; (e = t + r);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> o = t; e &gt; o; ++o)</span><br><span class="line">                        n += <span class="built_in">this</span>.hexByte(<span class="built_in">this</span>.get(o));</span><br><span class="line">                    <span class="keyword">return</span> i &gt; r &amp;&amp; (n += s),</span><br><span class="line">                        n</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                e.prototype.parseOID = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="string">&quot;&quot;</span>, r = <span class="number">0</span>, s = <span class="number">0</span>, n = t; e &gt; n; ++n) &#123;</span><br><span class="line">                        <span class="keyword">var</span> o = <span class="built_in">this</span>.get(n);</span><br><span class="line">                        <span class="keyword">if</span> (r = r &lt;&lt; <span class="number">7</span> | <span class="number">127</span> &amp; o,</span><br><span class="line">                            s += <span class="number">7</span>,</span><br><span class="line">                            !(<span class="number">128</span> &amp; o)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span> === i) &#123;</span><br><span class="line">                                <span class="keyword">var</span> h = <span class="number">80</span> &gt; r ? <span class="number">40</span> &gt; r ? <span class="number">0</span> : <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">                                i = h + <span class="string">&quot;.&quot;</span> + (r - <span class="number">40</span> * h)</span><br><span class="line">                            &#125; <span class="keyword">else</span></span><br><span class="line">                                i += <span class="string">&quot;.&quot;</span> + (s &gt;= <span class="number">31</span> ? <span class="string">&quot;bigint&quot;</span> : r);</span><br><span class="line">                            r = s = <span class="number">0</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.typeName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.tag === t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="built_in">this</span>.tag &gt;&gt; <span class="number">6</span></span><br><span class="line">                        , i = (<span class="built_in">this</span>.tag &gt;&gt; <span class="number">5</span> &amp; <span class="number">1</span>,</span><br><span class="line">                            <span class="number">31</span> &amp; <span class="built_in">this</span>.tag);</span><br><span class="line">                    <span class="keyword">switch</span> (e) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;EOC&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;BOOLEAN&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;INTEGER&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;BIT_STRING&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;OCTET_STRING&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;OBJECT_IDENTIFIER&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;ObjectDescriptor&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;EXTERNAL&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;REAL&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;ENUMERATED&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;EMBEDDED_PDV&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;UTF8String&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;SEQUENCE&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;SET&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;NumericString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;PrintableString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;TeletexString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;VideotexString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;IA5String&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;UTCTime&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;GeneralizedTime&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;GraphicString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;VisibleString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;GeneralString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;UniversalString&quot;</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;BMPString&quot;</span>;</span><br><span class="line">                                <span class="keyword">default</span>:</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;Universal_&quot;</span> + i.toString(<span class="number">16</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;Application_&quot;</span> + i.toString(<span class="number">16</span>);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;Private_&quot;</span> + i.toString(<span class="number">16</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.reSeemsASCII = <span class="regexp">/^[ -~]+$/</span>,</span><br><span class="line">                i.prototype.content = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.tag === t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="built_in">this</span>.tag &gt;&gt; <span class="number">6</span></span><br><span class="line">                        , i = <span class="number">31</span> &amp; <span class="built_in">this</span>.tag</span><br><span class="line">                        , n = <span class="built_in">this</span>.posContent()</span><br><span class="line">                        , o = <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.length);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> !== e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">this</span>.sub)</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.sub.length + <span class="string">&quot; elem)&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> h = <span class="built_in">this</span>.stream.parseStringISO(n, n + <span class="built_in">Math</span>.min(o, r));</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.reSeemsASCII.test(h) ? h.substring(<span class="number">0</span>, <span class="number">2</span> * r) + (h.length &gt; <span class="number">2</span> * r ? s : <span class="string">&quot;&quot;</span>) : <span class="built_in">this</span>.stream.parseOctetString(n, n + o)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span> === <span class="built_in">this</span>.stream.get(n) ? <span class="string">&quot;false&quot;</span> : <span class="string">&quot;true&quot;</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseInteger(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.sub ? <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.sub.length + <span class="string">&quot; elem)&quot;</span> : <span class="built_in">this</span>.stream.parseBitString(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.sub ? <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.sub.length + <span class="string">&quot; elem)&quot;</span> : <span class="built_in">this</span>.stream.parseOctetString(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseOID(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.sub.length + <span class="string">&quot; elem)&quot;</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseStringUTF(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseStringISO(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseStringBMP(n, n + o);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">this</span>.stream.parseTime(n, n + o)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.typeName() + <span class="string">&quot;@&quot;</span> + <span class="built_in">this</span>.stream.pos + <span class="string">&quot;[header:&quot;</span> + <span class="built_in">this</span>.header + <span class="string">&quot;,length:&quot;</span> + <span class="built_in">this</span>.length + <span class="string">&quot;,sub:&quot;</span> + (<span class="literal">null</span> === <span class="built_in">this</span>.sub ? <span class="string">&quot;null&quot;</span> : <span class="built_in">this</span>.sub.length) + <span class="string">&quot;]&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (e === t &amp;&amp; (e = <span class="string">&quot;&quot;</span>),</span><br><span class="line">                        <span class="built_in">document</span>.writeln(e + <span class="built_in">this</span>),</span><br><span class="line">                        <span class="literal">null</span> !== <span class="built_in">this</span>.sub) &#123;</span><br><span class="line">                        e += <span class="string">&quot;  &quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, r = <span class="built_in">this</span>.sub.length; r &gt; i; ++i)</span><br><span class="line">                            <span class="built_in">this</span>.sub[i].print(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toPrettyString = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    e === t &amp;&amp; (e = <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> i = e + <span class="built_in">this</span>.typeName() + <span class="string">&quot; @&quot;</span> + <span class="built_in">this</span>.stream.pos;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.length &gt;= <span class="number">0</span> &amp;&amp; (i += <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                        i += <span class="built_in">this</span>.length,</span><br><span class="line">                        <span class="number">32</span> &amp; <span class="built_in">this</span>.tag ? i += <span class="string">&quot; (constructed)&quot;</span> : <span class="number">3</span> != <span class="built_in">this</span>.tag &amp;&amp; <span class="number">4</span> != <span class="built_in">this</span>.tag || <span class="literal">null</span> === <span class="built_in">this</span>.sub || (i += <span class="string">&quot; (encapsulates)&quot;</span>),</span><br><span class="line">                        i += <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">                        <span class="literal">null</span> !== <span class="built_in">this</span>.sub) &#123;</span><br><span class="line">                        e += <span class="string">&quot;  &quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>, s = <span class="built_in">this</span>.sub.length; s &gt; r; ++r)</span><br><span class="line">                            i += <span class="built_in">this</span>.sub[r].toPrettyString(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toDOM = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> t = n.tag(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;node&quot;</span>);</span><br><span class="line">                    t.asn1 = <span class="built_in">this</span>;</span><br><span class="line">                    <span class="keyword">var</span> e = n.tag(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;head&quot;</span>)</span><br><span class="line">                        , i = <span class="built_in">this</span>.typeName().replace(<span class="regexp">/_/g</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    e.innerHTML = i;</span><br><span class="line">                    <span class="keyword">var</span> r = <span class="built_in">this</span>.content();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> !== r) &#123;</span><br><span class="line">                        r = <span class="built_in">String</span>(r).replace(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>);</span><br><span class="line">                        <span class="keyword">var</span> s = n.tag(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;preview&quot;</span>);</span><br><span class="line">                        s.appendChild(n.text(r)),</span><br><span class="line">                            e.appendChild(s)</span><br><span class="line">                    &#125;</span><br><span class="line">                    t.appendChild(e),</span><br><span class="line">                        <span class="built_in">this</span>.node = t,</span><br><span class="line">                        <span class="built_in">this</span>.head = e;</span><br><span class="line">                    <span class="keyword">var</span> o = n.tag(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i = <span class="string">&quot;Offset: &quot;</span> + <span class="built_in">this</span>.stream.pos + <span class="string">&quot;&lt;br/&gt;&quot;</span>,</span><br><span class="line">                        i += <span class="string">&quot;Length: &quot;</span> + <span class="built_in">this</span>.header + <span class="string">&quot;+&quot;</span>,</span><br><span class="line">                        i += <span class="built_in">this</span>.length &gt;= <span class="number">0</span> ? <span class="built_in">this</span>.length : -<span class="built_in">this</span>.length + <span class="string">&quot; (undefined)&quot;</span>,</span><br><span class="line">                        <span class="number">32</span> &amp; <span class="built_in">this</span>.tag ? i += <span class="string">&quot;&lt;br/&gt;(constructed)&quot;</span> : <span class="number">3</span> != <span class="built_in">this</span>.tag &amp;&amp; <span class="number">4</span> != <span class="built_in">this</span>.tag || <span class="literal">null</span> === <span class="built_in">this</span>.sub || (i += <span class="string">&quot;&lt;br/&gt;(encapsulates)&quot;</span>),</span><br><span class="line">                        <span class="literal">null</span> !== r &amp;&amp; (i += <span class="string">&quot;&lt;br/&gt;Value:&lt;br/&gt;&lt;b&gt;&quot;</span> + r + <span class="string">&quot;&lt;/b&gt;&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> oids &amp;&amp; <span class="number">6</span> == <span class="built_in">this</span>.tag)) &#123;</span><br><span class="line">                        <span class="keyword">var</span> h = oids[r];</span><br><span class="line">                        h &amp;&amp; (h.d &amp;&amp; (i += <span class="string">&quot;&lt;br/&gt;&quot;</span> + h.d),</span><br><span class="line">                            h.c &amp;&amp; (i += <span class="string">&quot;&lt;br/&gt;&quot;</span> + h.c),</span><br><span class="line">                            h.w &amp;&amp; (i += <span class="string">&quot;&lt;br/&gt;(warning!)&quot;</span>))</span><br><span class="line">                    &#125;</span><br><span class="line">                    o.innerHTML = i,</span><br><span class="line">                        t.appendChild(o);</span><br><span class="line">                    <span class="keyword">var</span> a = n.tag(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">this</span>.sub)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">0</span>, c = <span class="built_in">this</span>.sub.length; c &gt; u; ++u)</span><br><span class="line">                            a.appendChild(<span class="built_in">this</span>.sub[u].toDOM());</span><br><span class="line">                    <span class="keyword">return</span> t.appendChild(a),</span><br><span class="line">                        e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            t.className = <span class="string">&quot;node collapsed&quot;</span> == t.className ? <span class="string">&quot;node&quot;</span> : <span class="string">&quot;node collapsed&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ,</span><br><span class="line">                        t</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.posStart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.stream.pos</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.posContent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.stream.pos + <span class="built_in">this</span>.header</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.posEnd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.stream.pos + <span class="built_in">this</span>.header + <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.length)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.fakeHover = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.node.className += <span class="string">&quot; hover&quot;</span>,</span><br><span class="line">                        t &amp;&amp; (<span class="built_in">this</span>.head.className += <span class="string">&quot; hover&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.fakeOut = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="regexp">/ ?hover/</span>;</span><br><span class="line">                    <span class="built_in">this</span>.node.className = <span class="built_in">this</span>.node.className.replace(e, <span class="string">&quot;&quot;</span>),</span><br><span class="line">                        t &amp;&amp; (<span class="built_in">this</span>.head.className = <span class="built_in">this</span>.head.className.replace(e, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toHexDOM_sub = <span class="function"><span class="keyword">function</span> (<span class="params">t, e, i, r, s</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(r &gt;= s)) &#123;</span><br><span class="line">                        <span class="keyword">var</span> o = n.tag(<span class="string">&quot;span&quot;</span>, e);</span><br><span class="line">                        o.appendChild(n.text(i.hexDump(r, s))),</span><br><span class="line">                            t.appendChild(o)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toHexDOM = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> i = n.tag(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;hex&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (e === t &amp;&amp; (e = i),</span><br><span class="line">                        <span class="built_in">this</span>.head.hexNode = i,</span><br><span class="line">                        <span class="built_in">this</span>.head.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">this</span>.hexNode.className = <span class="string">&quot;hexCurrent&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ,</span><br><span class="line">                        <span class="built_in">this</span>.head.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">this</span>.hexNode.className = <span class="string">&quot;hex&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ,</span><br><span class="line">                        i.asn1 = <span class="built_in">this</span>,</span><br><span class="line">                        i.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> t = !e.selected;</span><br><span class="line">                            t &amp;&amp; (e.selected = <span class="built_in">this</span>.asn1,</span><br><span class="line">                                <span class="built_in">this</span>.className = <span class="string">&quot;hexCurrent&quot;</span>),</span><br><span class="line">                                <span class="built_in">this</span>.asn1.fakeHover(t)</span><br><span class="line">                        &#125;</span><br><span class="line">                        ,</span><br><span class="line">                        i.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> t = e.selected == <span class="built_in">this</span>.asn1;</span><br><span class="line">                            <span class="built_in">this</span>.asn1.fakeOut(t),</span><br><span class="line">                                t &amp;&amp; (e.selected = <span class="literal">null</span>,</span><br><span class="line">                                    <span class="built_in">this</span>.className = <span class="string">&quot;hex&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        ,</span><br><span class="line">                        <span class="built_in">this</span>.toHexDOM_sub(i, <span class="string">&quot;tag&quot;</span>, <span class="built_in">this</span>.stream, <span class="built_in">this</span>.posStart(), <span class="built_in">this</span>.posStart() + <span class="number">1</span>),</span><br><span class="line">                        <span class="built_in">this</span>.toHexDOM_sub(i, <span class="built_in">this</span>.length &gt;= <span class="number">0</span> ? <span class="string">&quot;dlen&quot;</span> : <span class="string">&quot;ulen&quot;</span>, <span class="built_in">this</span>.stream, <span class="built_in">this</span>.posStart() + <span class="number">1</span>, <span class="built_in">this</span>.posContent()),</span><br><span class="line">                        <span class="literal">null</span> === <span class="built_in">this</span>.sub)</span><br><span class="line">                        i.appendChild(n.text(<span class="built_in">this</span>.stream.hexDump(<span class="built_in">this</span>.posContent(), <span class="built_in">this</span>.posEnd())));</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.sub.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> r = <span class="built_in">this</span>.sub[<span class="number">0</span>]</span><br><span class="line">                            , s = <span class="built_in">this</span>.sub[<span class="built_in">this</span>.sub.length - <span class="number">1</span>];</span><br><span class="line">                        <span class="built_in">this</span>.toHexDOM_sub(i, <span class="string">&quot;intro&quot;</span>, <span class="built_in">this</span>.stream, <span class="built_in">this</span>.posContent(), r.posStart());</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>, h = <span class="built_in">this</span>.sub.length; h &gt; o; ++o)</span><br><span class="line">                            i.appendChild(<span class="built_in">this</span>.sub[o].toHexDOM(e));</span><br><span class="line">                        <span class="built_in">this</span>.toHexDOM_sub(i, <span class="string">&quot;outro&quot;</span>, <span class="built_in">this</span>.stream, s.posEnd(), <span class="built_in">this</span>.posEnd())</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.prototype.toHexString = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.stream.hexDump(<span class="built_in">this</span>.posStart(), <span class="built_in">this</span>.posEnd(), !<span class="number">0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.decodeLength = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> e = t.get()</span><br><span class="line">                        , i = <span class="number">127</span> &amp; e;</span><br><span class="line">                    <span class="keyword">if</span> (i == e)</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">3</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&quot;Length over 24 bits not supported at position &quot;</span> + (t.pos - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> === i)</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    e = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; i &gt; r; ++r)</span><br><span class="line">                        e = e &lt;&lt; <span class="number">8</span> | t.get();</span><br><span class="line">                    <span class="keyword">return</span> e</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.hasContent = <span class="function"><span class="keyword">function</span> (<span class="params">t, r, s</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">32</span> &amp; t)</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">3</span> &gt; t || t &gt; <span class="number">4</span>)</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">var</span> n = <span class="keyword">new</span> e(s);</span><br><span class="line">                    <span class="number">3</span> == t &amp;&amp; n.get();</span><br><span class="line">                    <span class="keyword">var</span> o = n.get();</span><br><span class="line">                    <span class="keyword">if</span> (o &gt;&gt; <span class="number">6</span> &amp; <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> h = i.decodeLength(n);</span><br><span class="line">                        <span class="keyword">return</span> n.pos - s.pos + h == r</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (a) &#123;</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.decode = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">                    t <span class="keyword">instanceof</span> e || (t = <span class="keyword">new</span> e(t, <span class="number">0</span>));</span><br><span class="line">                    <span class="keyword">var</span> r = <span class="keyword">new</span> e(t)</span><br><span class="line">                        , s = t.get()</span><br><span class="line">                        , n = i.decodeLength(t)</span><br><span class="line">                        , o = t.pos - r.pos</span><br><span class="line">                        , h = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i.hasContent(s, n, t)) &#123;</span><br><span class="line">                        <span class="keyword">var</span> a = t.pos;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="number">3</span> == s &amp;&amp; t.get(),</span><br><span class="line">                            h = [],</span><br><span class="line">                            n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> u = a + n; t.pos &lt; u;)</span><br><span class="line">                                h[h.length] = i.decode(t);</span><br><span class="line">                            <span class="keyword">if</span> (t.pos != u)</span><br><span class="line">                                <span class="keyword">throw</span> <span class="string">&quot;Content size is not correct for container starting at offset &quot;</span> + a</span><br><span class="line">                        &#125; <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> c = i.decode(t);</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="number">0</span> === c.tag)</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    h[h.length] = c</span><br><span class="line">                                &#125;</span><br><span class="line">                                n = a - t.pos</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (f) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="string">&quot;Exception while decoding undefined length content: &quot;</span> + f</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        t.pos += n;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> i(r, o, n, s, h)</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                i.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> t = [&#123;</span><br><span class="line">                        <span class="attr">value</span>: [<span class="number">39</span>],</span><br><span class="line">                        <span class="attr">expected</span>: <span class="number">39</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        <span class="attr">value</span>: [<span class="number">129</span>, <span class="number">201</span>],</span><br><span class="line">                        <span class="attr">expected</span>: <span class="number">201</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        <span class="attr">value</span>: [<span class="number">131</span>, <span class="number">254</span>, <span class="number">220</span>, <span class="number">186</span>],</span><br><span class="line">                        <span class="attr">expected</span>: <span class="number">16702650</span></span><br><span class="line">                    &#125;], r = <span class="number">0</span>, s = t.length; s &gt; r; ++r) &#123;</span><br><span class="line">                        <span class="keyword">var</span> n = <span class="keyword">new</span> e(t[r].value, <span class="number">0</span>)</span><br><span class="line">                            , o = i.decodeLength(n);</span><br><span class="line">                        o != t[r].expected &amp;&amp; <span class="built_in">document</span>.write(<span class="string">&quot;In test[&quot;</span> + r + <span class="string">&quot;] expected &quot;</span> + t[r].expected + <span class="string">&quot; got &quot;</span> + o + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ,</span><br><span class="line">                <span class="built_in">window</span>.ASN1 = i</span><br><span class="line">        &#125;(),</span><br><span class="line">        ASN1.prototype.getHexStringValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">this</span>.toHexString()</span><br><span class="line">                , e = <span class="number">2</span> * <span class="built_in">this</span>.header</span><br><span class="line">                , i = <span class="number">2</span> * <span class="built_in">this</span>.length;</span><br><span class="line">            <span class="keyword">return</span> t.substr(e, i)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.parseKey = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> e = <span class="number">0</span></span><br><span class="line">                    , i = <span class="number">0</span></span><br><span class="line">                    , r = <span class="regexp">/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/</span></span><br><span class="line">                    , s = r.test(t) ? Hex.decode(t) : Base64.unarmor(t)</span><br><span class="line">                    , n = ASN1.decode(s);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">3</span> === n.sub.length &amp;&amp; (n = n.sub[<span class="number">2</span>].sub[<span class="number">0</span>]),</span><br><span class="line">                    <span class="number">9</span> === n.sub.length) &#123;</span><br><span class="line">                    e = n.sub[<span class="number">1</span>].getHexStringValue(),</span><br><span class="line">                        <span class="built_in">this</span>.n = he(e, <span class="number">16</span>),</span><br><span class="line">                        i = n.sub[<span class="number">2</span>].getHexStringValue(),</span><br><span class="line">                        <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(i, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> o = n.sub[<span class="number">3</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.d = he(o, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> h = n.sub[<span class="number">4</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.p = he(h, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> a = n.sub[<span class="number">5</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.q = he(a, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> u = n.sub[<span class="number">6</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.dmp1 = he(u, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> c = n.sub[<span class="number">7</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.dmq1 = he(c, <span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">var</span> f = n.sub[<span class="number">8</span>].getHexStringValue();</span><br><span class="line">                    <span class="built_in">this</span>.coeff = he(f, <span class="number">16</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">2</span> !== n.sub.length)</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">var</span> p = n.sub[<span class="number">1</span>]</span><br><span class="line">                        , l = p.sub[<span class="number">0</span>];</span><br><span class="line">                    e = l.sub[<span class="number">0</span>].getHexStringValue(),</span><br><span class="line">                        <span class="built_in">this</span>.n = he(e, <span class="number">16</span>),</span><br><span class="line">                        i = l.sub[<span class="number">1</span>].getHexStringValue(),</span><br><span class="line">                        <span class="built_in">this</span>.e = <span class="built_in">parseInt</span>(i, <span class="number">16</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (d) &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPrivateBaseKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = &#123;</span><br><span class="line">                <span class="attr">array</span>: [<span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="string">&quot;int&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.n</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="string">&quot;int&quot;</span>: <span class="built_in">this</span>.e</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.d</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.p</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.q</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.dmp1</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.dmq1</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.coeff</span><br><span class="line">                &#125;)]</span><br><span class="line">            &#125;</span><br><span class="line">                , e = <span class="keyword">new</span> KJUR.asn1.DERSequence(t);</span><br><span class="line">            <span class="keyword">return</span> e.getEncodedHex()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPrivateBaseKeyB64 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> be(<span class="built_in">this</span>.getPrivateBaseKey())</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPublicBaseKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = &#123;</span><br><span class="line">                <span class="attr">array</span>: [<span class="keyword">new</span> KJUR.asn1.DERObjectIdentifier(&#123;</span><br><span class="line">                    <span class="attr">oid</span>: <span class="string">&quot;1.2.840.113549.1.1.1&quot;</span></span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERNull]</span><br><span class="line">            &#125;</span><br><span class="line">                , e = <span class="keyword">new</span> KJUR.asn1.DERSequence(t);</span><br><span class="line">            t = &#123;</span><br><span class="line">                <span class="attr">array</span>: [<span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="attr">bigint</span>: <span class="built_in">this</span>.n</span><br><span class="line">                &#125;), <span class="keyword">new</span> KJUR.asn1.DERInteger(&#123;</span><br><span class="line">                    <span class="string">&quot;int&quot;</span>: <span class="built_in">this</span>.e</span><br><span class="line">                &#125;)]</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="keyword">new</span> KJUR.asn1.DERSequence(t);</span><br><span class="line">            t = &#123;</span><br><span class="line">                <span class="attr">hex</span>: <span class="string">&quot;00&quot;</span> + i.getEncodedHex()</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="keyword">new</span> KJUR.asn1.DERBitString(t);</span><br><span class="line">            t = &#123;</span><br><span class="line">                <span class="attr">array</span>: [e, r]</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">new</span> KJUR.asn1.DERSequence(t);</span><br><span class="line">            <span class="keyword">return</span> s.getEncodedHex()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPublicBaseKeyB64 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> be(<span class="built_in">this</span>.getPublicBaseKey())</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.wordwrap = <span class="function"><span class="keyword">function</span> (<span class="params">t, e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e = e || <span class="number">64</span>,</span><br><span class="line">                !t)</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="string">&quot;(.&#123;1,&quot;</span> + e + <span class="string">&quot;&#125;)( +|$\n?)|(.&#123;1,&quot;</span> + e + <span class="string">&quot;&#125;)&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t.match(<span class="built_in">RegExp</span>(i, <span class="string">&quot;g&quot;</span>)).join(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPrivateKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t += <span class="built_in">this</span>.wordwrap(<span class="built_in">this</span>.getPrivateBaseKeyB64()) + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">                t += <span class="string">&quot;-----END RSA PRIVATE KEY-----&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.getPublicKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t += <span class="built_in">this</span>.wordwrap(<span class="built_in">this</span>.getPublicBaseKeyB64()) + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">                t += <span class="string">&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.hasPublicKeyProperty = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t = t || &#123;&#125;,</span><br><span class="line">                t.hasOwnProperty(<span class="string">&quot;n&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.hasPrivateKeyProperty = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t = t || &#123;&#125;,</span><br><span class="line">                t.hasOwnProperty(<span class="string">&quot;n&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;e&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;d&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;p&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;q&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;dmp1&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;dmq1&quot;</span>) &amp;&amp; t.hasOwnProperty(<span class="string">&quot;coeff&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ue.prototype.parsePropertiesFrom = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = t.n,</span><br><span class="line">                <span class="built_in">this</span>.e = t.e,</span><br><span class="line">                t.hasOwnProperty(<span class="string">&quot;d&quot;</span>) &amp;&amp; (<span class="built_in">this</span>.d = t.d,</span><br><span class="line">                    <span class="built_in">this</span>.p = t.p,</span><br><span class="line">                    <span class="built_in">this</span>.q = t.q,</span><br><span class="line">                    <span class="built_in">this</span>.dmp1 = t.dmp1,</span><br><span class="line">                    <span class="built_in">this</span>.dmq1 = t.dmq1,</span><br><span class="line">                    <span class="built_in">this</span>.coeff = t.coeff)</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">var</span> _e = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        ue.call(<span class="built_in">this</span>),</span><br><span class="line">            t &amp;&amp; (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t ? <span class="built_in">this</span>.parseKey(t) : (<span class="built_in">this</span>.hasPrivateKeyProperty(t) || <span class="built_in">this</span>.hasPublicKeyProperty(t)) &amp;&amp; <span class="built_in">this</span>.parsePropertiesFrom(t))</span><br><span class="line">    &#125;;</span><br><span class="line">    _e.prototype = <span class="keyword">new</span> ue,</span><br><span class="line">        _e.prototype.constructor = _e;</span><br><span class="line">    <span class="keyword">var</span> ze = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        t = t || &#123;&#125;,</span><br><span class="line">            <span class="built_in">this</span>.default_key_size = <span class="built_in">parseInt</span>(t.default_key_size) || <span class="number">1024</span>,</span><br><span class="line">            <span class="built_in">this</span>.default_public_exponent = t.default_public_exponent || <span class="string">&quot;010001&quot;</span>,</span><br><span class="line">            <span class="built_in">this</span>.log = t.log || !<span class="number">1</span>,</span><br><span class="line">            <span class="built_in">this</span>.key = <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ze.prototype.setKey = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.log &amp;&amp; <span class="built_in">this</span>.key &amp;&amp; <span class="built_in">console</span>.warn(<span class="string">&quot;A key was already set, overriding existing.&quot;</span>),</span><br><span class="line">            <span class="built_in">this</span>.key = <span class="keyword">new</span> _e(t)</span><br><span class="line">    &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.setPrivateKey = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setKey(t)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.setPublicKey = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setKey(t)</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.decrypt = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getKey().decrypt(Te(t))</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.encrypt = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> be(<span class="built_in">this</span>.getKey().encrypt(t))</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.getKey = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.key = <span class="keyword">new</span> _e,</span><br><span class="line">                    t &amp;&amp; <span class="string">&quot;[object Function]&quot;</span> === &#123;&#125;.toString.call(t))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">void</span> <span class="built_in">this</span>.key.generateAsync(<span class="built_in">this</span>.default_key_size, <span class="built_in">this</span>.default_public_exponent, t);</span><br><span class="line">                <span class="built_in">this</span>.key.generate(<span class="built_in">this</span>.default_key_size, <span class="built_in">this</span>.default_public_exponent)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.key</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.getPrivateKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getKey().getPrivateKey()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.getPrivateKeyB64 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getKey().getPrivateBaseKeyB64()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.getPublicKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getKey().getPublicKey()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.prototype.getPublicKeyB64 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getKey().getPublicBaseKeyB64()</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        ze.version = <span class="string">&quot;2.3.1&quot;</span>,</span><br><span class="line">        JSEncrypt = ze</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">pwd, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    e.setPublicKey(key);</span><br><span class="line">    <span class="keyword">var</span> p = e.encrypt(pwd);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Python实现">Python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对框架源代码进行请求，因为前端页面中没有 id=&quot;e&quot; 的标签</span></span><br><span class="line">url = <span class="string">&quot;https://passport.wanmei.com/sso/login?service=passport&amp;isiframe=1&amp;location=2f736166652f&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">key = tree.xpath(<span class="string">&#x27;//input[@id=&quot;e&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密逆向</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&quot;./逆向/wanmei.js&quot;</span>).read())</span><br><span class="line">funcName = <span class="string">&#x27;getPwd(&quot;&#123;0&#125;&quot;, &quot;&#123;1&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;123456&#x27;</span>, key)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(6)--试客联盟逆向分析</title>
    <url>/posts/9e8174b8/</url>
    <content><![CDATA[<h2 id="试客联盟登陆逆向">试客联盟登陆逆向</h2>
<h3 id="页面分析">页面分析</h3>
<ul>
<li>url：<a href="http://login.shikee.com">http://login.shikee.com</a></li>
<li><code>serializeArray()</code>: js 函数的作用就是实现序列化(对登陆页面的表单中的值进行序列化，序列化成一个数组，数组元素就是表单中的数据【用户名和密码】)</li>
<li><code>key</code>表示公钥，公钥的生成需要用<code>rsa_n</code>，通过重新抓包，全局搜索找到生成<code>rsa_n</code>数据的请求包</li>
</ul>
<span id="more"></span>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BarrettMu</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.modulus = biCopy(m);</span><br><span class="line">    <span class="built_in">this</span>.k = biHighIndex(<span class="built_in">this</span>.modulus) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b2k = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    b2k.digits[<span class="number">2</span> * <span class="built_in">this</span>.k] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.mu = biDivide(b2k, <span class="built_in">this</span>.modulus);</span><br><span class="line">    <span class="built_in">this</span>.bkplus1 = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    <span class="built_in">this</span>.bkplus1.digits[<span class="built_in">this</span>.k + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.modulo = BarrettMu_modulo;</span><br><span class="line">    <span class="built_in">this</span>.multiplyMod = BarrettMu_multiplyMod;</span><br><span class="line">    <span class="built_in">this</span>.powMod = BarrettMu_powMod;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_modulo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q1 = biDivideByRadixPower(x, <span class="built_in">this</span>.k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> q2 = biMultiply(q1, <span class="built_in">this</span>.mu);</span><br><span class="line">    <span class="keyword">var</span> q3 = biDivideByRadixPower(q2, <span class="built_in">this</span>.k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> r1 = biModuloByRadixPower(x, <span class="built_in">this</span>.k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> r2term = biMultiply(q3, <span class="built_in">this</span>.modulus);</span><br><span class="line">    <span class="keyword">var</span> r2 = biModuloByRadixPower(r2term, <span class="built_in">this</span>.k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> r = biSubtract(r1, r2);</span><br><span class="line">    <span class="keyword">if</span> (r.isNeg) &#123;</span><br><span class="line">      r = biAdd(r, <span class="built_in">this</span>.bkplus1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rgtem = biCompare(r, <span class="built_in">this</span>.modulus) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (rgtem) &#123;</span><br><span class="line">      r = biSubtract(r, <span class="built_in">this</span>.modulus);</span><br><span class="line">      rgtem = biCompare(r, <span class="built_in">this</span>.modulus) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_multiplyMod</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xy = biMultiply(x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.modulo(xy);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BarrettMu_powMod</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    result.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> a = x;</span><br><span class="line">    <span class="keyword">var</span> k = y;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((k.digits[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">        result = <span class="built_in">this</span>.multiplyMod(result, a);</span><br><span class="line">      k = biShiftRight(k, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (k.digits[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; biHighIndex(k) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      a = <span class="built_in">this</span>.multiplyMod(a, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> biRadixBase = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> biRadixBits = <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> bitsPerDigit = biRadixBits;</span><br><span class="line">  <span class="keyword">var</span> biRadix = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> biHalfRadix = biRadix &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> biRadixSquared = biRadix * biRadix;</span><br><span class="line">  <span class="keyword">var</span> maxDigitVal = biRadix - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> maxInteger = <span class="number">9999999999999998</span>;</span><br><span class="line">  <span class="keyword">var</span> maxDigits;</span><br><span class="line">  <span class="keyword">var</span> ZERO_ARRAY;</span><br><span class="line">  <span class="keyword">var</span> bigZero, bigOne;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setMaxDigits</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    maxDigits = value;</span><br><span class="line">    ZERO_ARRAY = <span class="keyword">new</span> <span class="built_in">Array</span>(maxDigits);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> iza = <span class="number">0</span>; iza &lt; ZERO_ARRAY.length; iza++)</span><br><span class="line">      ZERO_ARRAY[iza] = <span class="number">0</span>;</span><br><span class="line">    bigZero = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    bigOne = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    bigOne.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setMaxDigits(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">var</span> dpl10 = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">var</span> lr10 = biFromNumber(<span class="number">1000000000000000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BigInt</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> flag == <span class="string">&quot;boolean&quot;</span> &amp;&amp; flag == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.digits = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.digits = ZERO_ARRAY.slice(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.isNeg = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biFromDecimal</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isNeg = s.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> i = isNeg ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length &amp;&amp; s.charAt(i) == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">      ++i;</span><br><span class="line">    <span class="keyword">if</span> (i == s.length) &#123;</span><br><span class="line">      result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> digitCount = s.length - i;</span><br><span class="line">      <span class="keyword">var</span> fgl = digitCount % dpl10;</span><br><span class="line">      <span class="keyword">if</span> (fgl == <span class="number">0</span>)</span><br><span class="line">        fgl = dpl10;</span><br><span class="line">      result = biFromNumber(<span class="built_in">Number</span>(s.substr(i, fgl)));</span><br><span class="line">      i += fgl;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; s.length) &#123;</span><br><span class="line">        result = biAdd(biMultiply(result, lr10), biFromNumber(<span class="built_in">Number</span>(s.substr(i, dpl10))));</span><br><span class="line">        i += dpl10;</span><br><span class="line">      &#125;</span><br><span class="line">      result.isNeg = isNeg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biCopy</span>(<span class="params">bi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>(<span class="literal">true</span>);</span><br><span class="line">    result.digits = bi.digits.slice(<span class="number">0</span>);</span><br><span class="line">    result.isNeg = bi.isNeg;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biFromNumber</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    result.isNeg = i &lt; <span class="number">0</span>;</span><br><span class="line">    i = <span class="built_in">Math</span>.abs(i);</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result.digits[j++] = i &amp; maxDigitVal;</span><br><span class="line">      i &gt;&gt;= biRadixBits;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = s.length - <span class="number">1</span>; i &gt; -<span class="number">1</span>; --i) &#123;</span><br><span class="line">      result += s.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> hexatrigesimalToChar = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biToString</span>(<span class="params">x, radix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    b.digits[<span class="number">0</span>] = radix;</span><br><span class="line">    <span class="keyword">var</span> qr = biDivideModulo(x, b);</span><br><span class="line">    <span class="keyword">var</span> result = hexatrigesimalToChar[qr[<span class="number">1</span>].digits[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">while</span> (biCompare(qr[<span class="number">0</span>], bigZero) == <span class="number">1</span>) &#123;</span><br><span class="line">      qr = biDivideModulo(qr[<span class="number">0</span>], b);</span><br><span class="line">      digit = qr[<span class="number">1</span>].digits[<span class="number">0</span>];</span><br><span class="line">      result += hexatrigesimalToChar[qr[<span class="number">1</span>].digits[<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (x.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + reverseStr(result);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biToDecimal</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    b.digits[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> qr = biDivideModulo(x, b);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">String</span>(qr[<span class="number">1</span>].digits[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">while</span> (biCompare(qr[<span class="number">0</span>], bigZero) == <span class="number">1</span>) &#123;</span><br><span class="line">      qr = biDivideModulo(qr[<span class="number">0</span>], b);</span><br><span class="line">      result += <span class="built_in">String</span>(qr[<span class="number">1</span>].digits[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (x.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + reverseStr(result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> hexToChar = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">digitToHex</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mask = <span class="number">0xf</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">      result += hexToChar[n &amp; mask];</span><br><span class="line">      n &gt;&gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reverseStr(result);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biToHex</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> n = biHighIndex(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = biHighIndex(x); i &gt; -<span class="number">1</span>; --i) &#123;</span><br><span class="line">      result += digitToHex(x.digits[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">charToHex</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ZERO = <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">var</span> NINE = ZERO + <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">var</span> littleA = <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">var</span> littleZ = littleA + <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">var</span> bigA = <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">var</span> bigZ = <span class="number">65</span> + <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= ZERO &amp;&amp; c &lt;= NINE) &#123;</span><br><span class="line">      result = c - ZERO;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= bigA &amp;&amp; c &lt;= bigZ) &#123;</span><br><span class="line">      result = <span class="number">10</span> + c - bigA;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= littleA &amp;&amp; c &lt;= littleZ) &#123;</span><br><span class="line">      result = <span class="number">10</span> + c - littleA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hexToDigit</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> sl = <span class="built_in">Math</span>.min(s.length, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sl; ++i) &#123;</span><br><span class="line">      result &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">      result |= charToHex(s.charCodeAt(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biFromHex</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    <span class="keyword">var</span> sl = s.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = sl, j = <span class="number">0</span>; i &gt; <span class="number">0</span>; i -= <span class="number">4</span>,</span><br><span class="line">      ++j) &#123;</span><br><span class="line">      result.digits[j] = hexToDigit(s.substr(<span class="built_in">Math</span>.max(i - <span class="number">4</span>, <span class="number">0</span>), <span class="built_in">Math</span>.min(i, <span class="number">4</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biFromString</span>(<span class="params">s, radix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isNeg = s.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> istop = isNeg ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    <span class="keyword">var</span> place = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    place.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = s.length - <span class="number">1</span>; i &gt;= istop; i--) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = s.charCodeAt(i);</span><br><span class="line">      <span class="keyword">var</span> digit = charToHex(c);</span><br><span class="line">      <span class="keyword">var</span> biDigit = biMultiplyDigit(place, digit);</span><br><span class="line">      result = biAdd(result, biDigit);</span><br><span class="line">      place = biMultiplyDigit(place, radix);</span><br><span class="line">    &#125;</span><br><span class="line">    result.isNeg = isNeg;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biToBytes</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = biHighIndex(x); i &gt; -<span class="number">1</span>; --i) &#123;</span><br><span class="line">      result += digitToBytes(x.digits[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">digitToBytes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c1 = <span class="built_in">String</span>.fromCharCode(n &amp; <span class="number">0xff</span>);</span><br><span class="line">    n &gt;&gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> c2 = <span class="built_in">String</span>.fromCharCode(n &amp; <span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">return</span> c2 + c1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biDump</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + b.digits.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biAdd</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (x.isNeg != y.isNeg) &#123;</span><br><span class="line">      y.isNeg = !y.isNeg;</span><br><span class="line">      result = biSubtract(x, y);</span><br><span class="line">      y.isNeg = !y.isNeg;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">      <span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> n;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.digits.length; ++i) &#123;</span><br><span class="line">        n = x.digits[i] + y.digits[i] + c;</span><br><span class="line">        result.digits[i] = n &amp; <span class="number">0xffff</span>;</span><br><span class="line">        c = <span class="built_in">Number</span>(n &gt;= biRadix);</span><br><span class="line">      &#125;</span><br><span class="line">      result.isNeg = x.isNeg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biSubtract</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (x.isNeg != y.isNeg) &#123;</span><br><span class="line">      y.isNeg = !y.isNeg;</span><br><span class="line">      result = biAdd(x, y);</span><br><span class="line">      y.isNeg = !y.isNeg;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">      <span class="keyword">var</span> n, c;</span><br><span class="line">      c = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.digits.length; ++i) &#123;</span><br><span class="line">        n = x.digits[i] - y.digits[i] + c;</span><br><span class="line">        result.digits[i] = n &amp; <span class="number">0xffff</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.digits[i] &lt; <span class="number">0</span>)</span><br><span class="line">          result.digits[i] += biRadix;</span><br><span class="line">        c = <span class="number">0</span> - <span class="built_in">Number</span>(n &lt; <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.digits.length; ++i) &#123;</span><br><span class="line">          n = <span class="number">0</span> - result.digits[i] + c;</span><br><span class="line">          result.digits[i] = n &amp; <span class="number">0xffff</span>;</span><br><span class="line">          <span class="keyword">if</span> (result.digits[i] &lt; <span class="number">0</span>)</span><br><span class="line">            result.digits[i] += biRadix;</span><br><span class="line">          c = <span class="number">0</span> - <span class="built_in">Number</span>(n &lt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.isNeg = !x.isNeg;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.isNeg = x.isNeg;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biHighIndex</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = x.digits.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (result &gt; <span class="number">0</span> &amp;&amp; x.digits[result] == <span class="number">0</span>)</span><br><span class="line">      --result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biNumBits</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = biHighIndex(x);</span><br><span class="line">    <span class="keyword">var</span> d = x.digits[n];</span><br><span class="line">    <span class="keyword">var</span> m = (n + <span class="number">1</span>) * bitsPerDigit;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">for</span> (result = m; result &gt; m - bitsPerDigit; --result) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((d &amp; <span class="number">0x8000</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      d &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biMultiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    <span class="keyword">var</span> n = biHighIndex(x);</span><br><span class="line">    <span class="keyword">var</span> t = biHighIndex(y);</span><br><span class="line">    <span class="keyword">var</span> u, uv, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= t; ++i) &#123;</span><br><span class="line">      c = <span class="number">0</span>;</span><br><span class="line">      k = i;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j,</span><br><span class="line">        ++k) &#123;</span><br><span class="line">        uv = result.digits[k] + x.digits[j] * y.digits[i] + c;</span><br><span class="line">        result.digits[k] = uv &amp; maxDigitVal;</span><br><span class="line">        c = uv &gt;&gt;&gt; biRadixBits;</span><br><span class="line">      &#125;</span><br><span class="line">      result.digits[i + n + <span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    result.isNeg = x.isNeg != y.isNeg;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biMultiplyDigit</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n, c, uv;</span><br><span class="line">    result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    n = biHighIndex(x);</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      uv = result.digits[j] + x.digits[j] * y + c;</span><br><span class="line">      result.digits[j] = uv &amp; maxDigitVal;</span><br><span class="line">      c = uv &gt;&gt;&gt; biRadixBits;</span><br><span class="line">    &#125;</span><br><span class="line">    result.digits[<span class="number">1</span> + n] = c;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">arrayCopy</span>(<span class="params">src, srcStart, dest, destStart, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">Math</span>.min(srcStart + n, src.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = srcStart, j = destStart; i &lt; m; ++i,</span><br><span class="line">      ++j) &#123;</span><br><span class="line">      dest[j] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> highBitMasks = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x0000</span>, <span class="number">0x8000</span>, <span class="number">0xC000</span>, <span class="number">0xE000</span>, <span class="number">0xF000</span>, <span class="number">0xF800</span>, <span class="number">0xFC00</span>, <span class="number">0xFE00</span>, <span class="number">0xFF00</span>, <span class="number">0xFF80</span>, <span class="number">0xFFC0</span>, <span class="number">0xFFE0</span>, <span class="number">0xFFF0</span>, <span class="number">0xFFF8</span>, <span class="number">0xFFFC</span>, <span class="number">0xFFFE</span>, <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biShiftLeft</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> digitCount = <span class="built_in">Math</span>.floor(n / bitsPerDigit);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    arrayCopy(x.digits, <span class="number">0</span>, result.digits, digitCount, result.digits.length - digitCount);</span><br><span class="line">    <span class="keyword">var</span> bits = n % bitsPerDigit;</span><br><span class="line">    <span class="keyword">var</span> rightBits = bitsPerDigit - bits;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = result.digits.length - <span class="number">1</span>, i1 = i - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i,</span><br><span class="line">      --i1) &#123;</span><br><span class="line">      result.digits[i] = ((result.digits[i] &lt;&lt; bits) &amp; maxDigitVal) | ((result.digits[i1] &amp; highBitMasks[bits]) &gt;&gt;&gt; (rightBits));</span><br><span class="line">    &#125;</span><br><span class="line">    result.digits[<span class="number">0</span>] = ((result.digits[i] &lt;&lt; bits) &amp; maxDigitVal);</span><br><span class="line">    result.isNeg = x.isNeg;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> lowBitMasks = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x0000</span>, <span class="number">0x0001</span>, <span class="number">0x0003</span>, <span class="number">0x0007</span>, <span class="number">0x000F</span>, <span class="number">0x001F</span>, <span class="number">0x003F</span>, <span class="number">0x007F</span>, <span class="number">0x00FF</span>, <span class="number">0x01FF</span>, <span class="number">0x03FF</span>, <span class="number">0x07FF</span>, <span class="number">0x0FFF</span>, <span class="number">0x1FFF</span>, <span class="number">0x3FFF</span>, <span class="number">0x7FFF</span>, <span class="number">0xFFFF</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biShiftRight</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> digitCount = <span class="built_in">Math</span>.floor(n / bitsPerDigit);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    arrayCopy(x.digits, digitCount, result.digits, <span class="number">0</span>, x.digits.length - digitCount);</span><br><span class="line">    <span class="keyword">var</span> bits = n % bitsPerDigit;</span><br><span class="line">    <span class="keyword">var</span> leftBits = bitsPerDigit - bits;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, i1 = i + <span class="number">1</span>; i &lt; result.digits.length - <span class="number">1</span>; ++i,</span><br><span class="line">      ++i1) &#123;</span><br><span class="line">      result.digits[i] = (result.digits[i] &gt;&gt;&gt; bits) | ((result.digits[i1] &amp; lowBitMasks[bits]) &lt;&lt; leftBits);</span><br><span class="line">    &#125;</span><br><span class="line">    result.digits[result.digits.length - <span class="number">1</span>] &gt;&gt;&gt;= bits;</span><br><span class="line">    result.isNeg = x.isNeg;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biMultiplyByRadixPower</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    arrayCopy(x.digits, <span class="number">0</span>, result.digits, n, result.digits.length - n);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biDivideByRadixPower</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    arrayCopy(x.digits, n, result.digits, <span class="number">0</span>, result.digits.length - n);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biModuloByRadixPower</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    arrayCopy(x.digits, <span class="number">0</span>, result.digits, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biCompare</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.isNeg != y.isNeg) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(x.isNeg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = x.digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.digits[i] != y.digits[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.isNeg) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(x.digits[i] &gt; y.digits[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(x.digits[i] &lt; y.digits[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biDivideModulo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nb = biNumBits(x);</span><br><span class="line">    <span class="keyword">var</span> tb = biNumBits(y);</span><br><span class="line">    <span class="keyword">var</span> origYIsNeg = y.isNeg;</span><br><span class="line">    <span class="keyword">var</span> q, r;</span><br><span class="line">    <span class="keyword">if</span> (nb &lt; tb) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.isNeg) &#123;</span><br><span class="line">        q = biCopy(bigOne);</span><br><span class="line">        q.isNeg = !y.isNeg;</span><br><span class="line">        x.isNeg = <span class="literal">false</span>;</span><br><span class="line">        y.isNeg = <span class="literal">false</span>;</span><br><span class="line">        r = biSubtract(y, x);</span><br><span class="line">        x.isNeg = <span class="literal">true</span>;</span><br><span class="line">        y.isNeg = origYIsNeg;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">        r = biCopy(x);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(q, r);</span><br><span class="line">    &#125;</span><br><span class="line">    q = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">    r = x;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">Math</span>.ceil(tb / bitsPerDigit) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> lambda = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (y.digits[t] &lt; biHalfRadix) &#123;</span><br><span class="line">      y = biShiftLeft(y, <span class="number">1</span>);</span><br><span class="line">      ++lambda;</span><br><span class="line">      ++tb;</span><br><span class="line">      t = <span class="built_in">Math</span>.ceil(tb / bitsPerDigit) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r = biShiftLeft(r, lambda);</span><br><span class="line">    nb += lambda;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">Math</span>.ceil(nb / bitsPerDigit) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = biMultiplyByRadixPower(y, n - t);</span><br><span class="line">    <span class="keyword">while</span> (biCompare(r, b) != -<span class="number">1</span>) &#123;</span><br><span class="line">      ++q.digits[n - t];</span><br><span class="line">      r = biSubtract(r, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &gt; t; --i) &#123;</span><br><span class="line">      <span class="keyword">var</span> ri = (i &gt;= r.digits.length) ? <span class="number">0</span> : r.digits[i];</span><br><span class="line">      <span class="keyword">var</span> ri1 = (i - <span class="number">1</span> &gt;= r.digits.length) ? <span class="number">0</span> : r.digits[i - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> ri2 = (i - <span class="number">2</span> &gt;= r.digits.length) ? <span class="number">0</span> : r.digits[i - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">var</span> yt = (t &gt;= y.digits.length) ? <span class="number">0</span> : y.digits[t];</span><br><span class="line">      <span class="keyword">var</span> yt1 = (t - <span class="number">1</span> &gt;= y.digits.length) ? <span class="number">0</span> : y.digits[t - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (ri == yt) &#123;</span><br><span class="line">        q.digits[i - t - <span class="number">1</span>] = maxDigitVal;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q.digits[i - t - <span class="number">1</span>] = <span class="built_in">Math</span>.floor((ri * biRadix + ri1) / yt);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> c1 = q.digits[i - t - <span class="number">1</span>] * ((yt * biRadix) + yt1);</span><br><span class="line">      <span class="keyword">var</span> c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);</span><br><span class="line">      <span class="keyword">while</span> (c1 &gt; c2) &#123;</span><br><span class="line">        --q.digits[i - t - <span class="number">1</span>];</span><br><span class="line">        c1 = q.digits[i - t - <span class="number">1</span>] * ((yt * biRadix) | yt1);</span><br><span class="line">        c2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);</span><br><span class="line">      &#125;</span><br><span class="line">      b = biMultiplyByRadixPower(y, i - t - <span class="number">1</span>);</span><br><span class="line">      r = biSubtract(r, biMultiplyDigit(b, q.digits[i - t - <span class="number">1</span>]));</span><br><span class="line">      <span class="keyword">if</span> (r.isNeg) &#123;</span><br><span class="line">        r = biAdd(r, b);</span><br><span class="line">        --q.digits[i - t - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r = biShiftRight(r, lambda);</span><br><span class="line">    q.isNeg = x.isNeg != origYIsNeg;</span><br><span class="line">    <span class="keyword">if</span> (x.isNeg) &#123;</span><br><span class="line">      <span class="keyword">if</span> (origYIsNeg) &#123;</span><br><span class="line">        q = biAdd(q, bigOne);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q = biSubtract(q, bigOne);</span><br><span class="line">      &#125;</span><br><span class="line">      y = biShiftRight(y, lambda);</span><br><span class="line">      r = biSubtract(y, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r.digits[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; biHighIndex(r) == <span class="number">0</span>)</span><br><span class="line">      r.isNeg = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(q, r);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biDivide</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biDivideModulo(x, y)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biModulo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biDivideModulo(x, y)[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biMultiplyMod</span>(<span class="params">x, y, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> biModulo(biMultiply(x, y), m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biPow</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = bigOne;</span><br><span class="line">    <span class="keyword">var</span> a = x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">        result = biMultiply(result, a);</span><br><span class="line">      y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      a = biMultiply(a, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">biPowMod</span>(<span class="params">x, y, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = bigOne;</span><br><span class="line">    <span class="keyword">var</span> a = x;</span><br><span class="line">    <span class="keyword">var</span> k = y;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((k.digits[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">        result = biMultiplyMod(result, a, m);</span><br><span class="line">      k = biShiftRight(k, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (k.digits[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; biHighIndex(k) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      a = biMultiplyMod(a, a, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> RSAAPP = &#123;&#125;;</span><br><span class="line">  RSAAPP.NoPadding = <span class="string">&quot;NoPadding&quot;</span>;</span><br><span class="line">  RSAAPP.PKCS1Padding = <span class="string">&quot;PKCS1Padding&quot;</span>;</span><br><span class="line">  RSAAPP.RawEncoding = <span class="string">&quot;RawEncoding&quot;</span>;</span><br><span class="line">  RSAAPP.NumericEncoding = <span class="string">&quot;NumericEncoding&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">RSAKeyPair</span>(<span class="params">encryptionExponent, decryptionExponent, modulus, keylen</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.e = biFromHex(encryptionExponent);</span><br><span class="line">    <span class="built_in">this</span>.d = biFromHex(decryptionExponent);</span><br><span class="line">    <span class="built_in">this</span>.m = biFromHex(modulus);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(keylen) != <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.chunkSize = <span class="number">2</span> * biHighIndex(<span class="built_in">this</span>.m);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.chunkSize = keylen / <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.radix = <span class="number">16</span>;</span><br><span class="line">    <span class="built_in">this</span>.barrett = <span class="keyword">new</span> BarrettMu(<span class="built_in">this</span>.m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">encryptedString</span>(<span class="params">key, s, pad, encoding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> sl = s.length;</span><br><span class="line">    <span class="keyword">var</span> i, j, k;</span><br><span class="line">    <span class="keyword">var</span> padtype;</span><br><span class="line">    <span class="keyword">var</span> encodingtype;</span><br><span class="line">    <span class="keyword">var</span> rpad;</span><br><span class="line">    <span class="keyword">var</span> al;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> block;</span><br><span class="line">    <span class="keyword">var</span> crypt;</span><br><span class="line">    <span class="keyword">var</span> text;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(pad) == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pad == RSAAPP.NoPadding) &#123;</span><br><span class="line">        padtype = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pad == RSAAPP.PKCS1Padding) &#123;</span><br><span class="line">        padtype = <span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        padtype = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      padtype = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(encoding) == <span class="string">&#x27;string&#x27;</span> &amp;&amp; encoding == RSAAPP.RawEncoding) &#123;</span><br><span class="line">      encodingtype = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      encodingtype = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (padtype == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sl &gt; key.chunkSize) &#123;</span><br><span class="line">        sl = key.chunkSize;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (padtype == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sl &gt; (key.chunkSize - <span class="number">11</span>)) &#123;</span><br><span class="line">        sl = key.chunkSize - <span class="number">11</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (padtype == <span class="number">2</span>) &#123;</span><br><span class="line">      j = sl - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j = key.chunkSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; sl) &#123;</span><br><span class="line">      <span class="keyword">if</span> (padtype) &#123;</span><br><span class="line">        a[j] = s.charCodeAt(i);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a[i] = s.charCodeAt(i);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (padtype == <span class="number">1</span>) &#123;</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    j = key.chunkSize - (sl % key.chunkSize);</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (padtype == <span class="number">2</span>) &#123;</span><br><span class="line">        rpad = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">while</span> (!rpad) &#123;</span><br><span class="line">          rpad = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = rpad;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a[i] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (padtype == <span class="number">2</span>) &#123;</span><br><span class="line">      a[sl] = <span class="number">0</span>;</span><br><span class="line">      a[key.chunkSize - <span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">      a[key.chunkSize - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    al = a.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; al; i += key.chunkSize) &#123;</span><br><span class="line">      block = <span class="keyword">new</span> <span class="built_in">BigInt</span>();</span><br><span class="line">      j = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (k = i; k &lt; (i + key.chunkSize); ++j) &#123;</span><br><span class="line">        block.digits[j] = a[k++];</span><br><span class="line">        block.digits[j] += a[k++] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      crypt = key.barrett.powMod(block, key.e);</span><br><span class="line">      <span class="keyword">if</span> (encodingtype == <span class="number">1</span>) &#123;</span><br><span class="line">        text = biToBytes(crypt);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        text = (key.radix == <span class="number">16</span>) ? biToHex(crypt) : biToString(crypt, key.radix);</span><br><span class="line">      &#125;</span><br><span class="line">      result += text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decryptedString</span>(<span class="params">key, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blocks = c.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">var</span> bi;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; blocks.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.radix == <span class="number">16</span>) &#123;</span><br><span class="line">        bi = biFromHex(blocks[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bi = biFromString(blocks[i], key.radix);</span><br><span class="line">      &#125;</span><br><span class="line">      b = key.barrett.powMod(bi, key.d);</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= biHighIndex(b); ++j) &#123;</span><br><span class="line">        result += <span class="built_in">String</span>.fromCharCode(b.digits[j] &amp; <span class="number">255</span>, b.digits[j] &gt;&gt; <span class="number">8</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.charCodeAt(result.length - <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      result = result.substring(<span class="number">0</span>, result.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (result);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">p, rsa_n</span>) </span>&#123;</span><br><span class="line">    setMaxDigits(<span class="number">131</span>);</span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">new</span> RSAKeyPair(<span class="string">&quot;10001&quot;</span>, <span class="string">&#x27;&#x27;</span>, rsa_n);</span><br><span class="line">    <span class="keyword">return</span> encryptedString(key, p);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="python实现">python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获 rsa_n 的值</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://login.shikee.com/getkey?v=4ca4976691907abf6c74c161d5f315db&quot;</span></span><br><span class="line">page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"><span class="comment"># print(page_text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则匹配出 rsa_n 的值</span></span><br><span class="line">ex = <span class="string">&#x27;var rsa_n = &quot;(.*?)&quot;;&#x27;</span></span><br><span class="line">rsa_n = re.findall(ex, page_text)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(rsa_n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现密码加密逆向</span></span><br><span class="line">pwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;./逆向/sklm.js&#x27;</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(file, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">funcName = <span class="string">&#x27;getPwd(&quot;&#123;0&#125;&quot;, &quot;&#123;1&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(pwd, rsa_n)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(7)--空中网逆向分析</title>
    <url>/posts/76921911/</url>
    <content><![CDATA[<h2 id="空中网登陆逆向">空中网登陆逆向</h2>
<h3 id="抓包分析">抓包分析</h3>
<ul>
<li>url：<a href="https://passport.kongzhong.com">https://passport.kongzhong.com</a></li>
<li>通过抓包，获取加密后的密码为<code>31d91808a7e803cf1d8b</code></li>
<li>显然是 16 进制数组成的密文，但是其密文位数并不是 16/32 的整数倍，所以并不是 md5 加密</li>
<li>通过全文搜索<code>password</code>，找到比较有意思的一行代码如下：其既不是语法要求的代码，也不是赋值的字符串</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#125;(<span class="string">&#x27;d 1x=&#123;\&#x27;1y\&#x27;:\&#x27;1f-1c-1w\&#x27;,\&#x27;1d\&#x27;:\&#x27;1u://1v.1f.1z\&#x27;,\&#x27;c\&#x27;:\&#x27;\&#x27;,\&#x27;k\&#x27;:\&#x27;\&#x27;,\&#x27;h\&#x27;:e,\&#x27;p\&#x27;:e,\&#x27;K\&#x27;:0,\&#x27;Z\&#x27;:z,\&#x27;l\&#x27;:z,\&#x27;1e\&#x27;:n()&#123;6.h=e;6.p=e;6.K=0;6.Z=M;&#125;,\&#x27;W\&#x27;:n(s)&#123;6.1e();6.p=s;d 7=&quot;1a=j&quot;;9(6.c!=e&amp;&amp;C.E(6.c)!=&quot;&quot;)&#123;7+=&quot;&amp;c=&quot;+x(6.c)&#125;;9(6.k!=e&amp;&amp;C.E(6.k)!=&quot;&quot;)&#123;7+=&quot;&amp;k=&quot;+x(6.k)&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;,\&#x27;A\&#x27;:n(7)&#123;9(6.Z==z)&#123;N z&#125;;9(6.h!=e&amp;&amp;6.h[&quot;1b&quot;]==&quot;1&quot;)&#123;d g=&#123;&#125;;g[&quot;o&quot;]=6.h[&quot;o&quot;];g[&quot;c&quot;]=6.h[&quot;c&quot;];g[&quot;17&quot;]=M;g[&quot;F&quot;]=6.h[&quot;F&quot;];6.p(g);N z&#125;;d 12=6.1d+&quot;/1D&quot;;C.1E(&#123;1C:z,12:12,D:\&#x27;1A\&#x27;,1B:\&#x27;1a\&#x27;,1a:\&#x27;j\&#x27;,g:7,1o:&quot;j&quot;,1n:1m,1r:n(1q)&#123;&#125;,1p:n(1s)&#123;&#125;&#125;)&#125;,\&#x27;1F\&#x27;:n(u)&#123;6.h=u;6.K=y.X(Y y());9(6.p!=e)&#123;d g=&#123;&#125;;9(u[&quot;1b&quot;]==&quot;0&quot;)&#123;g[&quot;c&quot;]=u[&quot;c&quot;];g[&quot;17&quot;]=z;g[&quot;1O&quot;]=u[&quot;1N&quot;];9(u[&quot;T&quot;]!=e&amp;&amp;u[&quot;T&quot;]==&quot;1&quot;)&#123;g[&quot;T&quot;]=M&#125;m&#123;g[&quot;T&quot;]=z&#125;&#125;m 9(u[&quot;1b&quot;]==&quot;1&quot;)&#123;g[&quot;o&quot;]=u[&quot;o&quot;];g[&quot;c&quot;]=u[&quot;c&quot;];g[&quot;17&quot;]=M&#125;;g[&quot;F&quot;]=6.h[&quot;F&quot;];6.p(g)&#125;;6.Z=M&#125;,\&#x27;1c\&#x27;:n(o,r,w,t,s)&#123;d I=y.X(Y y())-6.K;9((I/14)&gt;=13)&#123;6.h=e&#125;;9(6.h==e||6.h==&quot;&quot;)&#123;6.W(n(g)&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=1&quot;;9(6.c!=e&amp;&amp;C.E(6.c)!=&quot;&quot;)&#123;7+=&quot;&amp;c=&quot;+x(6.c)&#125;;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;V=&quot;+6.18(r,g[&quot;F&quot;]);7+=&quot;&amp;t=&quot;+t;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.k!=e&amp;&amp;C.E(6.k)!=&quot;&quot;)&#123;7+=&quot;&amp;k=&quot;+x(6.k)&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;)&#125;m&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=1&quot;;9(6.c!=e&amp;&amp;C.E(6.c)!=&quot;&quot;)&#123;7+=&quot;&amp;c=&quot;+x(6.c)&#125;;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;V=&quot;+6.18(r,6.h[&quot;F&quot;]);7+=&quot;&amp;t=&quot;+t;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.k!=e&amp;&amp;C.E(6.k)!=&quot;&quot;)&#123;7+=&quot;&amp;k=&quot;+x(6.k)&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;&#125;,\&#x27;1L\&#x27;:n(o,Q,w,t,s)&#123;d I=y.X(Y y())-6.K;9((I/14)&gt;=13)&#123;6.h=e&#125;;9(6.h==e||6.h==&quot;&quot;)&#123;6.W(n()&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=2&quot;;7+=&quot;&amp;c=&quot;+6.c;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;t=&quot;+t;7+=&quot;&amp;Q=&quot;+Q;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.k!=e)&#123;7+=&quot;&amp;k=&quot;+x(6.k)&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;)&#125;m&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=2&quot;;7+=&quot;&amp;c=&quot;+6.c;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;t=&quot;+t;7+=&quot;&amp;Q=&quot;+Q;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.k!=e)&#123;7+=&quot;&amp;k=&quot;+x(6.k)&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;&#125;,\&#x27;1P\&#x27;:n(o,r,w,s)&#123;d I=y.X(Y y())-6.K;9((I/14)&gt;=13)&#123;6.h=e&#125;;9(6.h==e||6.h==&quot;&quot;)&#123;6.W(n()&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=1l&quot;;7+=&quot;&amp;c=&quot;+6.c;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;V=&quot;+r;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;)&#125;m&#123;6.p=s;d 7=&quot;&quot;;7+=&quot;&amp;D=1l&quot;;7+=&quot;&amp;c=&quot;+6.c;7+=&quot;&amp;H=&quot;+o;7+=&quot;&amp;V=&quot;+r;9(w)&#123;7+=&quot;&amp;q=1&quot;&#125;m&#123;7+=&quot;&amp;q=0&quot;&#125;;9(6.l)&#123;7+=&quot;&amp;l=1&quot;&#125;;6.A(7)&#125;&#125;,\&#x27;18\&#x27;:n(15,r)&#123;9(r==e||r.v&lt;=0)&#123;N e&#125;;d f=&quot;&quot;;1g(d i=0;i&lt;r.v;i++)&#123;f+=r.1h(i).O()&#125;;d J=G.1k(f.v/5);d S=11(f.L(J)+f.L(J*2)+f.L(J*3)+f.L(J*4)+f.L(J*5));d 19=G.1Q(r.v/2);d U=G.1M(2,1I)-1;9(S&lt;2)&#123;N e&#125;;d B=G.1K(G.1J()*1G)%1H;f+=B;1j(f.v&gt;10)&#123;d a=f.1i(0,1);d b=f.1i(10,f.v);9(b.v&gt;10)&#123;f=b&#125;m&#123;f=(11(a)+11(b)).O()&#125;&#125;;f=(S*f+19)%U;d P=&quot;&quot;;d R=&quot;&quot;;1g(d i=0;i&lt;15.v;i++)&#123;P=11(15.1h(i)^G.1k((f/U)*1t));9(P&lt;16)&#123;R+=&quot;0&quot;+P.O(16)&#125;m R+=P.O(16);f=(S*f+19)%U&#125;;B=B.O(16);1j(B.v&lt;8)B=&quot;0&quot;+B;R+=B;N R&#125;&#125;;&#x27;</span>, <span class="number">62</span>, <span class="number">115</span>, <span class="string">&#x27;||||||this|param||if|||service|var|null|prand|data|j_data|||targetService|renew|else|function|user|f_call_back|toSave|pwd|call_back|vcode|vData|length|to_save|decodeURIComponent|Date|false|exec_login|salt|jQuery|type|trim|dc|Math|username|tempTime|sPos|timestamp|charAt|true|return|toString|enc_chr|smscode|enc_str|mult|requirevcode|modu|password|check|parse|new|completed||parseInt|url|180|1000|str||logged|encrypt|incr|jsonp|state|login|loginServer|init|kongzhong|for|charCodeAt|substring|while|floor|101|5000|timeout|jsonpCallback|error|json|success|xhr|255|http|sso|agent|KZLoginHandler|id|com|post|dataType|async|ajaxLogin|ajax|jsonpCallbackKongZ|1000000000|100000000|31|random|round|login_sms|pow|kzmsg|errors|login_reg|ceil&#x27;</span>.split(<span class="string">&#x27;|&#x27;</span>), <span class="number">0</span>, &#123;&#125;))</span><br></pre></td></tr></table></figure></div>
<ul>
<li>所以考虑 js 混淆：将 js 核心的相关代码进行变相的加密，加密后的数据就是 js 混淆之后的结果。</li>
<li>处理方法：反混淆
<ul>
<li>反混淆的线上工具(不理想)</li>
<li>浏览器自带的反混淆工具设置(推荐)
<ul>
<li>开发者工具中的 Source–&gt;Settings–&gt;Sources–&gt;Search in anonymous and content scripts✔️</li>
<li>重新进行全局搜索，找到一个 VM 开头的包，这个包就是反混淆之后的结果</li>
</ul>
</li>
</ul>
</li>
<li>分析反混淆之后的加密代码，发现有一个未知参数<code>data[&quot;dc&quot;]</code>，并且在当前代码中并没有找到<code>data</code>的相关定义，所以进行全局搜索
<ul>
<li>直接搜索<code>data</code>，结果太多，不便于筛选</li>
<li>搜索<code>data[&quot;dc&quot;]</code>，没有找到匹配的结果</li>
<li>但是其值必定是<strong>某个网络请求请求到的数值</strong>或者<strong>前端页面中的数值</strong></li>
<li>通过刷新网页抓取所有请求数据，查看哪个请求包中存在与<code>data[&quot;dc&quot;]</code>的数值</li>
</ul>
</li>
</ul>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> KZLoginHandler = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;kongzhong-login-agent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loginServer&#x27;</span>: <span class="string">&#x27;http://sso.kongzhong.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;service&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;targetService&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j_data&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;f_call_back&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;timestamp&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;renew&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;init&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.j_data = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.f_call_back = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.completed = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;check&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">call_back</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">        <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">        <span class="keyword">var</span> param = <span class="string">&quot;jsonp=j&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.service != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.service) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.service)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.targetService != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.targetService) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            param += <span class="string">&quot;&amp;targetService=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.targetService)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">            param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;exec_login&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.completed == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.j_data != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.j_data[<span class="string">&quot;state&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">            data[<span class="string">&quot;user&quot;</span>] = <span class="built_in">this</span>.j_data[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">            data[<span class="string">&quot;service&quot;</span>] = <span class="built_in">this</span>.j_data[<span class="string">&quot;service&quot;</span>];</span><br><span class="line">            data[<span class="string">&quot;logged&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">            data[<span class="string">&quot;dc&quot;</span>] = <span class="built_in">this</span>.j_data[<span class="string">&quot;dc&quot;</span>];</span><br><span class="line">            <span class="built_in">this</span>.f_call_back(data);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="built_in">this</span>.loginServer + <span class="string">&quot;/ajaxLogin&quot;</span>;</span><br><span class="line">        jQuery.ajax(&#123;</span><br><span class="line">            <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">            <span class="attr">jsonp</span>: <span class="string">&#x27;j&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: param,</span><br><span class="line">            <span class="attr">jsonpCallback</span>: <span class="string">&quot;j&quot;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123; &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123; &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;jsonpCallbackKongZ&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">vData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.j_data = vData;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.f_call_back != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (vData[<span class="string">&quot;state&quot;</span>] == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                data[<span class="string">&quot;service&quot;</span>] = vData[<span class="string">&quot;service&quot;</span>];</span><br><span class="line">                data[<span class="string">&quot;logged&quot;</span>] = <span class="literal">false</span>;</span><br><span class="line">                data[<span class="string">&quot;errors&quot;</span>] = vData[<span class="string">&quot;kzmsg&quot;</span>];</span><br><span class="line">                <span class="keyword">if</span> (vData[<span class="string">&quot;requirevcode&quot;</span>] != <span class="literal">null</span> &amp;&amp; vData[<span class="string">&quot;requirevcode&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                    data[<span class="string">&quot;requirevcode&quot;</span>] = <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    data[<span class="string">&quot;requirevcode&quot;</span>] = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vData[<span class="string">&quot;state&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">                data[<span class="string">&quot;user&quot;</span>] = vData[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">                data[<span class="string">&quot;service&quot;</span>] = vData[<span class="string">&quot;service&quot;</span>];</span><br><span class="line">                data[<span class="string">&quot;logged&quot;</span>] = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line">            data[<span class="string">&quot;dc&quot;</span>] = <span class="built_in">this</span>.j_data[<span class="string">&quot;dc&quot;</span>];</span><br><span class="line">            <span class="built_in">this</span>.f_call_back(data)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.completed = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;login&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user, pwd, to_save, vcode, call_back</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tempTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - <span class="built_in">this</span>.timestamp;</span><br><span class="line">        <span class="keyword">if</span> ((tempTime / <span class="number">1000</span>) &gt;= <span class="number">180</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.j_data = <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.j_data == <span class="literal">null</span> || <span class="built_in">this</span>.j_data == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.check(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">                <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                param += <span class="string">&quot;&amp;type=1&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.service != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.service) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.service)</span><br><span class="line">                &#125;;</span><br><span class="line">                param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">                param += <span class="string">&quot;&amp;password=&quot;</span> + <span class="built_in">this</span>.encrypt(pwd, data[<span class="string">&quot;dc&quot;</span>]);</span><br><span class="line">                param += <span class="string">&quot;&amp;vcode=&quot;</span> + vcode;</span><br><span class="line">                <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.targetService != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.targetService) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;targetService=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.targetService)</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">            <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            param += <span class="string">&quot;&amp;type=1&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.service != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.service) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.service)</span><br><span class="line">            &#125;;</span><br><span class="line">            param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">            param += <span class="string">&quot;&amp;password=&quot;</span> + <span class="built_in">this</span>.encrypt(pwd, <span class="built_in">this</span>.j_data[<span class="string">&quot;dc&quot;</span>]);</span><br><span class="line">            param += <span class="string">&quot;&amp;vcode=&quot;</span> + vcode;</span><br><span class="line">            <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.targetService != <span class="literal">null</span> &amp;&amp; jQuery.trim(<span class="built_in">this</span>.targetService) != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;targetService=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.targetService)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;login_sms&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user, smscode, to_save, vcode, call_back</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tempTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - <span class="built_in">this</span>.timestamp;</span><br><span class="line">        <span class="keyword">if</span> ((tempTime / <span class="number">1000</span>) &gt;= <span class="number">180</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.j_data = <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.j_data == <span class="literal">null</span> || <span class="built_in">this</span>.j_data == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.check(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">                <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                param += <span class="string">&quot;&amp;type=2&quot;</span>;</span><br><span class="line">                param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">this</span>.service;</span><br><span class="line">                param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">                param += <span class="string">&quot;&amp;vcode=&quot;</span> + vcode;</span><br><span class="line">                param += <span class="string">&quot;&amp;smscode=&quot;</span> + smscode;</span><br><span class="line">                <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.targetService != <span class="literal">null</span>) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;targetService=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.targetService)</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">            <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            param += <span class="string">&quot;&amp;type=2&quot;</span>;</span><br><span class="line">            param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">this</span>.service;</span><br><span class="line">            param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">            param += <span class="string">&quot;&amp;vcode=&quot;</span> + vcode;</span><br><span class="line">            param += <span class="string">&quot;&amp;smscode=&quot;</span> + smscode;</span><br><span class="line">            <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.targetService != <span class="literal">null</span>) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;targetService=&quot;</span> + <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.targetService)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;login_reg&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user, pwd, to_save, call_back</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tempTime = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - <span class="built_in">this</span>.timestamp;</span><br><span class="line">        <span class="keyword">if</span> ((tempTime / <span class="number">1000</span>) &gt;= <span class="number">180</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.j_data = <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.j_data == <span class="literal">null</span> || <span class="built_in">this</span>.j_data == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.check(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">                <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                param += <span class="string">&quot;&amp;type=101&quot;</span>;</span><br><span class="line">                param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">this</span>.service;</span><br><span class="line">                param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">                param += <span class="string">&quot;&amp;password=&quot;</span> + pwd;</span><br><span class="line">                <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                    param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.f_call_back = call_back;</span><br><span class="line">            <span class="keyword">var</span> param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            param += <span class="string">&quot;&amp;type=101&quot;</span>;</span><br><span class="line">            param += <span class="string">&quot;&amp;service=&quot;</span> + <span class="built_in">this</span>.service;</span><br><span class="line">            param += <span class="string">&quot;&amp;username=&quot;</span> + user;</span><br><span class="line">            param += <span class="string">&quot;&amp;password=&quot;</span> + pwd;</span><br><span class="line">            <span class="keyword">if</span> (to_save) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=1&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;toSave=0&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.renew) &#123;</span><br><span class="line">                param += <span class="string">&quot;&amp;renew=1&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">this</span>.exec_login(param)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;encrypt&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">str, pwd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pwd == <span class="literal">null</span> || pwd.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> prand = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pwd.length; i++) &#123;</span><br><span class="line">            prand += pwd.charCodeAt(i).toString()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> sPos = <span class="built_in">Math</span>.floor(prand.length / <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">var</span> mult = <span class="built_in">parseInt</span>(prand.charAt(sPos) + prand.charAt(sPos * <span class="number">2</span>) + prand.charAt(sPos * <span class="number">3</span>) + prand.charAt(sPos * <span class="number">4</span>) + prand.charAt(sPos * <span class="number">5</span>));</span><br><span class="line">        <span class="keyword">var</span> incr = <span class="built_in">Math</span>.ceil(pwd.length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> modu = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (mult &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> salt = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">1000000000</span>) % <span class="number">100000000</span>;</span><br><span class="line">        prand += salt;</span><br><span class="line">        <span class="keyword">while</span> (prand.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = prand.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> b = prand.substring(<span class="number">10</span>, prand.length);</span><br><span class="line">            <span class="keyword">if</span> (b.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                prand = b</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prand = (<span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        prand = (mult * prand + incr) % modu;</span><br><span class="line">        <span class="keyword">var</span> enc_chr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> enc_str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            enc_chr = <span class="built_in">parseInt</span>(str.charCodeAt(i) ^ <span class="built_in">Math</span>.floor((prand / modu) * <span class="number">255</span>));</span><br><span class="line">            <span class="keyword">if</span> (enc_chr &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                enc_str += <span class="string">&quot;0&quot;</span> + enc_chr.toString(<span class="number">16</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                enc_str += enc_chr.toString(<span class="number">16</span>);</span><br><span class="line">            prand = (mult * prand + incr) % modu</span><br><span class="line">        &#125;;</span><br><span class="line">        salt = salt.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">while</span> (salt.length &lt; <span class="number">8</span>)</span><br><span class="line">            salt = <span class="string">&quot;0&quot;</span> + salt;</span><br><span class="line">        enc_str += salt;</span><br><span class="line">        <span class="keyword">return</span> enc_str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">p, dc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> KZLoginHandler.encrypt(p, dc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="python实现">python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求获取 dc</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://passport.kongzhong.com/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://sso.kongzhong.com/ajaxLogin?j=j&amp;jsonp=j&amp;service=https://passport.kongzhong.com/&amp;_=1652095333635&quot;</span></span><br><span class="line">data = requests.get(url=url, headers=headers).text</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则获取 dc 数值</span></span><br><span class="line">ex = <span class="string">&quot;KZLoginHandler.jsonpCallbackKongZ\((.*)\)&quot;</span></span><br><span class="line">dc = re.findall(ex, data)[<span class="number">0</span>]</span><br><span class="line">dc = json.loads(dc)[<span class="string">&#x27;dc&#x27;</span>]</span><br><span class="line"><span class="comment"># print(dc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密解密逆向</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;./逆向/空中.js&#x27;</span></span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(file, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">funcName = <span class="string">&#x27;getPwd(&quot;&#123;0&#125;&quot;, &quot;&#123;1&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(password, dc)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(8)--长房网逆向分析</title>
    <url>/posts/d21ea38/</url>
    <content><![CDATA[<h2 id="长房网登陆逆向">长房网登陆逆向</h2>
<h3 id="抓包分析">抓包分析</h3>
<ul>
<li>url：<a href="https://eip.chanfine.com/login.jsp">https://eip.chanfine.com/login.jsp</a></li>
<li>通过抓包抓取 post 请求的包，发现其中涉及<code>j_username</code>和<code>j_password</code>，其中密码的加密方式比较特殊</li>
<li>全局搜索<code>j_password</code>，找到对应的加密函数，并且查找其中使用的<code>desEncrypt</code>是存在于经过 js 混淆处理后的代码中的，找到其定义处</li>
</ul>
<span id="more"></span>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptPassword</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.forms[<span class="number">0</span>].j_password.value = desEncrypt(<span class="built_in">document</span>.forms[<span class="number">0</span>].j_password.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">desEncrypt</span>(<span class="params">value, xForm, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_0(xForm)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> keyObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span> || <span class="string">&quot;aes&quot;</span> == type.toLowerCase()) &#123;</span><br><span class="line">            keyObj = SECURITYKEY.get();</span><br><span class="line">            value = CryptoJS.AES.encrypt(value, CryptoJS.enc.Utf8.parse(keyObj.key), &#123;</span><br><span class="line">                <span class="attr">iv</span>: CryptoJS.enc.Utf8.parse(keyObj.iv)</span><br><span class="line">            &#125;).toString()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            keyObj = SECURITYKEY.get(<span class="string">&#x27;des&#x27;</span>);</span><br><span class="line">            value = CryptoJS.DES.encrypt(value, CryptoJS.enc.Hex.parse(keyObj.key), &#123;</span><br><span class="line">                <span class="attr">iv</span>: CryptoJS.enc.Hex.parse(keyObj.iv)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyObj.security + value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>继续逆向分析，追溯到<code>SECURITYKEY</code>字典中的<code>_2</code>和<code>get</code>中，并且其中涉及<code>getSessionId()</code>，<code>session</code>的(0, 16)位组成<code>key</code>，(16, 32)位组成<code>iv</code></li>
<li>注意到：<code>SessionId</code>是保存在<code>Cookies</code>中的</li>
<li>经过字符串的定义后，加载代码正常，但是还是无法实现加密逆向，因为缺少<code>CryptoJS</code>的定义</li>
</ul>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CryptoJS v3.1.2</span></span><br><span class="line"><span class="comment">code.google.com/p/crypto-js</span></span><br><span class="line"><span class="comment">(c) 2009-2013 by Jeff Mott. All rights reserved.</span></span><br><span class="line"><span class="comment">code.google.com/p/crypto-js/wiki/License</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> CryptoJS = CryptoJS || <span class="function"><span class="keyword">function</span> (<span class="params">u, p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = &#123;&#125;,</span><br><span class="line">        l = d.lib = &#123;&#125;,</span><br><span class="line">        s = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">        t = l.Base = &#123;</span><br><span class="line">            <span class="attr">extend</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                s.prototype = <span class="built_in">this</span>;</span><br><span class="line">                <span class="keyword">var</span> c = <span class="keyword">new</span> s;</span><br><span class="line">                a &amp;&amp; c.mixIn(a);</span><br><span class="line">                c.hasOwnProperty(<span class="string">&quot;init&quot;</span>) || (c.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    c.$super.init.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">                c.init.prototype = c;</span><br><span class="line">                c.$super = <span class="built_in">this</span>;</span><br><span class="line">                <span class="keyword">return</span> c</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">create</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> a = <span class="built_in">this</span>.extend();</span><br><span class="line">                a.init.apply(a, <span class="built_in">arguments</span>);</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">            <span class="attr">mixIn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> a)</span><br><span class="line">                    a.hasOwnProperty(c) &amp;&amp; (<span class="built_in">this</span>[c] = a[c]);</span><br><span class="line">                a.hasOwnProperty(<span class="string">&quot;toString&quot;</span>) &amp;&amp; (<span class="built_in">this</span>.toString = a.toString)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.init.prototype.extend(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        r = l.WordArray = t.extend(&#123;</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">                a = <span class="built_in">this</span>.words = a || [];</span><br><span class="line">                <span class="built_in">this</span>.sigBytes = c != p ? c : <span class="number">4</span> * a.length</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a || v).stringify(<span class="built_in">this</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">concat</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> c = <span class="built_in">this</span>.words,</span><br><span class="line">                    e = a.words,</span><br><span class="line">                    j = <span class="built_in">this</span>.sigBytes;</span><br><span class="line">                a = a.sigBytes;</span><br><span class="line">                <span class="built_in">this</span>.clamp();</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; a; k++)</span><br><span class="line">                        c[j + k &gt;&gt;&gt; <span class="number">2</span>] |= (e[k &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (k % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * ((j + k) % <span class="number">4</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">65535</span> &lt; e.length)</span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; a; k += <span class="number">4</span>)</span><br><span class="line">                        c[j + k &gt;&gt;&gt; <span class="number">2</span>] = e[k &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    c.push.apply(c, e);</span><br><span class="line">                <span class="built_in">this</span>.sigBytes += a;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clamp</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> a = <span class="built_in">this</span>.words,</span><br><span class="line">                    c = <span class="built_in">this</span>.sigBytes;</span><br><span class="line">                a[c &gt;&gt;&gt; <span class="number">2</span>] &amp;= <span class="number">4294967295</span> &lt;&lt; <span class="number">32</span> - <span class="number">8</span> * (c % <span class="number">4</span>);</span><br><span class="line">                a.length = u.ceil(c / <span class="number">4</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.clone.call(<span class="built_in">this</span>);</span><br><span class="line">                a.words = <span class="built_in">this</span>.words.slice(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">random</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> c = [], e = <span class="number">0</span>; e &lt; a; e += <span class="number">4</span>)</span><br><span class="line">                    c.push(<span class="number">4294967296</span> * u.random() | <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> r.init(c, a)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        w = d.enc = &#123;&#125;,</span><br><span class="line">        v = w.Hex = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> c = a.words;</span><br><span class="line">                a = a.sigBytes;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> e = [], j = <span class="number">0</span>; j &lt; a; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> k = c[j &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (j % <span class="number">4</span>) &amp; <span class="number">255</span>;</span><br><span class="line">                    e.push((k &gt;&gt;&gt; <span class="number">4</span>).toString(<span class="number">16</span>));</span><br><span class="line">                    e.push((k &amp; <span class="number">15</span>).toString(<span class="number">16</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> e.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> c = a.length, e = [], j = <span class="number">0</span>; j &lt; c; j += <span class="number">2</span>)</span><br><span class="line">                    e[j &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(a.substr(j, <span class="number">2</span>), <span class="number">16</span>) &lt;&lt; <span class="number">24</span> - <span class="number">4</span> * (j % <span class="number">8</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> r.init(e, c / <span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        b = w.Latin1 = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> c = a.words;</span><br><span class="line">                a = a.sigBytes;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> e = [], j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">                    e.push(<span class="built_in">String</span>.fromCharCode(c[j &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (j % <span class="number">4</span>) &amp; <span class="number">255</span>));</span><br><span class="line">                <span class="keyword">return</span> e.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> c = a.length, e = [], j = <span class="number">0</span>; j &lt; c; j++)</span><br><span class="line">                    e[j &gt;&gt;&gt; <span class="number">2</span>] |= (a.charCodeAt(j) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * (j % <span class="number">4</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> r.init(e, c)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        x = w.Utf8 = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(b.stringify(a)))</span><br><span class="line">                &#125; <span class="keyword">catch</span> (c) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;Malformed UTF-8 data&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> b.parse(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(a)))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        q = l.BufferedBlockAlgorithm = t.extend(&#123;</span><br><span class="line">            <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>._data = <span class="keyword">new</span> r.init;</span><br><span class="line">                <span class="built_in">this</span>._nDataBytes = <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_append</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> a &amp;&amp; (a = x.parse(a));</span><br><span class="line">                <span class="built_in">this</span>._data.concat(a);</span><br><span class="line">                <span class="built_in">this</span>._nDataBytes += a.sigBytes</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_process</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> c = <span class="built_in">this</span>._data,</span><br><span class="line">                    e = c.words,</span><br><span class="line">                    j = c.sigBytes,</span><br><span class="line">                    k = <span class="built_in">this</span>.blockSize,</span><br><span class="line">                    b = j / (<span class="number">4</span> * k),</span><br><span class="line">                    b = a ? u.ceil(b) : u.max((b | <span class="number">0</span>) - <span class="built_in">this</span>._minBufferSize, <span class="number">0</span>);</span><br><span class="line">                a = b * k;</span><br><span class="line">                j = u.min(<span class="number">4</span> * a, j);</span><br><span class="line">                <span class="keyword">if</span> (a) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> q = <span class="number">0</span>; q &lt; a; q += k)</span><br><span class="line">                        <span class="built_in">this</span>._doProcessBlock(e, q);</span><br><span class="line">                    q = e.splice(<span class="number">0</span>, a);</span><br><span class="line">                    c.sigBytes -= j</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> r.init(q, j)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> a = t.clone.call(<span class="built_in">this</span>);</span><br><span class="line">                a._data = <span class="built_in">this</span>._data.clone();</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_minBufferSize</span>: <span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">    l.Hasher = q.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: t.extend(),</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(a);</span><br><span class="line">            <span class="built_in">this</span>.reset()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            q.reset.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>._doReset()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._append(a);</span><br><span class="line">            <span class="built_in">this</span>._process();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">finalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            a &amp;&amp; <span class="built_in">this</span>._append(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._doFinalize()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">_createHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b, e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">new</span> a.init(e)).finalize(b)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_createHmacHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b, e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">new</span> n.HMAC.init(a, e)).finalize(b)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> n = d.algo = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;(<span class="built_in">Math</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> u = CryptoJS,</span><br><span class="line">        p = u.lib.WordArray;</span><br><span class="line">    u.enc.Base64 = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> l = d.words,</span><br><span class="line">                p = d.sigBytes,</span><br><span class="line">                t = <span class="built_in">this</span>._map;</span><br><span class="line">            d.clamp();</span><br><span class="line">            d = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; p; r += <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> w = (l[r &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (r % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span> | (l[r + <span class="number">1</span> &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * ((r + <span class="number">1</span>) % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">8</span> | l[r + <span class="number">2</span> &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * ((r + <span class="number">2</span>) % <span class="number">4</span>) &amp; <span class="number">255</span>, v = <span class="number">0</span>; <span class="number">4</span> &gt; v &amp;&amp; r + <span class="number">0.75</span> * v &lt; p; v++)</span><br><span class="line">                    d.push(t.charAt(w &gt;&gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - v) &amp; <span class="number">63</span>));</span><br><span class="line">            <span class="keyword">if</span> (l = t.charAt(<span class="number">64</span>))</span><br><span class="line">                <span class="keyword">for</span> (; d.length % <span class="number">4</span>;)</span><br><span class="line">                    d.push(l);</span><br><span class="line">            <span class="keyword">return</span> d.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> l = d.length,</span><br><span class="line">                s = <span class="built_in">this</span>._map,</span><br><span class="line">                t = s.charAt(<span class="number">64</span>);</span><br><span class="line">            t &amp;&amp; (t = d.indexOf(t),</span><br><span class="line">                -<span class="number">1</span> != t &amp;&amp; (l = t));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = [], r = <span class="number">0</span>, w = <span class="number">0</span>; w &lt; l; w++)</span><br><span class="line">                <span class="keyword">if</span> (w % <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> v = s.indexOf(d.charAt(w - <span class="number">1</span>)) &lt;&lt; <span class="number">2</span> * (w % <span class="number">4</span>),</span><br><span class="line">                        b = s.indexOf(d.charAt(w)) &gt;&gt;&gt; <span class="number">6</span> - <span class="number">2</span> * (w % <span class="number">4</span>);</span><br><span class="line">                    t[r &gt;&gt;&gt; <span class="number">2</span>] |= (v | b) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * (r % <span class="number">4</span>);</span><br><span class="line">                    r++</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> p.create(t, r)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_map</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">b, n, a, c, e, j, k</span>) </span>&#123;</span><br><span class="line">        b = b + (n &amp; a | ~n &amp; c) + e + k;</span><br><span class="line">        <span class="keyword">return</span> (b &lt;&lt; j | b &gt;&gt;&gt; <span class="number">32</span> - j) + n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">b, n, a, c, e, j, k</span>) </span>&#123;</span><br><span class="line">        b = b + (n &amp; c | a &amp; ~c) + e + k;</span><br><span class="line">        <span class="keyword">return</span> (b &lt;&lt; j | b &gt;&gt;&gt; <span class="number">32</span> - j) + n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">b, n, a, c, e, j, k</span>) </span>&#123;</span><br><span class="line">        b = b + (n ^ a ^ c) + e + k;</span><br><span class="line">        <span class="keyword">return</span> (b &lt;&lt; j | b &gt;&gt;&gt; <span class="number">32</span> - j) + n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">b, n, a, c, e, j, k</span>) </span>&#123;</span><br><span class="line">        b = b + (a ^ (n | ~c)) + e + k;</span><br><span class="line">        <span class="keyword">return</span> (b &lt;&lt; j | b &gt;&gt;&gt; <span class="number">32</span> - j) + n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = <span class="number">0</span>; <span class="number">64</span> &gt; x; x++)</span><br><span class="line">        b[x] = <span class="number">4294967296</span> * u.abs(u.sin(x + <span class="number">1</span>)) | <span class="number">0</span>;</span><br><span class="line">    r = r.MD5 = v.extend(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._hash = <span class="keyword">new</span> w.init([<span class="number">1732584193</span>, <span class="number">4023233417</span>, <span class="number">2562383102</span>, <span class="number">271733878</span>])</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">q, n</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; <span class="number">16</span> &gt; a; a++) &#123;</span><br><span class="line">                <span class="keyword">var</span> c = n + a,</span><br><span class="line">                    e = q[c];</span><br><span class="line">                q[c] = (e &lt;&lt; <span class="number">8</span> | e &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">16711935</span> | (e &lt;&lt; <span class="number">24</span> | e &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">4278255360</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">this</span>._hash.words,</span><br><span class="line">                c = q[n + <span class="number">0</span>],</span><br><span class="line">                e = q[n + <span class="number">1</span>],</span><br><span class="line">                j = q[n + <span class="number">2</span>],</span><br><span class="line">                k = q[n + <span class="number">3</span>],</span><br><span class="line">                z = q[n + <span class="number">4</span>],</span><br><span class="line">                r = q[n + <span class="number">5</span>],</span><br><span class="line">                t = q[n + <span class="number">6</span>],</span><br><span class="line">                w = q[n + <span class="number">7</span>],</span><br><span class="line">                v = q[n + <span class="number">8</span>],</span><br><span class="line">                A = q[n + <span class="number">9</span>],</span><br><span class="line">                B = q[n + <span class="number">10</span>],</span><br><span class="line">                C = q[n + <span class="number">11</span>],</span><br><span class="line">                u = q[n + <span class="number">12</span>],</span><br><span class="line">                D = q[n + <span class="number">13</span>],</span><br><span class="line">                E = q[n + <span class="number">14</span>],</span><br><span class="line">                x = q[n + <span class="number">15</span>],</span><br><span class="line">                f = a[<span class="number">0</span>],</span><br><span class="line">                m = a[<span class="number">1</span>],</span><br><span class="line">                g = a[<span class="number">2</span>],</span><br><span class="line">                h = a[<span class="number">3</span>],</span><br><span class="line">                f = p(f, m, g, h, c, <span class="number">7</span>, b[<span class="number">0</span>]),</span><br><span class="line">                h = p(h, f, m, g, e, <span class="number">12</span>, b[<span class="number">1</span>]),</span><br><span class="line">                g = p(g, h, f, m, j, <span class="number">17</span>, b[<span class="number">2</span>]),</span><br><span class="line">                m = p(m, g, h, f, k, <span class="number">22</span>, b[<span class="number">3</span>]),</span><br><span class="line">                f = p(f, m, g, h, z, <span class="number">7</span>, b[<span class="number">4</span>]),</span><br><span class="line">                h = p(h, f, m, g, r, <span class="number">12</span>, b[<span class="number">5</span>]),</span><br><span class="line">                g = p(g, h, f, m, t, <span class="number">17</span>, b[<span class="number">6</span>]),</span><br><span class="line">                m = p(m, g, h, f, w, <span class="number">22</span>, b[<span class="number">7</span>]),</span><br><span class="line">                f = p(f, m, g, h, v, <span class="number">7</span>, b[<span class="number">8</span>]),</span><br><span class="line">                h = p(h, f, m, g, A, <span class="number">12</span>, b[<span class="number">9</span>]),</span><br><span class="line">                g = p(g, h, f, m, B, <span class="number">17</span>, b[<span class="number">10</span>]),</span><br><span class="line">                m = p(m, g, h, f, C, <span class="number">22</span>, b[<span class="number">11</span>]),</span><br><span class="line">                f = p(f, m, g, h, u, <span class="number">7</span>, b[<span class="number">12</span>]),</span><br><span class="line">                h = p(h, f, m, g, D, <span class="number">12</span>, b[<span class="number">13</span>]),</span><br><span class="line">                g = p(g, h, f, m, E, <span class="number">17</span>, b[<span class="number">14</span>]),</span><br><span class="line">                m = p(m, g, h, f, x, <span class="number">22</span>, b[<span class="number">15</span>]),</span><br><span class="line">                f = d(f, m, g, h, e, <span class="number">5</span>, b[<span class="number">16</span>]),</span><br><span class="line">                h = d(h, f, m, g, t, <span class="number">9</span>, b[<span class="number">17</span>]),</span><br><span class="line">                g = d(g, h, f, m, C, <span class="number">14</span>, b[<span class="number">18</span>]),</span><br><span class="line">                m = d(m, g, h, f, c, <span class="number">20</span>, b[<span class="number">19</span>]),</span><br><span class="line">                f = d(f, m, g, h, r, <span class="number">5</span>, b[<span class="number">20</span>]),</span><br><span class="line">                h = d(h, f, m, g, B, <span class="number">9</span>, b[<span class="number">21</span>]),</span><br><span class="line">                g = d(g, h, f, m, x, <span class="number">14</span>, b[<span class="number">22</span>]),</span><br><span class="line">                m = d(m, g, h, f, z, <span class="number">20</span>, b[<span class="number">23</span>]),</span><br><span class="line">                f = d(f, m, g, h, A, <span class="number">5</span>, b[<span class="number">24</span>]),</span><br><span class="line">                h = d(h, f, m, g, E, <span class="number">9</span>, b[<span class="number">25</span>]),</span><br><span class="line">                g = d(g, h, f, m, k, <span class="number">14</span>, b[<span class="number">26</span>]),</span><br><span class="line">                m = d(m, g, h, f, v, <span class="number">20</span>, b[<span class="number">27</span>]),</span><br><span class="line">                f = d(f, m, g, h, D, <span class="number">5</span>, b[<span class="number">28</span>]),</span><br><span class="line">                h = d(h, f, m, g, j, <span class="number">9</span>, b[<span class="number">29</span>]),</span><br><span class="line">                g = d(g, h, f, m, w, <span class="number">14</span>, b[<span class="number">30</span>]),</span><br><span class="line">                m = d(m, g, h, f, u, <span class="number">20</span>, b[<span class="number">31</span>]),</span><br><span class="line">                f = l(f, m, g, h, r, <span class="number">4</span>, b[<span class="number">32</span>]),</span><br><span class="line">                h = l(h, f, m, g, v, <span class="number">11</span>, b[<span class="number">33</span>]),</span><br><span class="line">                g = l(g, h, f, m, C, <span class="number">16</span>, b[<span class="number">34</span>]),</span><br><span class="line">                m = l(m, g, h, f, E, <span class="number">23</span>, b[<span class="number">35</span>]),</span><br><span class="line">                f = l(f, m, g, h, e, <span class="number">4</span>, b[<span class="number">36</span>]),</span><br><span class="line">                h = l(h, f, m, g, z, <span class="number">11</span>, b[<span class="number">37</span>]),</span><br><span class="line">                g = l(g, h, f, m, w, <span class="number">16</span>, b[<span class="number">38</span>]),</span><br><span class="line">                m = l(m, g, h, f, B, <span class="number">23</span>, b[<span class="number">39</span>]),</span><br><span class="line">                f = l(f, m, g, h, D, <span class="number">4</span>, b[<span class="number">40</span>]),</span><br><span class="line">                h = l(h, f, m, g, c, <span class="number">11</span>, b[<span class="number">41</span>]),</span><br><span class="line">                g = l(g, h, f, m, k, <span class="number">16</span>, b[<span class="number">42</span>]),</span><br><span class="line">                m = l(m, g, h, f, t, <span class="number">23</span>, b[<span class="number">43</span>]),</span><br><span class="line">                f = l(f, m, g, h, A, <span class="number">4</span>, b[<span class="number">44</span>]),</span><br><span class="line">                h = l(h, f, m, g, u, <span class="number">11</span>, b[<span class="number">45</span>]),</span><br><span class="line">                g = l(g, h, f, m, x, <span class="number">16</span>, b[<span class="number">46</span>]),</span><br><span class="line">                m = l(m, g, h, f, j, <span class="number">23</span>, b[<span class="number">47</span>]),</span><br><span class="line">                f = s(f, m, g, h, c, <span class="number">6</span>, b[<span class="number">48</span>]),</span><br><span class="line">                h = s(h, f, m, g, w, <span class="number">10</span>, b[<span class="number">49</span>]),</span><br><span class="line">                g = s(g, h, f, m, E, <span class="number">15</span>, b[<span class="number">50</span>]),</span><br><span class="line">                m = s(m, g, h, f, r, <span class="number">21</span>, b[<span class="number">51</span>]),</span><br><span class="line">                f = s(f, m, g, h, u, <span class="number">6</span>, b[<span class="number">52</span>]),</span><br><span class="line">                h = s(h, f, m, g, k, <span class="number">10</span>, b[<span class="number">53</span>]),</span><br><span class="line">                g = s(g, h, f, m, B, <span class="number">15</span>, b[<span class="number">54</span>]),</span><br><span class="line">                m = s(m, g, h, f, e, <span class="number">21</span>, b[<span class="number">55</span>]),</span><br><span class="line">                f = s(f, m, g, h, v, <span class="number">6</span>, b[<span class="number">56</span>]),</span><br><span class="line">                h = s(h, f, m, g, x, <span class="number">10</span>, b[<span class="number">57</span>]),</span><br><span class="line">                g = s(g, h, f, m, t, <span class="number">15</span>, b[<span class="number">58</span>]),</span><br><span class="line">                m = s(m, g, h, f, D, <span class="number">21</span>, b[<span class="number">59</span>]),</span><br><span class="line">                f = s(f, m, g, h, z, <span class="number">6</span>, b[<span class="number">60</span>]),</span><br><span class="line">                h = s(h, f, m, g, C, <span class="number">10</span>, b[<span class="number">61</span>]),</span><br><span class="line">                g = s(g, h, f, m, j, <span class="number">15</span>, b[<span class="number">62</span>]),</span><br><span class="line">                m = s(m, g, h, f, A, <span class="number">21</span>, b[<span class="number">63</span>]);</span><br><span class="line">            a[<span class="number">0</span>] = a[<span class="number">0</span>] + f | <span class="number">0</span>;</span><br><span class="line">            a[<span class="number">1</span>] = a[<span class="number">1</span>] + m | <span class="number">0</span>;</span><br><span class="line">            a[<span class="number">2</span>] = a[<span class="number">2</span>] + g | <span class="number">0</span>;</span><br><span class="line">            a[<span class="number">3</span>] = a[<span class="number">3</span>] + h | <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">this</span>._data,</span><br><span class="line">                n = b.words,</span><br><span class="line">                a = <span class="number">8</span> * <span class="built_in">this</span>._nDataBytes,</span><br><span class="line">                c = <span class="number">8</span> * b.sigBytes;</span><br><span class="line">            n[c &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; <span class="number">24</span> - c % <span class="number">32</span>;</span><br><span class="line">            <span class="keyword">var</span> e = u.floor(a / <span class="number">4294967296</span>);</span><br><span class="line">            n[(c + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">15</span>] = (e &lt;&lt; <span class="number">8</span> | e &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">16711935</span> | (e &lt;&lt; <span class="number">24</span> | e &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">4278255360</span>;</span><br><span class="line">            n[(c + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = (a &lt;&lt; <span class="number">8</span> | a &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">16711935</span> | (a &lt;&lt; <span class="number">24</span> | a &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">4278255360</span>;</span><br><span class="line">            b.sigBytes = <span class="number">4</span> * (n.length + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>._process();</span><br><span class="line">            b = <span class="built_in">this</span>._hash;</span><br><span class="line">            n = b.words;</span><br><span class="line">            <span class="keyword">for</span> (a = <span class="number">0</span>; <span class="number">4</span> &gt; a; a++)</span><br><span class="line">                c = n[a],</span><br><span class="line">                    n[a] = (c &lt;&lt; <span class="number">8</span> | c &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">16711935</span> | (c &lt;&lt; <span class="number">24</span> | c &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">4278255360</span>;</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = v.clone.call(<span class="built_in">this</span>);</span><br><span class="line">            b._hash = <span class="built_in">this</span>._hash.clone();</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.MD5 = v._createHelper(r);</span><br><span class="line">    t.HmacMD5 = v._createHmacHelper(r)</span><br><span class="line">&#125;)(<span class="built_in">Math</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> u = CryptoJS,</span><br><span class="line">        p = u.lib,</span><br><span class="line">        d = p.Base,</span><br><span class="line">        l = p.WordArray,</span><br><span class="line">        p = u.algo,</span><br><span class="line">        s = p.EvpKDF = d.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: d.extend(&#123;</span><br><span class="line">                <span class="attr">keySize</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">hasher</span>: p.MD5,</span><br><span class="line">                <span class="attr">iterations</span>: <span class="number">1</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(d)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">compute</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d, r</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> p = <span class="built_in">this</span>.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length &lt; q;) &#123;</span><br><span class="line">                    n &amp;&amp; s.update(n);</span><br><span class="line">                    <span class="keyword">var</span> n = s.update(d).finalize(r);</span><br><span class="line">                    s.reset();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; p; a++)</span><br><span class="line">                        n = s.finalize(n),</span><br><span class="line">                            s.reset();</span><br><span class="line">                    b.concat(n)</span><br><span class="line">                &#125;</span><br><span class="line">                b.sigBytes = <span class="number">4</span> * q;</span><br><span class="line">                <span class="keyword">return</span> b</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    u.EvpKDF = <span class="function"><span class="keyword">function</span> (<span class="params">d, l, p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.create(p).compute(d, l)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">CryptoJS.lib.Cipher || <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = CryptoJS,</span><br><span class="line">        d = p.lib,</span><br><span class="line">        l = d.Base,</span><br><span class="line">        s = d.WordArray,</span><br><span class="line">        t = d.BufferedBlockAlgorithm,</span><br><span class="line">        r = p.enc.Base64,</span><br><span class="line">        w = p.algo.EvpKDF,</span><br><span class="line">        v = d.Cipher = t.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: l.extend(),</span><br><span class="line">            <span class="attr">createEncryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.create(<span class="built_in">this</span>._ENC_XFORM_MODE, e, a)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">createDecryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.create(<span class="built_in">this</span>._DEC_XFORM_MODE, e, a)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a, b</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.cfg = <span class="built_in">this</span>.cfg.extend(b);</span><br><span class="line">                <span class="built_in">this</span>._xformMode = e;</span><br><span class="line">                <span class="built_in">this</span>._key = a;</span><br><span class="line">                <span class="built_in">this</span>.reset()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                t.reset.call(<span class="built_in">this</span>);</span><br><span class="line">                <span class="built_in">this</span>._doReset()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">process</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>._append(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._process()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">finalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                e &amp;&amp; <span class="built_in">this</span>._append(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._doFinalize()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">keySize</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">ivSize</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">_ENC_XFORM_MODE</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">_DEC_XFORM_MODE</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">_createHelper</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, k, d</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> k ? c : a).encrypt(e, b, k, d)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, k, d</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> k ? c : a).decrypt(e, b, k, d)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    d.StreamCipher = v.extend(&#123;</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._process(!<span class="number">0</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> b = p.mode = &#123;&#125;,</span><br><span class="line">        x = <span class="function"><span class="keyword">function</span> (<span class="params">e, a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="built_in">this</span>._iv;</span><br><span class="line">            c ? <span class="built_in">this</span>._iv = u : c = <span class="built_in">this</span>._prevBlock;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="number">0</span>; d &lt; b; d++)</span><br><span class="line">                e[a + d] ^= c[d]</span><br><span class="line">        &#125;,</span><br><span class="line">        q = (d.BlockCipherMode = l.extend(&#123;</span><br><span class="line">            <span class="attr">createEncryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.Encryptor.create(e, a)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">createDecryptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.Decryptor.create(e, a)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>._cipher = e;</span><br><span class="line">                <span class="built_in">this</span>._iv = a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)).extend();</span><br><span class="line">    q.Encryptor = q.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">this</span>._cipher,</span><br><span class="line">                c = b.blockSize;</span><br><span class="line">            x.call(<span class="built_in">this</span>, e, a, c);</span><br><span class="line">            b.encryptBlock(e, a);</span><br><span class="line">            <span class="built_in">this</span>._prevBlock = e.slice(a, a + c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    q.Decryptor = q.extend(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e, a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">this</span>._cipher,</span><br><span class="line">                c = b.blockSize,</span><br><span class="line">                d = e.slice(a, a + c);</span><br><span class="line">            b.decryptBlock(e, a);</span><br><span class="line">            x.call(<span class="built_in">this</span>, e, a, c);</span><br><span class="line">            <span class="built_in">this</span>._prevBlock = d</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    b = b.CBC = q;</span><br><span class="line">    q = (p.pad = &#123;&#125;).Pkcs7 = &#123;</span><br><span class="line">        <span class="attr">pad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">4</span> * b, c = c - a.sigBytes % c, d = c &lt;&lt; <span class="number">24</span> | c &lt;&lt; <span class="number">16</span> | c &lt;&lt; <span class="number">8</span> | c, l = [], n = <span class="number">0</span>; n &lt; c; n += <span class="number">4</span>)</span><br><span class="line">                l.push(d);</span><br><span class="line">            c = s.create(l, c);</span><br><span class="line">            a.concat(c)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">unpad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            a.sigBytes -= a.words[a.sigBytes - <span class="number">1</span> &gt;&gt;&gt; <span class="number">2</span>] &amp; <span class="number">255</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    d.BlockCipher = v.extend(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: v.cfg.extend(&#123;</span><br><span class="line">            <span class="attr">mode</span>: b,</span><br><span class="line">            <span class="attr">padding</span>: q</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">reset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            v.reset.call(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">this</span>.cfg,</span><br><span class="line">                b = a.iv,</span><br><span class="line">                a = a.mode;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>._xformMode == <span class="built_in">this</span>._ENC_XFORM_MODE)</span><br><span class="line">                <span class="keyword">var</span> c = a.createEncryptor;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c = a.createDecryptor,</span><br><span class="line">                    <span class="built_in">this</span>._minBufferSize = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>._mode = c.call(a, <span class="built_in">this</span>, b &amp;&amp; b.words)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._mode.processBlock(a, b)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">this</span>.cfg.padding;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>._xformMode == <span class="built_in">this</span>._ENC_XFORM_MODE) &#123;</span><br><span class="line">                a.pad(<span class="built_in">this</span>._data, <span class="built_in">this</span>.blockSize);</span><br><span class="line">                <span class="keyword">var</span> b = <span class="built_in">this</span>._process(!<span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                b = <span class="built_in">this</span>._process(!<span class="number">0</span>),</span><br><span class="line">                    a.unpad(b);</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">4</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> n = d.CipherParams = l.extend(&#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.mixIn(a)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (a || <span class="built_in">this</span>.formatter).stringify(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">        b = (p.format = &#123;&#125;).OpenSSL = &#123;</span><br><span class="line">            <span class="attr">stringify</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> b = a.ciphertext;</span><br><span class="line">                a = a.salt;</span><br><span class="line">                <span class="keyword">return</span> (a ? s.create([<span class="number">1398893684</span>, <span class="number">1701076831</span>]).concat(a).concat(b) : b).toString(r)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                a = r.parse(a);</span><br><span class="line">                <span class="keyword">var</span> b = a.words;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1398893684</span> == b[<span class="number">0</span>] &amp;&amp; <span class="number">1701076831</span> == b[<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">var</span> c = s.create(b.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">                    b.splice(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                    a.sigBytes -= <span class="number">16</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> n.create(&#123;</span><br><span class="line">                    <span class="attr">ciphertext</span>: a,</span><br><span class="line">                    <span class="attr">salt</span>: c</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        a = d.SerializableCipher = l.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: l.extend(&#123;</span><br><span class="line">                <span class="attr">format</span>: b</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">                d = <span class="built_in">this</span>.cfg.extend(d);</span><br><span class="line">                <span class="keyword">var</span> l = a.createEncryptor(c, d);</span><br><span class="line">                b = l.finalize(b);</span><br><span class="line">                l = l.cfg;</span><br><span class="line">                <span class="keyword">return</span> n.create(&#123;</span><br><span class="line">                    <span class="attr">ciphertext</span>: b,</span><br><span class="line">                    <span class="attr">key</span>: c,</span><br><span class="line">                    <span class="attr">iv</span>: l.iv,</span><br><span class="line">                    <span class="attr">algorithm</span>: a,</span><br><span class="line">                    <span class="attr">mode</span>: l.mode,</span><br><span class="line">                    <span class="attr">padding</span>: l.padding,</span><br><span class="line">                    <span class="attr">blockSize</span>: a.blockSize,</span><br><span class="line">                    <span class="attr">formatter</span>: d.format</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">                d = <span class="built_in">this</span>.cfg.extend(d);</span><br><span class="line">                b = <span class="built_in">this</span>._parse(b, d.format);</span><br><span class="line">                <span class="keyword">return</span> a.createDecryptor(c, d).finalize(b.ciphertext)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_parse</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> a ? b.parse(a, <span class="built_in">this</span>) : a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        p = (p.kdf = &#123;&#125;).OpenSSL = &#123;</span><br><span class="line">            <span class="attr">execute</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">                d || (d = s.random(<span class="number">8</span>));</span><br><span class="line">                a = w.create(&#123;</span><br><span class="line">                    <span class="attr">keySize</span>: b + c</span><br><span class="line">                &#125;).compute(a, d);</span><br><span class="line">                c = s.create(a.words.slice(b), <span class="number">4</span> * c);</span><br><span class="line">                a.sigBytes = <span class="number">4</span> * b;</span><br><span class="line">                <span class="keyword">return</span> n.create(&#123;</span><br><span class="line">                    <span class="attr">key</span>: a,</span><br><span class="line">                    <span class="attr">iv</span>: c,</span><br><span class="line">                    <span class="attr">salt</span>: d</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        c = d.PasswordBasedCipher = a.extend(&#123;</span><br><span class="line">            <span class="attr">cfg</span>: a.cfg.extend(&#123;</span><br><span class="line">                <span class="attr">kdf</span>: p</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="attr">encrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, c, d, l</span>) </span>&#123;</span><br><span class="line">                l = <span class="built_in">this</span>.cfg.extend(l);</span><br><span class="line">                d = l.kdf.execute(d, b.keySize, b.ivSize);</span><br><span class="line">                l.iv = d.iv;</span><br><span class="line">                b = a.encrypt.call(<span class="built_in">this</span>, b, c, d.key, l);</span><br><span class="line">                b.mixIn(d);</span><br><span class="line">                <span class="keyword">return</span> b</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">decrypt</span>: <span class="function"><span class="keyword">function</span> (<span class="params">b, c, d, l</span>) </span>&#123;</span><br><span class="line">                l = <span class="built_in">this</span>.cfg.extend(l);</span><br><span class="line">                c = <span class="built_in">this</span>._parse(c, l.format);</span><br><span class="line">                d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt);</span><br><span class="line">                l.iv = d.iv;</span><br><span class="line">                <span class="keyword">return</span> a.decrypt.call(<span class="built_in">this</span>, b, c, d.key, l)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;();</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = <span class="number">0</span>; <span class="number">256</span> &gt; c; c++)</span><br><span class="line">        a[c] = <span class="number">128</span> &gt; c ? c &lt;&lt; <span class="number">1</span> : c &lt;&lt; <span class="number">1</span> ^ <span class="number">283</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>; <span class="number">256</span> &gt; c; c++) &#123;</span><br><span class="line">        <span class="keyword">var</span> k = j ^ j &lt;&lt; <span class="number">1</span> ^ j &lt;&lt; <span class="number">2</span> ^ j &lt;&lt; <span class="number">3</span> ^ j &lt;&lt; <span class="number">4</span>,</span><br><span class="line">            k = k &gt;&gt;&gt; <span class="number">8</span> ^ k &amp; <span class="number">255</span> ^ <span class="number">99</span>;</span><br><span class="line">        l[e] = k;</span><br><span class="line">        s[k] = e;</span><br><span class="line">        <span class="keyword">var</span> z = a[e],</span><br><span class="line">            F = a[z],</span><br><span class="line">            G = a[F],</span><br><span class="line">            y = <span class="number">257</span> * a[k] ^ <span class="number">16843008</span> * k;</span><br><span class="line">        t[e] = y &lt;&lt; <span class="number">24</span> | y &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        r[e] = y &lt;&lt; <span class="number">16</span> | y &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        w[e] = y &lt;&lt; <span class="number">8</span> | y &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">        v[e] = y;</span><br><span class="line">        y = <span class="number">16843009</span> * G ^ <span class="number">65537</span> * F ^ <span class="number">257</span> * z ^ <span class="number">16843008</span> * e;</span><br><span class="line">        b[k] = y &lt;&lt; <span class="number">24</span> | y &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        x[k] = y &lt;&lt; <span class="number">16</span> | y &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        q[k] = y &lt;&lt; <span class="number">8</span> | y &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">        n[k] = y;</span><br><span class="line">        e ? (e = z ^ a[a[a[G ^ z]]],</span><br><span class="line">            j ^= a[a[j]]) : e = j = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> H = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">27</span>, <span class="number">54</span>],</span><br><span class="line">        d = d.AES = p.extend(&#123;</span><br><span class="line">            <span class="attr">_doReset</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="built_in">this</span>._key, c = a.words, d = a.sigBytes / <span class="number">4</span>, a = <span class="number">4</span> * ((<span class="built_in">this</span>._nRounds = d + <span class="number">6</span>) + <span class="number">1</span>), e = <span class="built_in">this</span>._keySchedule = [], j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; d)</span><br><span class="line">                        e[j] = c[j];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> k = e[j - <span class="number">1</span>];</span><br><span class="line">                        j % d ? <span class="number">6</span> &lt; d &amp;&amp; <span class="number">4</span> == j % d &amp;&amp; (k = l[k &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | l[k &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | l[k &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | l[k &amp; <span class="number">255</span>]) : (k = k &lt;&lt; <span class="number">8</span> | k &gt;&gt;&gt; <span class="number">24</span>,</span><br><span class="line">                            k = l[k &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | l[k &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | l[k &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | l[k &amp; <span class="number">255</span>],</span><br><span class="line">                            k ^= H[j / d | <span class="number">0</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                        e[j] = e[j - d] ^ k</span><br><span class="line">                    &#125;</span><br><span class="line">                c = <span class="built_in">this</span>._invKeySchedule = [];</span><br><span class="line">                <span class="keyword">for</span> (d = <span class="number">0</span>; d &lt; a; d++)</span><br><span class="line">                    j = a - d,</span><br><span class="line">                        k = d % <span class="number">4</span> ? e[j] : e[j - <span class="number">4</span>],</span><br><span class="line">                        c[d] = <span class="number">4</span> &gt; d || <span class="number">4</span> &gt;= j ? k : b[l[k &gt;&gt;&gt; <span class="number">24</span>]] ^ x[l[k &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>]] ^ q[l[k &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>]] ^ n[l[k &amp; <span class="number">255</span>]]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">encryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>._doCryptBlock(a, b, <span class="built_in">this</span>._keySchedule, t, r, w, v, l)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">decryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> d = a[c + <span class="number">1</span>];</span><br><span class="line">                a[c + <span class="number">1</span>] = a[c + <span class="number">3</span>];</span><br><span class="line">                a[c + <span class="number">3</span>] = d;</span><br><span class="line">                <span class="built_in">this</span>._doCryptBlock(a, c, <span class="built_in">this</span>._invKeySchedule, b, x, q, n, s);</span><br><span class="line">                d = a[c + <span class="number">1</span>];</span><br><span class="line">                a[c + <span class="number">1</span>] = a[c + <span class="number">3</span>];</span><br><span class="line">                a[c + <span class="number">3</span>] = d</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">_doCryptBlock</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d, e, j, l, f</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="built_in">this</span>._nRounds, g = a[b] ^ c[<span class="number">0</span>], h = a[b + <span class="number">1</span>] ^ c[<span class="number">1</span>], k = a[b + <span class="number">2</span>] ^ c[<span class="number">2</span>], n = a[b + <span class="number">3</span>] ^ c[<span class="number">3</span>], p = <span class="number">4</span>, r = <span class="number">1</span>; r &lt; m; r++)</span><br><span class="line">                    <span class="keyword">var</span> q = d[g &gt;&gt;&gt; <span class="number">24</span>] ^ e[h &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ j[k &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ l[n &amp; <span class="number">255</span>] ^ c[p++],</span><br><span class="line">                        s = d[h &gt;&gt;&gt; <span class="number">24</span>] ^ e[k &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ j[n &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ l[g &amp; <span class="number">255</span>] ^ c[p++],</span><br><span class="line">                        t = d[k &gt;&gt;&gt; <span class="number">24</span>] ^ e[n &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ j[g &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ l[h &amp; <span class="number">255</span>] ^ c[p++],</span><br><span class="line">                        n = d[n &gt;&gt;&gt; <span class="number">24</span>] ^ e[g &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ j[h &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ l[k &amp; <span class="number">255</span>] ^ c[p++],</span><br><span class="line">                        g = q,</span><br><span class="line">                        h = s,</span><br><span class="line">                        k = t;</span><br><span class="line">                q = (f[g &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | f[h &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | f[k &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | f[n &amp; <span class="number">255</span>]) ^ c[p++];</span><br><span class="line">                s = (f[h &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | f[k &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | f[n &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | f[g &amp; <span class="number">255</span>]) ^ c[p++];</span><br><span class="line">                t = (f[k &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | f[n &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | f[g &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | f[h &amp; <span class="number">255</span>]) ^ c[p++];</span><br><span class="line">                n = (f[n &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | f[g &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | f[h &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | f[k &amp; <span class="number">255</span>]) ^ c[p++];</span><br><span class="line">                a[b] = q;</span><br><span class="line">                a[b + <span class="number">1</span>] = s;</span><br><span class="line">                a[b + <span class="number">2</span>] = t;</span><br><span class="line">                a[b + <span class="number">3</span>] = n</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">keySize</span>: <span class="number">8</span></span><br><span class="line">        &#125;);</span><br><span class="line">    u.AES = p._createHelper(d)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPwd</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;7FD8A3F96A5407D417CFBB5637C5083F&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">32</span>) &#123;</span><br><span class="line">        str += <span class="string">&quot;abcdefghijklmnopqrstuvwxyz1234567890&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> key = str.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">var</span> iv = str.substring(<span class="number">16</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">var</span> security = <span class="string">&quot;\u4435\u5320\u4d35&quot;</span>;</span><br><span class="line">    value = CryptoJS.AES.encrypt(p, CryptoJS.enc.Utf8.parse(key), &#123;</span><br><span class="line">        <span class="attr">iv</span>: CryptoJS.enc.Utf8.parse(iv)</span><br><span class="line">    &#125;).toString();</span><br><span class="line">    <span class="keyword">return</span> security + value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="python实现">python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密解密的逆向</span></span><br><span class="line">password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;./逆向/cf.js&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">funcName = <span class="string">&#x27;getPwd(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(password)</span><br><span class="line">pwd = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫逆向(9)--有道翻译逆向</title>
    <url>/posts/96213c5f/</url>
    <content><![CDATA[<h2 id="有道翻译翻译逆向">有道翻译翻译逆向</h2>
<h3 id="抓包分析">抓包分析</h3>
<ul>
<li>url：<a href="https://fanyi.youdao.com/">https://fanyi.youdao.com/</a></li>
<li>在输入框中输入一个单词&quot;dog&quot;，发现抓取到一个 XHR 的数据包</li>
<li>通过抓包抓取输入不同单词对应的数据包进行请求参数的比对，发现只有以下参数是动态处理的：
<ul>
<li>i(就是输入的文本)</li>
<li>salt</li>
<li>sign
<ul>
<li><code> sign: n.md5(&quot;fanyideskweb&quot; + e + i + &quot;Ygy_4c=r#e#4EX^NUGUc5&quot;)</code></li>
<li>e: 就是需要翻译的单词</li>
<li>i: 字符串形式的 js 时间戳 + 一位的随机整数</li>
<li>(python 的时间戳 * 1000 = js 时间戳)</li>
</ul>
</li>
<li>lts</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="js调试">js调试</h3>
<div class="highlight-wrap" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="function"><span class="keyword">function</span> (<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e &lt;&lt; t | e &gt;&gt;&gt; <span class="number">32</span> - t</span><br><span class="line">&#125;,</span><br><span class="line">    r = <span class="function"><span class="keyword">function</span> (<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n, r, i, o, a;</span><br><span class="line">        <span class="keyword">return</span> i = <span class="number">2147483648</span> &amp; e,</span><br><span class="line">            o = <span class="number">2147483648</span> &amp; t,</span><br><span class="line">            n = <span class="number">1073741824</span> &amp; e,</span><br><span class="line">            r = <span class="number">1073741824</span> &amp; t,</span><br><span class="line">            a = (<span class="number">1073741823</span> &amp; e) + (<span class="number">1073741823</span> &amp; t),</span><br><span class="line">            n &amp; r ? <span class="number">2147483648</span> ^ a ^ i ^ o : n | r ? <span class="number">1073741824</span> &amp; a ? <span class="number">3221225472</span> ^ a ^ i ^ o : <span class="number">1073741824</span> ^ a ^ i ^ o : a ^ i ^ o</span><br><span class="line">    &#125;,</span><br><span class="line">    i = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e &amp; t | ~e &amp; n</span><br><span class="line">    &#125;,</span><br><span class="line">    o = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e &amp; n | t &amp; ~n</span><br><span class="line">    &#125;,</span><br><span class="line">    a = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e ^ t ^ n</span><br><span class="line">    &#125;,</span><br><span class="line">    s = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t ^ (e | ~n)</span><br><span class="line">    &#125;,</span><br><span class="line">    l = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, o, a, s, l, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e = r(e, r(r(i(t, o, a), s), c)),</span><br><span class="line">            r(n(e, l), t)</span><br><span class="line">    &#125;,</span><br><span class="line">    c = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, i, a, s, l, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e = r(e, r(r(o(t, i, a), s), c)),</span><br><span class="line">            r(n(e, l), t)</span><br><span class="line">    &#125;,</span><br><span class="line">    u = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, i, o, s, l, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e = r(e, r(r(a(t, i, o), s), c)),</span><br><span class="line">            r(n(e, l), t)</span><br><span class="line">    &#125;,</span><br><span class="line">    d = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, i, o, a, l, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e = r(e, r(r(s(t, i, o), a), c)),</span><br><span class="line">            r(n(e, l), t)</span><br><span class="line">    &#125;,</span><br><span class="line">    f = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t, n = e.length, r = n + <span class="number">8</span>, i = <span class="number">16</span> * ((r - r % <span class="number">64</span>) / <span class="number">64</span> + <span class="number">1</span>), o = <span class="built_in">Array</span>(i - <span class="number">1</span>), a = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; n;)</span><br><span class="line">            a = s % <span class="number">4</span> * <span class="number">8</span>,</span><br><span class="line">                o[t = (s - s % <span class="number">4</span>) / <span class="number">4</span>] = o[t] | e.charCodeAt(s) &lt;&lt; a,</span><br><span class="line">                s++;</span><br><span class="line">        <span class="keyword">return</span> t = (s - s % <span class="number">4</span>) / <span class="number">4</span>,</span><br><span class="line">            a = s % <span class="number">4</span> * <span class="number">8</span>,</span><br><span class="line">            o[t] = o[t] | <span class="number">128</span> &lt;&lt; a,</span><br><span class="line">            o[i - <span class="number">2</span>] = n &lt;&lt; <span class="number">3</span>,</span><br><span class="line">            o[i - <span class="number">1</span>] = n &gt;&gt;&gt; <span class="number">29</span>,</span><br><span class="line">            o</span><br><span class="line">    &#125;,</span><br><span class="line">    p = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, n = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt;= <span class="number">3</span>; t++)</span><br><span class="line">            n += (r = <span class="string">&quot;0&quot;</span> + (e &gt;&gt;&gt; <span class="number">8</span> * t &amp; <span class="number">255</span>).toString(<span class="number">16</span>)).substr(r.length - <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;,</span><br><span class="line">    h = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e = e.replace(<span class="regexp">/\x0d\x0a/g</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = <span class="number">0</span>; n &lt; e.length; n++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = e.charCodeAt(n);</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">128</span>)</span><br><span class="line">                t += <span class="built_in">String</span>.fromCharCode(r);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (r &gt; <span class="number">127</span> &amp;&amp; r &lt; <span class="number">2048</span>)</span><br><span class="line">                t += <span class="built_in">String</span>.fromCharCode(r &gt;&gt; <span class="number">6</span> | <span class="number">192</span>),</span><br><span class="line">                    t += <span class="built_in">String</span>.fromCharCode(<span class="number">63</span> &amp; r | <span class="number">128</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (r &gt;= <span class="number">55296</span> &amp;&amp; r &lt;= <span class="number">56319</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (n + <span class="number">1</span> &lt; e.length) &#123;</span><br><span class="line">                    <span class="keyword">var</span> i = e.charCodeAt(n + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= <span class="number">56320</span> &amp;&amp; i &lt;= <span class="number">57343</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> o = <span class="number">1024</span> * (r - <span class="number">55296</span>) + (i - <span class="number">56320</span>) + <span class="number">65536</span>;</span><br><span class="line">                        t += <span class="built_in">String</span>.fromCharCode(<span class="number">240</span> | o &gt;&gt; <span class="number">18</span> &amp; <span class="number">7</span>),</span><br><span class="line">                            t += <span class="built_in">String</span>.fromCharCode(<span class="number">128</span> | o &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span>),</span><br><span class="line">                            t += <span class="built_in">String</span>.fromCharCode(<span class="number">128</span> | o &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span>),</span><br><span class="line">                            t += <span class="built_in">String</span>.fromCharCode(<span class="number">128</span> | <span class="number">63</span> &amp; o),</span><br><span class="line">                            n++</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                t += <span class="built_in">String</span>.fromCharCode(r &gt;&gt; <span class="number">12</span> | <span class="number">224</span>),</span><br><span class="line">                    t += <span class="built_in">String</span>.fromCharCode(r &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">                    t += <span class="built_in">String</span>.fromCharCode(<span class="number">63</span> &amp; r | <span class="number">128</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t, n, i, o, a, s, m, g, v, y = <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (e = h(e),</span><br><span class="line">        y = f(e),</span><br><span class="line">        s = <span class="number">1732584193</span>,</span><br><span class="line">        m = <span class="number">4023233417</span>,</span><br><span class="line">        g = <span class="number">2562383102</span>,</span><br><span class="line">        v = <span class="number">271733878</span>,</span><br><span class="line">        t = <span class="number">0</span>; t &lt; y.length; t += <span class="number">16</span>)</span><br><span class="line">        n = s,</span><br><span class="line">            i = m,</span><br><span class="line">            o = g,</span><br><span class="line">            a = v,</span><br><span class="line">            s = l(s, m, g, v, y[t + <span class="number">0</span>], <span class="number">7</span>, <span class="number">3614090360</span>),</span><br><span class="line">            v = l(v, s, m, g, y[t + <span class="number">1</span>], <span class="number">12</span>, <span class="number">3905402710</span>),</span><br><span class="line">            g = l(g, v, s, m, y[t + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>),</span><br><span class="line">            m = l(m, g, v, s, y[t + <span class="number">3</span>], <span class="number">22</span>, <span class="number">3250441966</span>),</span><br><span class="line">            s = l(s, m, g, v, y[t + <span class="number">4</span>], <span class="number">7</span>, <span class="number">4118548399</span>),</span><br><span class="line">            v = l(v, s, m, g, y[t + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>),</span><br><span class="line">            g = l(g, v, s, m, y[t + <span class="number">6</span>], <span class="number">17</span>, <span class="number">2821735955</span>),</span><br><span class="line">            m = l(m, g, v, s, y[t + <span class="number">7</span>], <span class="number">22</span>, <span class="number">4249261313</span>),</span><br><span class="line">            s = l(s, m, g, v, y[t + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>),</span><br><span class="line">            v = l(v, s, m, g, y[t + <span class="number">9</span>], <span class="number">12</span>, <span class="number">2336552879</span>),</span><br><span class="line">            g = l(g, v, s, m, y[t + <span class="number">10</span>], <span class="number">17</span>, <span class="number">4294925233</span>),</span><br><span class="line">            m = l(m, g, v, s, y[t + <span class="number">11</span>], <span class="number">22</span>, <span class="number">2304563134</span>),</span><br><span class="line">            s = l(s, m, g, v, y[t + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>),</span><br><span class="line">            v = l(v, s, m, g, y[t + <span class="number">13</span>], <span class="number">12</span>, <span class="number">4254626195</span>),</span><br><span class="line">            g = l(g, v, s, m, y[t + <span class="number">14</span>], <span class="number">17</span>, <span class="number">2792965006</span>),</span><br><span class="line">            m = l(m, g, v, s, y[t + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>),</span><br><span class="line">            s = c(s, m, g, v, y[t + <span class="number">1</span>], <span class="number">5</span>, <span class="number">4129170786</span>),</span><br><span class="line">            v = c(v, s, m, g, y[t + <span class="number">6</span>], <span class="number">9</span>, <span class="number">3225465664</span>),</span><br><span class="line">            g = c(g, v, s, m, y[t + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>),</span><br><span class="line">            m = c(m, g, v, s, y[t + <span class="number">0</span>], <span class="number">20</span>, <span class="number">3921069994</span>),</span><br><span class="line">            s = c(s, m, g, v, y[t + <span class="number">5</span>], <span class="number">5</span>, <span class="number">3593408605</span>),</span><br><span class="line">            v = c(v, s, m, g, y[t + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>),</span><br><span class="line">            g = c(g, v, s, m, y[t + <span class="number">15</span>], <span class="number">14</span>, <span class="number">3634488961</span>),</span><br><span class="line">            m = c(m, g, v, s, y[t + <span class="number">4</span>], <span class="number">20</span>, <span class="number">3889429448</span>),</span><br><span class="line">            s = c(s, m, g, v, y[t + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>),</span><br><span class="line">            v = c(v, s, m, g, y[t + <span class="number">14</span>], <span class="number">9</span>, <span class="number">3275163606</span>),</span><br><span class="line">            g = c(g, v, s, m, y[t + <span class="number">3</span>], <span class="number">14</span>, <span class="number">4107603335</span>),</span><br><span class="line">            m = c(m, g, v, s, y[t + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>),</span><br><span class="line">            s = c(s, m, g, v, y[t + <span class="number">13</span>], <span class="number">5</span>, <span class="number">2850285829</span>),</span><br><span class="line">            v = c(v, s, m, g, y[t + <span class="number">2</span>], <span class="number">9</span>, <span class="number">4243563512</span>),</span><br><span class="line">            g = c(g, v, s, m, y[t + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>),</span><br><span class="line">            m = c(m, g, v, s, y[t + <span class="number">12</span>], <span class="number">20</span>, <span class="number">2368359562</span>),</span><br><span class="line">            s = u(s, m, g, v, y[t + <span class="number">5</span>], <span class="number">4</span>, <span class="number">4294588738</span>),</span><br><span class="line">            v = u(v, s, m, g, y[t + <span class="number">8</span>], <span class="number">11</span>, <span class="number">2272392833</span>),</span><br><span class="line">            g = u(g, v, s, m, y[t + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>),</span><br><span class="line">            m = u(m, g, v, s, y[t + <span class="number">14</span>], <span class="number">23</span>, <span class="number">4259657740</span>),</span><br><span class="line">            s = u(s, m, g, v, y[t + <span class="number">1</span>], <span class="number">4</span>, <span class="number">2763975236</span>),</span><br><span class="line">            v = u(v, s, m, g, y[t + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>),</span><br><span class="line">            g = u(g, v, s, m, y[t + <span class="number">7</span>], <span class="number">16</span>, <span class="number">4139469664</span>),</span><br><span class="line">            m = u(m, g, v, s, y[t + <span class="number">10</span>], <span class="number">23</span>, <span class="number">3200236656</span>),</span><br><span class="line">            s = u(s, m, g, v, y[t + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>),</span><br><span class="line">            v = u(v, s, m, g, y[t + <span class="number">0</span>], <span class="number">11</span>, <span class="number">3936430074</span>),</span><br><span class="line">            g = u(g, v, s, m, y[t + <span class="number">3</span>], <span class="number">16</span>, <span class="number">3572445317</span>),</span><br><span class="line">            m = u(m, g, v, s, y[t + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>),</span><br><span class="line">            s = u(s, m, g, v, y[t + <span class="number">9</span>], <span class="number">4</span>, <span class="number">3654602809</span>),</span><br><span class="line">            v = u(v, s, m, g, y[t + <span class="number">12</span>], <span class="number">11</span>, <span class="number">3873151461</span>),</span><br><span class="line">            g = u(g, v, s, m, y[t + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>),</span><br><span class="line">            m = u(m, g, v, s, y[t + <span class="number">2</span>], <span class="number">23</span>, <span class="number">3299628645</span>),</span><br><span class="line">            s = d(s, m, g, v, y[t + <span class="number">0</span>], <span class="number">6</span>, <span class="number">4096336452</span>),</span><br><span class="line">            v = d(v, s, m, g, y[t + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>),</span><br><span class="line">            g = d(g, v, s, m, y[t + <span class="number">14</span>], <span class="number">15</span>, <span class="number">2878612391</span>),</span><br><span class="line">            m = d(m, g, v, s, y[t + <span class="number">5</span>], <span class="number">21</span>, <span class="number">4237533241</span>),</span><br><span class="line">            s = d(s, m, g, v, y[t + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>),</span><br><span class="line">            v = d(v, s, m, g, y[t + <span class="number">3</span>], <span class="number">10</span>, <span class="number">2399980690</span>),</span><br><span class="line">            g = d(g, v, s, m, y[t + <span class="number">10</span>], <span class="number">15</span>, <span class="number">4293915773</span>),</span><br><span class="line">            m = d(m, g, v, s, y[t + <span class="number">1</span>], <span class="number">21</span>, <span class="number">2240044497</span>),</span><br><span class="line">            s = d(s, m, g, v, y[t + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>),</span><br><span class="line">            v = d(v, s, m, g, y[t + <span class="number">15</span>], <span class="number">10</span>, <span class="number">4264355552</span>),</span><br><span class="line">            g = d(g, v, s, m, y[t + <span class="number">6</span>], <span class="number">15</span>, <span class="number">2734768916</span>),</span><br><span class="line">            m = d(m, g, v, s, y[t + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>),</span><br><span class="line">            s = d(s, m, g, v, y[t + <span class="number">4</span>], <span class="number">6</span>, <span class="number">4149444226</span>),</span><br><span class="line">            v = d(v, s, m, g, y[t + <span class="number">11</span>], <span class="number">10</span>, <span class="number">3174756917</span>),</span><br><span class="line">            g = d(g, v, s, m, y[t + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>),</span><br><span class="line">            m = d(m, g, v, s, y[t + <span class="number">9</span>], <span class="number">21</span>, <span class="number">3951481745</span>),</span><br><span class="line">            s = r(s, n),</span><br><span class="line">            m = r(m, i),</span><br><span class="line">            g = r(g, o),</span><br><span class="line">            v = r(v, a);</span><br><span class="line">    <span class="keyword">return</span> (p(s) + p(m) + p(g) + p(v)).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSign</span>(<span class="params">e, i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5(<span class="string">&quot;fanyideskweb&quot;</span> + e + i + <span class="string">&quot;Ygy_4c=r#e#4EX^NUGUc5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="python实现">python实现</h3>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 sign</span></span><br><span class="line">e = <span class="built_in">input</span>(<span class="string">&#x27;enter a english word: &#x27;</span>)</span><br><span class="line">r = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">i = r + <span class="built_in">str</span>(<span class="built_in">int</span>(random.random()*<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">node = execjs.get()</span><br><span class="line">ctx = node.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;./逆向/youdao.js&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">funcName = <span class="string">&#x27;getSign(&quot;&#123;0&#125;&quot;, &quot;&#123;1&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(e, i)</span><br><span class="line">sign = ctx.<span class="built_in">eval</span>(funcName)</span><br><span class="line"><span class="comment"># print(sign)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起请求</span></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;OUTFOX_SEARCH_USER_ID=-528205141@10.110.96.159; JSESSIONID=aaaBpMJ2EfrY96waD4Ocy; OUTFOX_SEARCH_USER_ID_NCOO=2093795553.3245392; fanyi-ad-id=305838; fanyi-ad-closed=1; ___rl__test__cookies=1652100890288&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: e,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;AUTO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;smartresult&#x27;</span>: <span class="string">&#x27;dict&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span>: <span class="string">&#x27;fanyideskweb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;salt&#x27;</span>: i,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: sign,</span><br><span class="line">    <span class="string">&#x27;lts&#x27;</span>: r,</span><br><span class="line">    <span class="string">&#x27;bv&#x27;</span>: <span class="string">&#x27;ac3968199d18b7367b2479d1f4938ac2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;doctype&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;2.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyfrom&#x27;</span>: <span class="string">&#x27;fanyi.web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;FY_BY_REALTlME&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">result = requests.post(url=url, headers=headers, data=data).json()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>不宠无惊过一生</title>
    <url>/posts/cf8b4b16/</url>
    <content><![CDATA[<p>不乱于心，不困于情。不畏将来，不念过往。如此，安好。</p>
<p>深谋若谷，深交若水。深明大义，深悉小节。已然，静舒。</p>
<span id="more"></span>
<p>善宽以怀，善感以恩。善博以浪，善精以业。这般，最佳。</p>
<p>勿感于时，勿伤于怀。勿耽美色，勿沉虚妄。从今，进取。</p>
<p>无愧于天，无愧于地。无怍于人，无惧于鬼。这样，人生。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>鸡汤</category>
      </categories>
      <tags>
        <tag>文化</tag>
        <tag>诗词</tag>
        <tag>丰子恺</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(1)---Hexo框架安装</title>
    <url>/posts/c9c7cf93/</url>
    <content><![CDATA[<h2 id="一、Hexo框架介绍">一、Hexo框架介绍</h2>
<h2 id=""></h2>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<span id="more"></span></p>
<p>Hexo 中文官网：<a href="https://hexo.io/zh-cn/docs/">hexo.io</a></p>
<h2 id="二、依赖环境的安装">二、依赖环境的安装</h2>
<p><strong>无特殊说明情况下，本文所有下载及安装过程仅限于Windows系统。</strong></p>
<h3 id="1-Node-js安装">1.Node.js安装</h3>
<h4 id="官网下载">官网下载</h4>
<p><a href="https://nodejs.org/en/">Node.js官网</a>下载安装包，非专业人士建议选择 LTS 长期支持版本即可，比较稳定，经过了充分的测试。</p>
<h4 id="云盘下载">云盘下载</h4>
<p>有限选择官网最新版本进行下载，如果官网速度较慢，可以选择以下链接进行 Node.js 16.13.1 版本的下载。</p>
<p><a href="https://www.123pan.com/s/XHVA-JQQ5d">123云盘下载链接</a>，提取码：z827。</p>
<p><a href="https://pan.baidu.com/s/1zW4zsP7wEUhQSTOY8qYiRA">百度网盘下载链接</a>，提取码：ts6k。</p>
<p><a href="https://www.aliyundrive.com/s/cRiENyN6xzT">阿里云盘下载链接</a>，提取码：z827。</p>
<p><a href="https://zyzhang.lanzouw.com/iF3iJy23svi">蓝奏云盘下载链接</a>，提取码：z827。</p>
<h4 id="安装过程">安装过程</h4>
<p>安装过程一路点击 Next 即可。注意 Tools for Native Modules 步骤为额外工具，可视个人需求取消勾选。</p>
<h4 id="测试安装">测试安装</h4>
<p>安装完成后，使用 Win+R 打开运行框，输入<code>cmd</code>回车打开命令行窗口，输入<code>npm -v</code>回车，出现版本号即代表安装成功。</p>
<h3 id="2-Git安装">2.Git安装</h3>
<h4 id="官网下载-v2">官网下载</h4>
<p><a href="https://git-scm.com/">Git官网</a>下载安装包。</p>
<h4 id="云盘下载-v2">云盘下载</h4>
<p>网络速度慢，可以选择以下链接进行 Git-2.34.1-64bit 版本的下载。</p>
<p><a href="https://www.123pan.com/s/XHVA-IQQ5d">123云盘下载链接</a>，提取码：z827。</p>
<p><a href="https://www.aliyundrive.com/s/da9QVGQYN4Q">阿里云盘下载链接</a>，提取码：z827。</p>
<p><a href="https://pan.baidu.com/s/12yJP_b18pA7BwEk5dCgNqg">百度网盘下载链接</a>，提取码：sim9。</p>
<p><a href="https://zyzhang.lanzouw.com/i6ZsEy24x5i">蓝奏云盘下载链接</a>，提取码：z827。</p>
<h4 id="安装过程-v2">安装过程</h4>
<p>安装过程一路点击 Next 即可。</p>
<h4 id="测试安装-v2">测试安装</h4>
<p>安装完成后，桌面右键，多出<code>Git GUI Here</code>和<code>Git Bash Here</code>两个选项。</p>
<p>点击<code>Git Bash Here</code>后进行新的命令行窗口，输入<code>git --version</code>回车，出现版本号即说明安装成功。</p>
<h2 id="三、Hexo安装">三、Hexo安装</h2>
<h3 id="1-本地创建目录">1.本地创建目录</h3>
<p>先在电脑磁盘创建一个空的文件夹，此文件夹用来存放 Hexo 的文件以及之后所写的博客文件，注意不要有中文路径，避免可能出现的 Bug。我选择在 D 盘下新建 MyBlog 文件夹。</p>
<h3 id="2-安装命令">2.安装命令</h3>
<p>在上述自行创建的新文件夹下右键选择<code>Git Bash Here</code>，输入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架(注意 # 开头的为注释文本，无需键入命令)</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 初始化文件夹</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<h4 id="报错解决">报错解决</h4>
<ul>
<li>
<p><code>npm install -g hexo-cli</code>命令卡住或者报错无法连接。</p>
<p>可能是由于 npm 的源速度太慢，可以尝试以下命令来重新安装。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>​	显示如下类似内容即为安装成功。</p>
<p><img src="https://s2.loli.net/2022/03/27/4li3VetUJMLBFvR.png" alt=""></p>
<ul>
<li>
<p><code>hexo init</code>命令执行卡住或者报错无法连接。</p>
<p>给 git 配置代理，具体配置方法不再给出，有需要可以百度。</p>
</li>
<li>
<p>可以根据报错反馈的错误号进行百度，查找相应的解决办法。</p>
</li>
</ul>
<h3 id="3-本地博客效果预览">3.本地博客效果预览</h3>
<p>上述命令执行成功之后，Hexo 框架已经在本地搭建完成，可以通过输入命令查看效果。</p>
<p>在自己创建的博客目录文件夹下，右键打开<code>Git Bash Here</code>，键入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>
<p>当运行之后出现如下窗口即可。</p>
<p><img src="https://s2.loli.net/2022/03/27/YGgRaD9rf7qVmI3.png" alt=""></p>
<p>此时，打开浏览器，输入网址<code>http://localhost:4000</code>就可以看到我们使用 Hexo 搭建的博客示例了，此时的博客是默认主题，比较简洁，可以根据个人喜好进行美化。</p>
<p><img src="https://s2.loli.net/2022/03/27/s7vZRHPB4AXq3NL.png" alt=""></p>
<h2 id="四、美化Hexo博客">四、美化Hexo博客</h2>
<h3 id="1-主题下载">1.主题下载</h3>
<h4 id="官方网站">官方网站</h4>
<p><a href="https://hexo.io/themes/">Hexo 主题页</a></p>
<h4 id="Github">Github</h4>
<p><a href="https://github.com/search?q=hexo-theme">Github hexo-theme 搜索页</a></p>
<h4 id="其他网站">其他网站</h4>
<p>简书，CSDN，知乎等网站里搜索 Hexo 主题推荐。</p>
<h3 id="2-主题更换">2.主题更换</h3>
<p>本文选择主题 <strong>ayer</strong></p>
<p>Github 项目主页链接：<a href="https://github.com/shen-yu/hexo-theme-ayer">Hexo-Ayer</a></p>
<p>网站主题示例效果：<a href="https://shen-yu.gitee.io/">Demo网站</a></p>
<h4 id="主题下载">主题下载</h4>
<p>在自己创建的博客根目录(<code>D:\MyBlog</code>)下，右键选择<code>Git Bash Here</code>进行命令窗口，键入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载主题仓库到 themes 文件夹</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt; themes/&lt;主题名&gt;</span><br></pre></td></tr></table></figure></div>
<p>其中，仓库地址可以在相应主题的 Github 主页找到，例如主题 ayer 的仓库地址如下图所示。</p>
<p><img src="https://s2.loli.net/2022/03/27/hxTQ4LSVIGct3nr.png" alt=""></p>
<p>那么，我这边所需要执行的命令就是</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shen-yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure></div>
<p>执行完成之后，打开博客目录下的 themes 文件夹，发现多了刚才了下载的主题文件夹。</p>
<p><img src="https://s2.loli.net/2022/03/27/GgMrl3SZEBHpnaP.png" alt=""></p>
<h4 id="应用主题">应用主题</h4>
<p>上一步我们只是完成了主题的下载，还没有将主题应用到 Hexo 中去，下面我们开始应用主题。</p>
<p>首先使用文本软件打开博客根目录下的<code>_config.yml</code>文件，找到<code>theme</code>标签，默认值为<code>landscape</code>主题，我们把它改为上一步中我们下载的主题名字即可，这里我设置为<code>ayer</code>，局部截图如下所示。</p>
<p><img src="https://s2.loli.net/2022/03/27/6HrAyZ1e2jozClM.png" alt=""></p>
<p>然后同样在根目录使用<code>Git Bash Here</code>执行以下命令重新启动 Hexo。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 编译 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></div>
<p>此时再打开浏览器输入<code>http://localhost:4000</code>发现博客主题风格已经更换。</p>
<h4 id="报错解决-v2">报错解决</h4>
<p>我这里下载的主题为<code>ayer</code>，没有用到特殊的插件，如果下载其他主题，在前面过程没有错误的前提下，打开浏览器输入网址发现报错信息，大概率是缺少某个依赖库，解决方法一般是<code>Git Bash Here</code>中输入<code>npm install &lt;缺少的依赖库&gt;</code>来安装。</p>
<p>例如，<code>Next</code>主题报错后，需要先使用命令<code>npm install hexo-renderer-swig</code>安装依赖</p>
<p><code>stun</code>主题报错后，需要先使用命令<code>npm install hexo-renderer-pug</code>安装依赖。</p>
<p>不同的主题缺少的依赖可能不一样，但解决方法大致相同，具体到某一个主题，其缺少的依赖库名字可以通过百度查找。</p>
<h4 id="配置修改">配置修改</h4>
<p>更换自己喜欢的主题后，我们需要修改一些博客网页的一些基本属性，比如博客的名字，图片背景或者是添加一些鼠标光标，点击特效，音乐插件等都可以实现。</p>
<h5 id="根目录配置文件"><strong>根目录配置文件</strong></h5>
<p>Hexo 的基本配置大部分都在博客根目录下的<code>_config.yml</code>文件中，它可以叫做<code>根目录配置文件</code>，直接修改这个文件可以修改博客的一些设置，例如前面我们对于下载主题的更换就是修改里边<code>theme</code>标签的参数来实现的。关于<code>根目录配置文件</code>的每个标签及参数的具体意义和使用方法，可以查阅 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置文件官方文档</a>。</p>
<h5 id="主题配置文件"><strong>主题配置文件</strong></h5>
<p>除了上边的根目录配置文件外，我们自己下载的主题文件夹内也会有一个<code>_config.yml</code>文件，这里的这个文件我们叫做<code>主题配置文件</code>。比如我下载的主题是<code>ayer</code>，那么我的<code>主题配置文件</code>路径就是<code>D:\MyBlog\themes\ayer\_config.yml</code>，同样改动参数可以实现对博客页面的改变。关于<code>主题配置文件</code>的每个标签及参数的具体意义和使用方法，可以查阅对应主题的 Github 主页。</p>
<p>如果博客使用的是默认的<code>landscape</code>主题，那么所有的配置仅在<code>根目录配置文件</code>即可修改，如果使用的是第三方下载的主题，那么需要配合使用<code>根目录配置文件</code>和<code>主题配置文件</code>来实现修改博客的目的。</p>
<h5 id="具体修改">具体修改</h5>
<p>下面以我所使用的<code>ayer</code>主题为例，来对博客做一些简单的调整。</p>
<ul>
<li>
<p>打开<code>根目录配置文件</code></p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site 部分</span></span><br><span class="line">title: &lt;自定义&gt;				<span class="comment"># 博客标题</span></span><br><span class="line">author: &lt;自定义&gt;				<span class="comment"># 博客作者</span></span><br><span class="line">language: zh-CN				  <span class="comment"># 网站语言 zh-CN中文  en英文</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>打开<code>主题配置文件</code></p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单		不需要打开的可以直接在前边加 # 进行注释掉</span></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  分类: /categories</span><br><span class="line">  标签: /tags</span><br><span class="line"><span class="comment">#  旅行: /tags/旅行/</span></span><br><span class="line"><span class="comment">#  摄影: http://shenyu-vip.lofter.com</span></span><br><span class="line"><span class="comment">#  友链: /friends</span></span><br><span class="line">  关于我: /2019/about</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站点次标题和打字特效</span></span><br><span class="line">subtitle:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 是否开启动效</span></span><br><span class="line">  text: 面朝大海，春暖花开 <span class="comment"># 显示的文字</span></span><br><span class="line">  text2: 愿你一生努力，一生被爱 <span class="comment"># 滚动播放，如果不需要可以留空</span></span><br><span class="line">  text3: 想要的都拥有，得不到的都释怀 <span class="comment"># 最多支持三段文字</span></span><br><span class="line">  startDelay: 0 <span class="comment"># 延迟时间</span></span><br><span class="line">  typeSpeed: 200 <span class="comment"># 打字速度</span></span><br><span class="line">  loop: <span class="literal">true</span> <span class="comment"># 是否循环</span></span><br><span class="line">  backSpeed: 100 <span class="comment"># 回退速度</span></span><br><span class="line">  showCursor: <span class="literal">true</span> <span class="comment"># 是否显示光标</span></span><br></pre></td></tr></table></figure></div>
<p>第26~27行为修改网站图标和侧边栏 logo。方法：只需要将自己的图标文件放在<code>D:\MyBlog\themes\ayer\source\</code>文件夹下，将配置文件中的<code>favicon.ico</code>修改为自己图标的名称即可。</p>
<p>第31~34行为修改封面配置。方法：只需要将自己的图片文件放在<code>D:\MyBlog\themes\ayer\source\images\</code>文件夹下，将配置文件中的<code>cover1.jpg</code>修改为自己图片文件的名称即可。</p>
<p>第83行为打赏功能。注意：一定要将<code>reward_type</code>的参数修改为<code>0</code>，将打赏功能关闭，否则博客中插入的就是主题作者的收款码了。当然，也可以将收款码更改为自己的。</p>
</li>
</ul>
<p>修改完上述基本配置后，在根目录下运行<code>Git Bash Here</code>，执行命令<code>hexo g &amp;&amp; hexo s</code>，浏览器输入网址<code>http://localhost:4000</code>看一下效果。</p>
<p><img src="https://s2.loli.net/2022/03/27/b8eJRM4PoNDhszx.png" alt=""></p>
<p>​</p>
<p>到此为止，我们的博客基本配置已经修改好了，如果后续还需要修改某些配置，可以对照官方文档进行修改。</p>
<h2 id="五、本地发布文章">五、本地发布文章</h2>
<p>博客搭建好了，但是现在只有示例的<code>Hello World</code>一篇文章，如何发布自己的文章？</p>
<h3 id="1-新建文章">1.新建文章</h3>
<p>在博客根目录下右键进入<code>Git Bash Here</code>，输入以下命令。</p>
<div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;不宠无惊过一生&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>然后进入博客根目录下的<code>source\_posts</code>文件夹，可以看到多了一个<code>不宠无惊过一生.md</code>的文件，这就是新生成的博客文章，因为 Hexo 默认使用 Markdown 语法，所以文件后缀显示为<code>.md</code>，可以使用记事本和<code>Typora</code>打开，个人推荐后者，但是最新版的后者有了收费模式，建议使用<code>0.x</code>版本，Markdown 语法简单易学。</p>
<p>在连接服务器的情况下，键入<code>Ctrl+C</code>停止服务器，重新运行<code>hexo g &amp;&amp; hexo s</code>打开浏览器输入网址即可看到新发布的文章。</p>
<h3 id="2-修改发布文章的模板">2.修改发布文章的模板</h3>
<p>打开位于<code>D:\MyBlog\source\_posts</code>文件夹内的新发布文章的<code>md</code>文件，发现其中并非空白的，这是由于 Hexo 已经根据默认模板为我们生成了一些参数，例如文章创建时间、标签等，方便我们整理归档，当然，这个模板是可以更改的。</p>
<p>我们只要修改<code>根目录配置文件</code>中的<code>new_post_name</code>参数就可以了。</p>
<p>例如修改为<code>new_post_name: :year-:month-:day-:title.md</code>这样以后创建的文章就会自动加上年月日信息，便于通过日期来管理文章。另外，在发布文章的内部，直接修改三个参数也是可以的。</p>
<p><img src="https://gitee.com/zyzhang98/typora-picgo/raw/master/img/image-20211228155450126.png" alt=""></p>
<h2 id="六、后续">六、后续</h2>
<p>至此，博客已经基本可以使用了，只是还部署在本地，下一步的任务就是将这一整套的文件全部部署到服务器上，使得其他人也可以通过固定的网址来访问我们自己的博客。</p>
<blockquote>
<p>本文安装配置过程参考 <a href="https://yushuaigee.gitee.io/">半亩方塘</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>ayer</tag>
        <tag>美化</tag>
      </tags>
  </entry>
</search>
